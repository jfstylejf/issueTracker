/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.CommitList;
import io.swagger.model.CommitTime;
import io.swagger.model.VoidResponsePython;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-10-09T08:48:10.049Z")

@Api(value = "commit", description = "the commit API")
public interface CommitApi {

    @ApiOperation(value = "checkout the project into the certain version by projectId and commitId", nickname = "checkout", notes = "", response = VoidResponsePython.class, tags={ "commit-service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = VoidResponsePython.class),
        @ApiResponse(code = 404, message = "not found", response = VoidResponsePython.class),
        @ApiResponse(code = 500, message = "failed operation", response = VoidResponsePython.class) })
    @RequestMapping(value = "/commit/checkout/{projectId}/{commitId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<VoidResponsePython> checkout(@ApiParam(value = " ",required=true) @PathVariable("projectId") String projectId,@ApiParam(value = " ",required=true) @PathVariable("commitId") String commitId);


    @ApiOperation(value = "get the commitList by projectId", nickname = "getCommitList", notes = "", response = CommitList.class, tags={ "commit-service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CommitList.class),
        @ApiResponse(code = 404, message = "not found", response = VoidResponsePython.class),
        @ApiResponse(code = 500, message = "failed operation", response = VoidResponsePython.class) })
    @RequestMapping(value = "/commit",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CommitList> getCommitList(@NotNull @ApiParam(value = " ", required = true) @Valid @RequestParam(value = "projectId", required = true) String projectId);


    @ApiOperation(value = "get the time of commit by commitId", nickname = "getCommitTime", notes = "", response = CommitTime.class, tags={ "commit-service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CommitTime.class),
        @ApiResponse(code = 404, message = "not found", response = VoidResponsePython.class),
        @ApiResponse(code = 500, message = "failed operation", response = VoidResponsePython.class) })
    @RequestMapping(value = "/commit/commit-time",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CommitTime> getCommitTime(@NotNull @ApiParam(value = " ", required = true) @Valid @RequestParam(value = "commitId", required = true) String commitId);

}
