/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.RequestBody;
import io.swagger.model.RequestBody1;
import io.swagger.model.ResponseBean;
import io.swagger.model.TagList;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-10-09T08:48:10.049Z")

@Api(value = "tags", description = "the tags API")
public interface TagsApi {

    @ApiOperation(value = "add Tag", nickname = "addTag", notes = "", response = ResponseBean.class, tags={ "tag-service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResponseBean.class),
        @ApiResponse(code = 401, message = "failed operation", response = ResponseBean.class) })
    @RequestMapping(value = "/tags",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ResponseBean> addTag(@ApiParam(value = " " ,required=true )  @Valid @org.springframework.web.bind.annotation.RequestBody RequestBody1 requestBody);


    @ApiOperation(value = "delete Tag", nickname = "deleteTag", notes = "", response = ResponseBean.class, tags={ "tag-service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResponseBean.class),
        @ApiResponse(code = 401, message = "failed operation", response = ResponseBean.class) })
    @RequestMapping(value = "/tags/{tag-id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<ResponseBean> deleteTag(@ApiParam(value = " ",required=true) @PathVariable("tag-id") String tagId,@NotNull @ApiParam(value = " ", required = true) @Valid @RequestParam(value = "item-id", required = true) String itemId);


    @ApiOperation(value = "get all default tags", nickname = "getAllDefaultTags", notes = "", response = TagList.class, tags={ "tag-service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = TagList.class),
        @ApiResponse(code = 401, message = "failed operation") })
    @RequestMapping(value = "/tags/default",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TagList> getAllDefaultTags();


    @ApiOperation(value = "modify Tag", nickname = "modifyTag", notes = "", response = ResponseBean.class, tags={ "tag-service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResponseBean.class),
        @ApiResponse(code = 401, message = "failed operation", response = ResponseBean.class) })
    @RequestMapping(value = "/tags",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<ResponseBean> modifyTag(@ApiParam(value = " " ,required=true )  @Valid @org.springframework.web.bind.annotation.RequestBody RequestBody requestBody);

}
