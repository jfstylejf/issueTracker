/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.AddProjectJson;
import io.swagger.model.Project;
import io.swagger.model.ResponseBean;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-10-09T08:48:10.049Z")

@Api(value = "project", description = "the project API")
public interface ProjectApi {

    @ApiOperation(value = "add a project", nickname = "addProject", notes = "This can only be done by logged in user", response = ResponseBean.class, tags={ "project-service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResponseBean.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied", response = ResponseBean.class) })
    @RequestMapping(value = "/project",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ResponseBean> addProject(@ApiParam(value = "project that user want to add" ,required=true )  @Valid @RequestBody AddProjectJson project,@ApiParam(value = "get userToken from Header" ,required=true) @RequestHeader(value="token", required=true) String token);


    @ApiOperation(value = "delet a project", nickname = "delete", notes = "delet a project by projectId", response = ResponseBean.class, tags={ "project-service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResponseBean.class),
        @ApiResponse(code = 401, message = "Invalid ID supplied", response = ResponseBean.class) })
    @RequestMapping(value = "/project/{projectId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<ResponseBean> delete(@ApiParam(value = "project that user want to delet",required=true) @PathVariable("projectId") String projectId);


    @ApiOperation(value = "query Project list By userToken", nickname = "filter", notes = "", response = Project.class, responseContainer = "List", tags={ "project-service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "succsssful", response = Project.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "failed") })
    @RequestMapping(value = "/project/filter",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Project>> filter(@ApiParam(value = "get userToken from Header" ,required=true) @RequestHeader(value="token", required=true) String token,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "keyWord", required = true) String keyWord);


    @ApiOperation(value = "query Project list By userToken", nickname = "query", notes = "", response = Project.class, responseContainer = "List", tags={ "project-service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "succsssful", response = Project.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "failed") })
    @RequestMapping(value = "/project",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Project>> query(@ApiParam(value = "get userToken from Header" ,required=true) @RequestHeader(value="token", required=true) String token,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "type", required = true) String type);

}
