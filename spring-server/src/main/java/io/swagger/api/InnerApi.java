/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.2).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.AddMultiTaggedItemRequestBody;
import io.swagger.model.IssueJSONObject;
import io.swagger.model.IssueList;
import java.util.List;
import io.swagger.model.Project;
import io.swagger.model.RawIssueList;
import io.swagger.model.ResponseBean;
import io.swagger.model.Scan;
import io.swagger.model.TagList;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-03-04T08:22:59.607Z")

@Api(value = "inner", description = "the inner API")
public interface InnerApi {

    @ApiOperation(value = "add Issues", nickname = "addIssues", notes = "", response = ResponseBean.class, tags={ "issue-service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResponseBean.class),
        @ApiResponse(code = 401, message = "failed operation", response = ResponseBean.class) })
    @RequestMapping(value = "/inner/issue",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ResponseBean> addIssues(@ApiParam(value = "" ,required=true )  @Valid @RequestBody IssueList issueList);


    @ApiOperation(value = "add multiTagged item", nickname = "addMultiTaggedItem", notes = "", response = ResponseBean.class, tags={ "tag-service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResponseBean.class),
        @ApiResponse(code = 401, message = "failed operation", response = ResponseBean.class) })
    @RequestMapping(value = "/inner/tags",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ResponseBean> addMultiTaggedItem(@ApiParam(value = " " ,required=true )  @Valid @RequestBody List<AddMultiTaggedItemRequestBody> addMultiTaggedItemRequestBody);


    @ApiOperation(value = "add RawIssues", nickname = "addRawIssues", notes = "", response = ResponseBean.class, tags={ "issue-service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResponseBean.class),
        @ApiResponse(code = 400, message = "failed operation", response = ResponseBean.class) })
    @RequestMapping(value = "/inner/raw-issue",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ResponseBean> addRawIssues(@ApiParam(value = " " ,required=true )  @Valid @RequestBody RawIssueList list);


    @ApiOperation(value = "add one scan", nickname = "addscan", notes = "", response = String.class, tags={ "scan-service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = String.class),
        @ApiResponse(code = 401, message = "failed operation") })
    @RequestMapping(value = "/inner/scan",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<String> addscan(@ApiParam(value = "scan json object" ,required=true )  @Valid @RequestBody Scan scan);


    @ApiOperation(value = "delete Issues by repoId", nickname = "deleteIssues", notes = "", response = ResponseBean.class, tags={ "issue-service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResponseBean.class),
        @ApiResponse(code = 401, message = "failed operation", response = ResponseBean.class) })
    @RequestMapping(value = "/inner/issue/{repoId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<ResponseBean> deleteIssues(@ApiParam(value = "",required=true) @PathVariable("repoId") String repoId);


    @ApiOperation(value = "delete RawIssues", nickname = "deleteRawIssue", notes = "", response = ResponseBean.class, tags={ "issue-service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResponseBean.class),
        @ApiResponse(code = 400, message = "failed operation", response = ResponseBean.class) })
    @RequestMapping(value = "/inner/raw-issue/{repoId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<ResponseBean> deleteRawIssue(@ApiParam(value = " ",required=true) @PathVariable("repoId") String repoId);


    @ApiOperation(value = "delet  Scans by repoId", nickname = "deleteScans", notes = "", response = ResponseBean.class, tags={ "scan-service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResponseBean.class),
        @ApiResponse(code = 401, message = "failed operation", response = ResponseBean.class) })
    @RequestMapping(value = "/inner/scan/{repoId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<ResponseBean> deleteScans(@ApiParam(value = "a repo id",required=true) @PathVariable("repoId") String repoId);


    @ApiOperation(value = "delete tag by projectId", nickname = "deleteTagByProjectId", notes = "", response = ResponseBean.class, tags={ "tag-service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResponseBean.class),
        @ApiResponse(code = 401, message = "failed operation", response = ResponseBean.class) })
    @RequestMapping(value = "/inner/tags",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<ResponseBean> deleteTagByProjectId(@NotNull @ApiParam(value = " ", required = true) @Valid @RequestParam(value = "project-id", required = true) String projectId);


    @ApiOperation(value = "delete Tagged", nickname = "deleteTagged", notes = "", response = ResponseBean.class, tags={ "tag-service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResponseBean.class),
        @ApiResponse(code = 401, message = "failed operation", response = ResponseBean.class) })
    @RequestMapping(value = "/inner/tags/tagged-delete",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ResponseBean> deleteTagged(@ApiParam(value = " " ,required=true )  @Valid @RequestBody List<String> itemIds);


    @ApiOperation(value = "get item ids", nickname = "getItemIds", notes = "", response = String.class, responseContainer = "List", tags={ "tag-service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = String.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "failed operation") })
    @RequestMapping(value = "/inner/tags/item-ids",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<List<String>> getItemIds(@ApiParam(value = " " ,required=true )  @Valid @RequestBody List<String> tagIds);


    @ApiOperation(value = "get Latest Scanned CommitId", nickname = "getLatestScannedCommitId", notes = "", response = String.class, tags={ "scan-service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = String.class),
        @ApiResponse(code = 401, message = "failed operation") })
    @RequestMapping(value = "/inner/scan/last-commit",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<String> getLatestScannedCommitId(@NotNull @ApiParam(value = "a repo_id id", required = true) @Valid @RequestParam(value = "repo_id", required = true) String repoId,@NotNull @ApiParam(value = "category", required = true) @Valid @RequestParam(value = "category", required = true) String category);


    @ApiOperation(value = "get a project", nickname = "getProject", notes = "get a project by projectId", response = Project.class, tags={ "project-service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Project.class),
        @ApiResponse(code = 401, message = "Invalid ID supplied") })
    @RequestMapping(value = "/inner/project/{project-id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Project> getProject(@ApiParam(value = "project that user want to get",required=true) @PathVariable("project-id") String projectId);


    @ApiOperation(value = "get project by repo id", nickname = "getProjectByRepoId", notes = "", response = Project.class, tags={ "project-service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "succsssful", response = Project.class),
        @ApiResponse(code = 400, message = "failed") })
    @RequestMapping(value = "/inner/project",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Project> getProjectByRepoId(@NotNull @ApiParam(value = "repo id", required = true) @Valid @RequestParam(value = "repo_id", required = true) String repoId);


    @ApiOperation(value = "get RawIssues by commit_id", nickname = "getRawIssues", notes = "", response = RawIssueList.class, tags={ "issue-service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = RawIssueList.class),
        @ApiResponse(code = 401, message = "failed operation") })
    @RequestMapping(value = "/inner/raw-issue/list-by-commit",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<RawIssueList> getRawIssues(@NotNull @ApiParam(value = " ", required = true) @Valid @RequestParam(value = "commit_id", required = true) String commitId,@NotNull @ApiParam(value = " ", required = true) @Valid @RequestParam(value = "category", required = true) String category);


    @ApiOperation(value = "get Repo id", nickname = "getRepoId", notes = "get Repo id by project_id", response = String.class, tags={ "project-service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = String.class),
        @ApiResponse(code = 401, message = "Invalid ID supplied") })
    @RequestMapping(value = "/inner/project/repo-id",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<String> getRepoId(@NotNull @ApiParam(value = "project id", required = true) @Valid @RequestParam(value = "project-id", required = true) String projectId);


    @ApiOperation(value = "get commits that have been scanned", nickname = "getScannedCommits", notes = "", response = Scan.class, tags={ "scan-service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Scan.class),
        @ApiResponse(code = 401, message = "failed operation") })
    @RequestMapping(value = "/inner/scan/commits",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Scan> getScannedCommits(@NotNull @ApiParam(value = "a repo id", required = true) @Valid @RequestParam(value = "repo_id", required = true) String repoId);


    @ApiOperation(value = "get tags by item id", nickname = "getTags", notes = "", response = TagList.class, tags={ "tag-service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = TagList.class),
        @ApiResponse(code = 401, message = "failed operation") })
    @RequestMapping(value = "/inner/tags",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TagList> getTags(@NotNull @ApiParam(value = " ", required = true) @Valid @RequestParam(value = "item-id", required = true) String itemId);


    @ApiOperation(value = "mapping", nickname = "mapping", notes = "", response = ResponseBean.class, tags={ "issue-service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResponseBean.class),
        @ApiResponse(code = 401, message = "failed operation", response = ResponseBean.class) })
    @RequestMapping(value = "/inner/issue/mapping",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ResponseBean> mapping(@ApiParam(value = "" ,required=true )  @Valid @RequestBody IssueJSONObject requestParam);


    @ApiOperation(value = "update Issues", nickname = "updateIssues", notes = "", response = ResponseBean.class, tags={ "issue-service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResponseBean.class),
        @ApiResponse(code = 401, message = "failed operation", response = ResponseBean.class) })
    @RequestMapping(value = "/inner/issue",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<ResponseBean> updateIssues(@ApiParam(value = "" ,required=true )  @Valid @RequestBody IssueList issueList);


    @ApiOperation(value = "update Project ", nickname = "updateProject", notes = "", response = ResponseBean.class, tags={ "project-service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "succsssful", response = ResponseBean.class),
        @ApiResponse(code = 401, message = "failed", response = ResponseBean.class) })
    @RequestMapping(value = "/inner/project",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<ResponseBean> updateProject(@ApiParam(value = " message about project " ,required=true )  @Valid @RequestBody Project project);


    @ApiOperation(value = "update RawIssues", nickname = "updateRawIssues", notes = "", response = ResponseBean.class, tags={ "issue-service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResponseBean.class),
        @ApiResponse(code = 400, message = "failed operation", response = ResponseBean.class) })
    @RequestMapping(value = "/inner/raw-issue",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<ResponseBean> updateRawIssues(@ApiParam(value = " " ,required=true )  @Valid @RequestBody RawIssueList list);


    @ApiOperation(value = "update a Scan", nickname = "updateScan", notes = "update a Scan record", response = ResponseBean.class, tags={ "scan-service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResponseBean.class),
        @ApiResponse(code = 401, message = "failed operation", response = ResponseBean.class) })
    @RequestMapping(value = "/inner/scan",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<ResponseBean> updateScan(@ApiParam(value = "a scan object" ,required=true )  @Valid @RequestBody Scan scan);

}
