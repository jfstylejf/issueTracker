/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.2).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.CommitsMsg;
import io.swagger.model.ResponseBean;
import io.swagger.model.ScanJSONObject;
import io.swagger.model.ScanRequestParam;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-03-04T08:22:59.607Z")

@Api(value = "scan", description = "the scan API")
public interface ScanApi {

    @ApiOperation(value = "", nickname = "cloneScan", notes = " ", response = ResponseBean.class, tags={ "scan-service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResponseBean.class),
        @ApiResponse(code = 401, message = "failed operation", response = ResponseBean.class) })
    @RequestMapping(value = "/scan/clone",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ResponseBean> cloneScan(@ApiParam(value = "get projectId and commitId from  JSONObject" ,required=true )  @Valid @RequestBody ScanRequestParam requestParam);


    @ApiOperation(value = "get Commits", nickname = "getCommits", notes = " ", response = CommitsMsg.class, tags={ "scan-service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CommitsMsg.class),
        @ApiResponse(code = 401, message = "failed operation") })
    @RequestMapping(value = "/scan/commits",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CommitsMsg> getCommits(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "project_id", required = true) String projectId,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "category", required = true) String category,@ApiParam(value = "", defaultValue = "1") @Valid @RequestParam(value = "page", required = false, defaultValue="1") String page,@ApiParam(value = "", defaultValue = "10") @Valid @RequestParam(value = "size", required = false, defaultValue="10") String size,@ApiParam(value = "", defaultValue = "false") @Valid @RequestParam(value = "is_whole", required = false, defaultValue="false") String isWhole);


    @ApiOperation(value = "according to current commit id to find next scanned commit", nickname = "getNextScannedCommit", notes = " ", response = ResponseBean.class, tags={ "scan-service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "succsssful", response = ResponseBean.class),
        @ApiResponse(code = 401, message = "failed", response = ResponseBean.class) })
    @RequestMapping(value = "/scan/next-scanned-commits",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ResponseBean> getNextScannedCommit(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "repo_id", required = true) String repoId,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "category", required = true) String category,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "commit_id", required = true) String commitId);


    @ApiOperation(value = "according to current commit id to find next previous commit", nickname = "getPreScannedCommit", notes = " ", response = ResponseBean.class, tags={ "scan-service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "succsssful", response = ResponseBean.class),
        @ApiResponse(code = 401, message = "failed", response = ResponseBean.class) })
    @RequestMapping(value = "/scan/pre-scanned-commits",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ResponseBean> getPreScannedCommit(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "repo_id", required = true) String repoId,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "category", required = true) String category,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "commit_id", required = true) String commitId);


    @ApiOperation(value = "Send Scan Message", nickname = "scan", notes = " ", response = ResponseBean.class, tags={ "scan-service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResponseBean.class),
        @ApiResponse(code = 401, message = "failed operation", response = ResponseBean.class) })
    @RequestMapping(value = "/scan",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ResponseBean> scan(@ApiParam(value = "get projectId and commitId from  JSONObject" ,required=true )  @Valid @RequestBody ScanJSONObject requestParam);

}
