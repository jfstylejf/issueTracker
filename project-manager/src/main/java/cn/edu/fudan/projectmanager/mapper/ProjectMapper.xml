<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.fudan.projectmanager.mapper.ProjectMapper">

    <resultMap id="project" type="Project">
        <id property="uuid" column="uuid"/>
        <result property="name" column="name"/>
        <result property="language" column="language"/>
        <result property="url" column="url"/>
        <result property="repo_source" column="repo_source"/>
        <result property="type" column="type"/>
        <result property="account_id" column="account_id"/>
        <result property="download_status" column="download_status"/>
        <result property="scan_status" column="scan_status"/>
        <result property="add_time" column="add_time"/>
        <result property="start_scan_date" column="start_scan_date"/>
        <result property="till_commit_time" column="till_commit_time"/>
        <result property="last_scan_time" column="last_scan_time"/>
        <result property="description" column="description"/>
        <result property="repo_id" column="repo_id"/>
        <result property="branch" column="branch"/>
        <result property="first_auto_scan" column="first_auto_scan"/>
        <result property="recycled" column="recycled"/>
        <result property="module" column="module"/>
        <result property="delete_time" column="delete_time"/>
    </resultMap>

    <insert id="addOneProject" parameterType="Project">
        insert into project
        (
        uuid,
        name,
        language,
        url,
        repo_source,
        type,
        account_id,
        download_status,
        scan_status,
        add_time,
        start_scan_date,
        till_commit_time,
        last_scan_time,
        description,
        repo_id,
        branch,
        module
        )
        VALUES
        (
        #{uuid},
        #{name},
        #{language},
        #{url},
        #{repo_source},
        #{type},
        #{account_id},
        #{download_status},
        #{scan_status},
        #{add_time},
        #{start_scan_date},
        #{till_commit_time},
        #{last_scan_time},
        #{description},
        #{repo_id},
        #{branch},
        #{module}
        )
    </insert>

    <select id="getProjectByAccountId" parameterType="String" resultMap="project">
        select * from project
        <if test="account_id != null">
            where account_id = #{account_id}
        </if>
        order by add_time desc
    </select>

    <select id="getProjectByKeyWordAndAccountId" parameterType="String" resultMap="project">
        select *
        from project
        <where>
            account_id = #{account_id}
            <if test="keyWord != null and keyWord != '' ">
                and name like "%"#{keyWord}"%"
            </if>
            <if test="module != null and module != '' ">
                and module like "%"#{module}"%"
            </if>
            <if test="type != null and type != ''">
                and type = #{type}
            </if>
        </where>
        order by add_time desc
    </select>

    <select id="getAllProjectByKeyWord" parameterType="String" resultMap="project">
        select *
        from project
        <where>

            <if test="keyWord != null and keyWord != '' ">
                name like "%"#{keyWord}"%"
            </if>
            <if test="module != null and module != '' ">
                and module like "%"#{module}"%"
            </if>
            <if test="type != null and type != ''">
                and type = #{type}
            </if>
        </where>
        order by add_time desc
    </select>

    <select id="getProjectByRepoId" parameterType="String" resultMap="project">
        select * from project where repo_id = #{repo_id}
    </select>

    <select id="getProjectList" parameterType="String" resultMap="project">
        select * from project where account_id = #{account_id} and type = #{type} order by module desc
    </select>

<!--    jeff-->
    <select id="getProjectListByModule" parameterType="String" resultMap="project">
        select * from project where account_id = #{account_id} and type = #{type} and module = #{module} order by add_time desc
    </select>

    <select id="getProjectByID" parameterType="String" resultMap="project">
        select * from project where uuid = #{uuid}
    </select>

    <select id="getProjectByURLTypeAndAccountIdBranch" parameterType="String" resultType="project">
        select * from project where account_id = #{account_id} and url = #{url} and type = #{type} and branch = #{branch}
    </select>


    <select id="getRepoId" parameterType="String" resultType="String">
        select repo_id from project where uuid = #{projectId}
    </select>

    <select id="getProjectIdsByRepoIdAndType" parameterType="String" resultType="String">
        select uuid from project where repo_id = #{repo_id} and type = #{type}
    </select>

    <select id="getProjectsByURLAndTypeBranch" parameterType="String" resultMap="project">
        select * from project where url = #{url}and type = #{type} and branch = #{branch}
    </select>

    <select id="getRepoIdsByAccountIdAndType" parameterType="String" resultType="String">
        select repo_id from project where account_id = #{account_id} and type = #{type}
    </select>

    <delete id="remove" parameterType="String">
        delete from project where uuid = #{projectId}
    </delete>

    <update id="updateProjectStatus" parameterType="Project">
        update project
        <set>
            <if test="name != null">
                name = #{name},
            </if>
            <if test="language != null">
                language = #{language},
            </if>
            <if test="repo_source != null">
                repo_source = #{repo_source},
            </if>
            <if test="download_status != null">
                download_status = #{download_status},
            </if>
            <if test="account_id != null">
                account_id = #{account_id},
            </if>
            <if test="scan_status != null">
                scan_status = #{scan_status},
            </if>
            <if test="till_commit_time != null">
                till_commit_time = #{till_commit_time},
            </if>
            <if test="last_scan_time != null">
                last_scan_time = #{last_scan_time},
            </if>
            <if test="description != null">
                description = #{description},
            </if>
            <if test="repo_id != null">
                repo_id = #{repo_id},
            </if>
            <if test="module != null">
                module = #{module},
            </if>
            <if test="recycled != null">
                recycled = #{recycled},
            </if>
            <if test="delete_time != null">
                delete_time = #{delete_time}
            </if>
        </set>
        where uuid = #{uuid}
    </update>

    <update id="updateProjectFirstAutoScan" parameterType="String">
        update project
        set first_auto_scan = 1
        where repo_id = #{repo_id} and type = #{type}
    </update>

    <select id="existProjectWithThisRepoIdAndTypeAndScannedSign" resultType="int">
        select count(uuid)
        from project
        where repo_id = #{repo_id} and type = #{type} and first_auto_scan = #{first_auto_scan}
    </select>

    <select id="getProjectByRepoIdAndCategory" parameterType="String" resultMap="project">
        select *
        from project
        where repo_id = #{repo_id} and type = #{category} and account_id = #{account_id}
    </select>

    <select id="getProjectsByCondition" parameterType="String" resultMap="project">
        select uuid,name,language,url,repo_source,type,account_id,download_status,scan_status,add_time,till_commit_time,last_scan_time,description,repo_id,branch,first_auto_scan,module
        from project
        <where>
            account_id = #{account_id}
            <if test="type != null and type != '' ">
                and type = #{type}
            </if>
            <if test="name != null and name != '' and name != 'null'">
                and name = #{name}
            </if>
            <if test="module != null and module != '' and module != 'null'">
                and module = #{module}
            </if>
        </where>
    </select>

    <select id="getProjects" resultMap="project">
        select *
        from project
    </select>

    <select id="getLatestCommitTime" resultType="java.util.Date">
        select commit_time from commit where repo_id = #{repo_id} and commit_time = (select max(commit_time) from commit where
        repo_id = #{repo_id});
    </select>
</mapper>