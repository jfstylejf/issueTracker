<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.fudan.issueservice.mapper.RawIssueMapper">

    <resultMap id="rawIssue" type="RawIssue">
        <id property="uuid" column="uuid"/>
        <result property="type" column="type"/>
        <result property="tool" column="tool"/>
        <result property="detail" column="detail"/>
        <result property="file_name" column="file_name"/>
        <result property="scan_id" column="scan_id"/>
        <result property="issue_id" column="issue_id"/>
        <result property="commit_id" column="commit_id"/>
        <result property="repo_id" column="repo_id"/>
        <result property="code_lines" column="code_lines"/>
        <result property="commit_time" column="commit_time"/>
        <result property="developer_email" column="developer_email"/>
        <result property="status" column="status"/>
        <collection property="locations" column="uuid"
                    select="cn.edu.fudan.issueservice.mapper.LocationMapper.getLocations"/>
    </resultMap>

    <resultMap id="rawIssue2" type="RawIssue">
        <id property="uuid" column="uuid"/>
        <result property="type" column="type"/>
        <result property="tool" column="tool"/>
        <result property="detail" column="detail"/>
        <result property="file_name" column="file_name"/>
        <result property="scan_id" column="scan_id"/>
        <result property="issue_id" column="issue_id"/>
        <result property="commit_id" column="commit_id"/>
        <result property="repo_id" column="repo_id"/>
        <result property="code_lines" column="code_lines"/>
        <collection property="locations" column="uuid"
                    select="cn.edu.fudan.issueservice.mapper.LocationMapper.getLocations"/>
    </resultMap>

    <resultMap id="rawIssue3" type="RawIssue">
        <id property="uuid" column="uuid"/>
        <result property="type" column="type"/>
        <result property="tool" column="tool"/>
        <result property="detail" column="detail"/>
        <result property="file_name" column="file_name"/>
        <result property="scan_id" column="scan_id"/>
        <result property="issue_id" column="issue_id"/>
        <result property="commit_id" column="commit_id"/>
        <result property="repo_id" column="repo_id"/>
        <result property="code_lines" column="code_lines"/>
        <association property="issue" column="issue_id"
                     select="cn.edu.fudan.issueservice.mapper.IssueMapper.getIssueByID"/>
        <collection property="locations" column="uuid"
                    select="cn.edu.fudan.issueservice.mapper.LocationMapper.getLocations"/>
    </resultMap>

    <resultMap id="rawIssue4" type="RawIssue">
        <id property="uuid" column="uuid"/>
        <result property="type" column="type"/>
        <result property="tool" column="tool"/>
        <result property="detail" column="detail"/>
        <result property="file_name" column="file_name"/>
        <result property="scan_id" column="scan_id"/>
        <result property="issue_id" column="issue_id"/>
        <result property="commit_id" column="commit_id"/>
        <result property="repo_id" column="repo_id"/>
        <result property="code_lines" column="code_lines"/>
    </resultMap>



    <insert id="insertRawIssueList" parameterType="List">
        insert into rawIssue
        (
        uuid,
        type,
        tool,
        detail,
        file_name,
        scan_id,
        issue_id,
        commit_id,
        developer,
        repo_id,
        code_lines,
        status
        )
        VALUES
        <foreach collection="list" item="item" index="index"
                 separator=",">
            (
            #{item.uuid},
            #{item.type},
            #{item.tool},
            #{item.detail},
            #{item.file_name},
            #{item.scan_id},
            #{item.issue_id},
            #{item.commit_id},
            #{item.developerName},
            #{item.repo_id},
            #{item.code_lines},
            #{item.status}
            )
        </foreach>
    </insert>

    <delete id="deleteRawIssueByRepoIdAndTool" parameterType="String">
        delete from rawIssue  where repo_id = #{repo_id} and tool = #{tool}
    </delete>

    <delete id="deleteRawIssueByIds">
        delete from rawIssue
        <where>
            uuid in
            <foreach collection="list" separator="," open="(" close=")" item="rawIssueId">
                #{rawIssueId}
            </foreach>
        </where>

    </delete>

    <update id="batchUpdateIssueId" parameterType="java.util.List">
        update rawIssue
        <trim prefix="set" suffixOverrides=",">
            <trim prefix="issue_id =case" suffix="end,">
                <foreach collection="list" item="item">
                    <if test="item.issue_id != null">
                        when uuid=#{item.uuid} then #{item.issue_id}
                    </if>
                </foreach>
            </trim>
            <trim prefix="status =case" suffix="end,">
                <foreach collection="list" item="item">
                    <if test="item.status != null">
                        when uuid=#{item.uuid} then #{item.status}
                    </if>
                </foreach>
            </trim>
        </trim>
        <where>
            <foreach collection="list" separator="or" item="item">
                uuid = #{item.uuid}
            </foreach>
        </where>
    </update>


    <select id="getIssueCountBeforeSpecificTime" parameterType="String" resultType="Integer">
        select
        count(distinct(issue_id))
        from
        rawIssue
        where
        scan_id in (select uuid from scan where end_time &lt; #{specificTime} and project_id in (select uuid from
        project where account_id = #{account_id}));
    </select>


    <select id="getRawIssueByCommitIDAndTool" parameterType="String" resultMap="rawIssue2">
        select uuid,type,tool,detail,file_name,scan_id,issue_id,commit_id,repo_id,code_lines,status
        from rawIssue where repo_id = #{repo_id} and tool = #{tool} and commit_id = #{commit_id} and status != 'solved' and status != 'merge solved'
    </select>

    <select id="getRawIssueByCommitIDAndFile" resultMap="rawIssue3">
        select uuid,type,tool,detail,file_name,scan_id,issue_id,commit_id,repo_id,code_lines,status
        from rawIssue
        <where>
            repo_id = #{repo_id}
            <if test="commit_id != null  and commit_id != ''">
                and commit_id = #{commit_id}
            </if>
            <if test="tool != null  and tool != ''">
                and tool = #{tool}
            </if>
            <if test="file_name != null  and file_name != ''">
                and file_name = #{file_name}
            </if>
        </where>
    </select>

    <select id="getRawIssueByIssueId" parameterType="String" resultMap="rawIssue">
        select distinct a.uuid,a.type,a.tool,a.detail,a.file_name,a.scan_id,a.issue_id,a.commit_id,a.repo_id,a.code_lines,a.status,b.commit_time as commit_time, b.developer_email as developer_email
        from rawIssue as a
        inner join commit as b
        on a.commit_id = b.commit_id
        where a.issue_id=#{issueId}
        and status != "default"
        order by commit_time desc ;
    </select>

   <select id="getTypesByCommit" resultType="string">
       select distinct type as types
       from rawIssue
       where tool = #{tool} and commit_id = #{commit_id}
       order by types
   </select>

    <select id="getNumberOfRemainingIssue" parameterType="String" resultType="Integer">
        select count(*) from rawIssue where repo_id = #{repo_id} and commit_id = #{commit_id};
    </select>

    <select id="getNumberOfRemainingIssueBaseFile" resultType="Integer">
        select count(*) from rawIssue where repo_id = #{repo_id} and commit_id = #{commit_id} and file_name =   #{file_name}
    </select>

    <select id="getNumberOfRemainingIssueBasePackage" resultType="Integer">
        select count(*) from location where rawIssue_id in
        (select uuid from rawIssue where repo_id = #{repo_id} and commit_id = #{commit_id})
        and file_path like #{package_name}
    </select>

    <select id="getRankOfFileBaseIssueQuantity" resultType="java.util.WeakHashMap">
        select file_name as 'key',count(file_name) as 'value'
        from rawIssue
        where commit_id = #{commit_id} and repo_id = #{repo_id}
        group by file_name order by value ;
    </select>

    <select id="getRankOfFileBaseDensity" resultType="java.util.WeakHashMap">
        select file_name as 'key',code_lines/count(file_name) as 'value'
        from rawIssue
        where commit_id = #{commit_id} and repo_id = #{repo_id}
        group by file_name order by value ;
    </select>

    <select id="getNumberOfRawIssuesByIssueId" resultType="Integer">
        select count(*) from rawIssue where issue_id = #{issueId};
    </select>

    <select id="getRawIssueListByIssueId" resultMap="rawIssue">
        select distinct a.uuid,a.type,a.tool,a.detail,a.file_name,a.scan_id,a.issue_id,a.commit_id,a.repo_id,a.code_lines,a.status ,b.commit_time as commit_time , b.developer_email as developer_email
        from rawIssue as a
        inner join commit as b
        on a.commit_id = b.commit_id
        where a.issue_id = #{issue_id}

        <if test="statusList != null || statusList.size != 0">
            <trim prefix="and (" prefixOverrides="or" suffix=")">

                <foreach collection="statusList"  item="status">
                    or status = #{status}
                </foreach>

            </trim>
        </if>
        order by commit_time desc
        <if test="start != null  and size != null ">
            limit #{start},#{size}
        </if>
        ;
    </select>

    <select id="getChangedRawIssues" resultMap="rawIssue">
        select distinct a.uuid,a.type,a.tool,a.detail,a.file_name,a.scan_id,a.issue_id,a.commit_id,a.repo_id,a.code_lines,a.status ,b.commit_time as commit_time , b.developer_email as developer_email from
        rawIssue as a
        inner join commit as b
        on a.commit_id = b.commit_id
        where a.uuid in
        (select distinct rawIssue_id from location where rawIssue_id in
          (select uuid from rawIssue where issue_id = #{issueId})
        )
        order by commit_time desc
    </select>

    <select id="getRawIssueCommitTimeByRepoIdAndTool" resultType="String">
        select  distinct(b.commit_time) as commit_time from
         (select commit_id from rawIssue where repo_id = #{repo_id} and tool = #{tool} group by commit_id) as a
         inner join
         commit as b
         on a.commit_id=b.commit_id  where a.commit_id = #{commit_id} order by b.commit_time;
    </select>

    <select id="getCommitIdWhichBeforeDesignatedTime" resultType="String">
        select  distinct(a.commit_id) as commit_id from
        (select commit_id from rawIssue where repo_id = #{repo_id} and tool = #{tool} group by commit_id) as a
        inner join
        commit as b
        on a.commit_id=b.commit_id where  <![CDATA[ b.commit_time < #{commit_time} ]]> order by b.commit_time desc limit 1
    </select>

    <select id="getRawIssueIdByCommitId" resultType="String">
        select uuid from rawIssue where commit_id = #{commit_id} and repo_id = #{repo_id} and tool = #{tool};
    </select>

    <select id="getLatestScannedCommitId" parameterType="String" resultType="String">
        select commit_id from scan where repo_id = #{repo_id} and tool = #{tool} and commit_time = (select max(commit_time) from scan where
        repo_id = #{repo_id} and tool = #{tool} and status = "done");
    </select>

    <select id="getNumberOfRawIssuesByIssueIdAndStatus" resultType="Integer">
        select count(*) from rawIssue where issue_id = #{issueId}
        <if test="list != null || list.size != 0">
            <trim prefix="and (" prefixOverrides="or" suffix=")">

                <foreach collection="list"  item="status">
                    or status = #{status}
                </foreach>

            </trim>
        </if>
        ;
    </select>

    <select id="getRawIssueByRepoIdAndTool" resultMap="rawIssue4">
        select uuid,type,tool,detail,file_name,scan_id,issue_id,commit_id,repo_id,code_lines,status
        from rawIssue
        <where>
            repo_id = #{repo_id}
            <if test="tool != null  and tool != ''">
                and tool = #{tool}
            </if>
        </where>
    </select>

    <select id="getRawIssuesByCondition" parameterType="String" resultType="java.util.HashMap">
        SELECT
        a.tool, a.issue_id, a.commit_id, a.repo_id, a.`status`, b.developer_unique_name, b.commit_time
        FROM
        rawIssue as a
        INNER JOIN commit_view as b
        ON a.repo_id = b.repo_id AND a.commit_id = b.commit_id
        <where>
            <if test="repo_id != null  and repo_id != ''">
                and a.repo_id = #{repo_id}
            </if>

            <if test="status != null  and status != ''">
                and a.`status` = #{status}
            </if>

            <if test="developer != null  and developer != ''">
                and b.developer_unique_name = #{developer}
            </if>

            <if test="tool != null  and tool != ''">
                and a.tool = #{tool}
            </if>

            <if test="type != null  and type != ''">
                and a.type = #{type}
            </if>

            <if test="since != null and since != '' ">
                and <![CDATA[ b.commit_time >= #{since} ]]>
            </if>

            <if test="until != null and until != '' ">
                and <![CDATA[ b.commit_time <= #{until} ]]>
            </if>
        </where>

    </select>

    <select id="getIssueIdAndGroupCountFromRawIssue" parameterType="String" resultType="java.util.HashMap">
        SELECT
        a.issue_id, count(a.issue_id) as issueCount
        FROM
        rawIssue as a
        INNER JOIN commit_view as b
        ON a.repo_id = b.repo_id AND a.commit_id = b.commit_id
        <where>
            <if test="repo_id != null  and repo_id != ''">
                and a.repo_id = #{repo_id}
            </if>

            <if test="status != null  and status != ''">
                and a.`status` = #{status}
            </if>

            <if test="developer != null  and developer != ''">
                and b.developer_unique_name = #{developer}
            </if>

            <if test="tool != null  and tool != ''">
                and a.tool = #{tool}
            </if>

            <if test="since != null and since != '' ">
                and <![CDATA[ b.commit_time >= #{since} ]]>
            </if>

            <if test="until != null and until != '' ">
                and <![CDATA[ b.commit_time <= #{until} ]]>
            </if>
        </where>

        GROUP BY a.issue_id

    </select>

    <select id="getAdderOfOneIssue" parameterType="String" resultType="String">
        SELECT DISTINCT b.developer_unique_name
        FROM
        rawIssue as a
        INNER JOIN commit_view as b
        ON a.repo_id = b.repo_id AND a.commit_id = b.commit_id
        <where>
            a.`status` = "add"
            AND a.issue_id = #{issue_id}
        </where>

    </select>

    <select id="getLastSolverOfOneIssue" parameterType="String" resultType="String">
        SELECT b.developer_unique_name
        FROM
        rawIssue as a
        INNER JOIN commit_view as b
        ON a.repo_id = b.repo_id AND a.commit_id = b.commit_id
        <where>
            a.`status` = "solved"
            AND a.issue_id = #{issue_id}
        </where>
        ORDER BY b.commit_time DESC
        LIMIT 1
    </select>

    <select id="getLastSolvedInfoOfOneIssue" parameterType="String" resultType="java.util.HashMap">
        SELECT a.issue_id, b.developer_unique_name as lastSolver, b.commit_id, b.commit_time
        FROM
        rawIssue as a
        INNER JOIN commit_view as b
        ON a.repo_id = b.repo_id AND a.commit_id = b.commit_id
        <where>
            a.`status` = "solved"
            AND a.issue_id = #{issue_id}
        </where>
        ORDER BY b.commit_time DESC
        LIMIT 1
    </select>

    <select id="getIssueIntroducers" resultType="String">
        SELECT distinct developer
        FROM
        rawIssue
        <where>
            `status` = "add"
            <if test="repoUuids != null and repoUuids.size > 0">
                AND repo_id IN
                <foreach collection="repoUuids" separator="," open="(" close=")" item="repoUuid">
                    #{repoUuid}
                </foreach>
            </if>
        </where>
        ORDER BY developer
    </select>

    <select id="getRawIssueUuidByIssueUuidAndCommit" resultType="String">
        SELECT a.uuid FROM rawIssue AS a INNER JOIN commit_view AS b ON a.commit_id = b.commit_id AND a.repo_id = b.repo_id
        <where>
            a.issue_id = #{issueUuid}
            <if test="commit != null and commit != ''">
                AND a.commit_id = #{commit}
            </if>
        </where>
        ORDER BY b.commit_time DESC LIMIT 1
    </select>
</mapper>