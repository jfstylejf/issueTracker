<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.fudan.issueservice.mapper.IssueMapper">

    <resultMap id="issue" type="Issue">
        <id property="uuid" column="uuid"/>
        <result property="type" column="type"/>
        <result property="tool" column="tool"/>
        <result property="start_commit" column="start_commit"/>
        <result property="start_commit_date" column="start_commit_date"/>
        <result property="end_commit" column="end_commit"/>
        <result property="end_commit_date" column="end_commit_date"/>
        <result property="repo_id" column="repo_id"/>
        <result property="target_files" column="target_files"/>
        <result property="create_time" column="create_time"/>
        <result property="update_time" column="update_time"/>
        <result property="priority" column="priority"/>
        <result property="displayId" column="display_id"/>
        <result property="producer" column="producer"/>
    </resultMap>

    <resultMap id="issueWithCommitView" type="Issue">
        <id property="uuid" column="uuid"/>
        <result property="type" column="type"/>
        <result property="tool" column="tool"/>
        <result property="start_commit" column="start_commit"/>
        <result property="start_commit_date" column="start_commit_date"/>
        <result property="end_commit" column="end_commit"/>
        <result property="end_commit_date" column="end_commit_date"/>
        <result property="repo_id" column="repo_id"/>
        <result property="target_files" column="target_files"/>
        <result property="create_time" column="create_time"/>
        <result property="update_time" column="update_time"/>
        <result property="priority" column="priority"/>
        <result property="displayId" column="display_id"/>
        <result property="status" column="status"/>
        <result property="resolution" column="resolution"/>
        <result property="producer" column="producer"/>
        <result property="issueCategory" column="issue_category"/>
        <result property="manual_status" column="manual_status"/>
        <result property="solver" column="solver"/>
        <collection property="issueType" column="type"
                    select="cn.edu.fudan.issueservice.mapper.IssueTypeMapper.getIssueTypeByTypeName"/>
    </resultMap>

    <resultMap id="issue4" type="Issue">
        <id property="uuid" column="uuid"/>
        <result property="type" column="type"/>
        <result property="tool" column="tool"/>
        <result property="start_commit" column="start_commit"/>
        <result property="start_commit_date" column="start_commit_date"/>
        <result property="end_commit" column="end_commit"/>
        <result property="end_commit_date" column="end_commit_date"/>
        <result property="repo_id" column="repo_id"/>
        <result property="target_files" column="target_files"/>
        <result property="create_time" column="create_time"/>
        <result property="update_time" column="update_time"/>
        <result property="priority" column="priority"/>
        <result property="displayId" column="display_id"/>
        <result property="status" column="status"/>
        <result property="resolution" column="resolution"/>
        <result property="producer" column="producer"/>
        <collection property="issueType" column="type"
                    select="cn.edu.fudan.issueservice.mapper.IssueTypeMapper.getIssueTypeByTypeName"/>
    </resultMap>


    <insert id="insertIssueList" parameterType="List">
        insert into issue
        (
        uuid,
        type,
        tool,
        start_commit,
        start_commit_date,
        end_commit,
        end_commit_date,
        repo_id,
        target_files,
        create_time,
        update_time,
        priority,
        display_id,
        `status`,
        resolution,
        producer,
        issue_category,
        solver
        )
        VALUES
        <foreach collection="list" item="item" index="index" separator=",">
            (
            #{item.uuid},
            #{item.type},
            #{item.tool},
            #{item.start_commit},
            #{item.start_commit_date},
            #{item.end_commit},
            #{item.end_commit_date},
            #{item.repo_id},
            #{item.target_files},
            #{item.create_time},
            #{item.update_time},
            #{item.priority},
            #{item.displayId},
            #{item.status},
            #{item.resolution},
            #{item.producer},
            #{item.issueCategory},
            #{item.solver}
            )
        </foreach>
    </insert>

    <select id="getIssueByID" parameterType="String" resultMap="issueWithCommitView">
        select * from issue where uuid = #{uuid}
    </select>

    <select id="getRepoWithIssues" parameterType="String" resultType="String">
        select
        distinct b.repo_id as repoId
        from issue as a inner join commit_view as b on a.repo_id = b.repo_id and a.start_commit = b.commit_id
        <where>
            manual_status = 'Default'
            <if test="developer != null">
                and b.developer_unique_name = #{developer}
            </if>
        </where>
    </select>


    <update id="batchUpdateIssue" parameterType="List">
        update issue
        <trim prefix="set" suffixOverrides=",">
            <trim prefix="start_commit = case" suffix="end,">
                <foreach collection="list" item="item">
                    <if test="item.start_commit != null">
                        when uuid=#{item.uuid} then #{item.start_commit}
                    </if>
                </foreach>
            </trim>
            <trim prefix="end_commit = case" suffix="end,">
                <foreach collection="list" item="item">
                    <if test="item.end_commit != null">
                        when uuid=#{item.uuid} then #{item.end_commit}
                    </if>
                </foreach>
            </trim>
            <trim prefix="end_commit_date = case" suffix="end,">
                <foreach collection="list" item="item">
                    <if test="item.end_commit_date != null">
                        when uuid=#{item.uuid} then #{item.end_commit_date}
                    </if>
                </foreach>
            </trim>
            <trim prefix="target_files = case" suffix="end,">
                <foreach collection="list" item="item">
                    <if test="item.target_files != null">
                        when uuid=#{item.uuid} then #{item.target_files}
                    </if>
                </foreach>
            </trim>
            <trim prefix="update_time = case" suffix="end,">
                <foreach collection="list" item="item">
                    <if test="item.update_time != null">
                        when uuid=#{item.uuid} then #{item.update_time}
                    </if>
                </foreach>
            </trim>
            <trim prefix="solver = case" suffix="end,">
                <foreach collection="list" item="item">
                    when uuid=#{item.uuid} then #{item.solver}
                </foreach>
            </trim>
            <trim prefix="priority = case" suffix="end,">
                <foreach collection="list" item="item">
                    <if test="item.priority != null">
                        when uuid=#{item.uuid} then #{item.priority}
                    </if>
                </foreach>
            </trim>
            <trim prefix="status = case" suffix="end,">
                <foreach collection="list" item="item">
                    <if test="item.status != null">
                        when uuid=#{item.uuid} then #{item.status}
                    </if>
                </foreach>
            </trim>
            <trim prefix="resolution = case" suffix="end,">
                <foreach collection="list" item="item">
                    <if test="item.resolution != null">
                        when uuid=#{item.uuid} then #{item.resolution}
                    </if>
                </foreach>
            </trim>
        </trim>
        <where>
            <foreach collection="list" separator="or" item="item">
                uuid = #{item.uuid}
            </foreach>
        </where>
    </update>

    <delete id="deleteIssueByRepoIdAndTool" parameterType="String">
        delete from issue where repo_id = #{repo_id} and tool = #{tool}
    </delete>

    <select id="getExistIssueTypes" resultType="String">
        select distinct type  as types
        from issue
        where tool = #{tool} AND manual_status = 'Default' order by types
    </select>

    <update id="updateOneIssuePriority"  >
        UPDATE issue SET priority = #{priority} WHERE uuid = #{uuid}
    </update>

    <update id="updateOneIssueStatus"  >
        UPDATE issue
        <trim prefix="set" suffixOverrides=",">
            <if test="status != null">
                status = #{status},
            </if>
            <if test="manual_status != null">
                manual_status = #{manual_status},
            </if>
        </trim>
        WHERE uuid = #{uuid}
    </update>

    <select id="getMaxIssueDisplayId" parameterType="String" resultType="Integer">
        select max(display_id) from issue where repo_id = #{repo_id}
    </select>

    <select id="getNotSolvedIssueAllListByToolAndRepoId" parameterType="String" resultType="Issue">
        select uuid, type, tool, start_commit, start_commit_date, end_commit, end_commit_date, repo_id, target_files,
        create_time, update_time, priority, display_id, status, manual_status, resolution, issue_category, producer, solver
        from issue where tool = #{tool} and priority != 6
        <if test="repoUuids != null and repoUuids.size > 0">
            AND repo_id IN
            <foreach collection="repoUuids" separator="," open="(" close=")" item="repoUuid">
                #{repoUuid}
            </foreach>
        </if>
    </select>

    <select id="getIssueByRepoIdAndToolAndStatusList" parameterType="String" resultMap="issue4">
        select * from issue
        where  repo_id = #{repo_id} and tool = #{tool}
        <if test="status_list != null and status_list.size > 0">
            <foreach collection="status_list" item="status">
                and status != #{status}
            </foreach>
        </if>
    </select>

    <select id="getIssuesByIds"  resultMap="issue4">
        select * from issue
        <where>
            <if test="issueId_list != null  and issueId_list.size > 0">
                uuid in
                <foreach collection="issueId_list" item="issueId" separator="," open="(" close=")">
                    #{issueId}
                </foreach>
            </if>
        </where>
    </select>

    <select id="getSolvedIssueFilterListCount" parameterType="Map" resultType="Integer">
        SELECT COUNT(*) FROM issue AS a INNER JOIN commit_view AS b ON a.repo_id = b.repo_id AND a.end_commit = b.commit_id
        <trim prefix="where" prefixOverrides="and">
            <if test="manual_status != null">
                AND a.manual_status = #{manual_status}
            </if>
            <if test="developer != null">
                AND a.producer = #{developer}
            </if>
            <if test="priority != null">
                AND a.priority = #{priority}
            </if>
            <if test="solver !=null">
                AND a.solver = #{solver}
            </if>
            <if test="filesPath != null and filesPath.size > 0">
                AND a.target_files IN
                <foreach collection="filesPath" separator="," open="(" close=")" item="filePath">
                    #{filePath}
                </foreach>
            </if>
            <if test="types != null and types.size > 0">
                AND a.type IN
                <foreach collection="types" separator="," open="(" close=")" item="type">
                    #{type}
                </foreach>
            </if>
            <if test="status != null and status.size > 0">
                AND a.status IN
                <foreach collection="status" separator="," open="(" close=")" item="state">
                    #{state}
                </foreach>
            </if>
            <if test="since != null and since != '' ">
                AND <![CDATA[ b.commit_time >= #{since} ]]>
            </if>
            <if test="until != null and until != '' ">
                AND <![CDATA[ b.commit_time <= #{until} ]]>
            </if>
            <if test="toolName != null">
                AND a.tool = #{toolName}
            </if>
            <if test="repoList != null and repoList.size > 0">
                AND a.repo_id IN
                <foreach collection="repoList" separator="," open="(" close=")" item="repo_id">
                    #{repo_id}
                </foreach>
            </if>
            <if test="category != null">
                AND a.issue_category = #{category}
            </if>
            <if test="issueUuids != null and issueUuids.size > 0">
                AND a.uuid IN
                <foreach collection="issueUuids" separator="," open="(" close=")" item="issueUuid">
                    #{issueUuid}
                </foreach>
            </if>
        </trim>
    </select>

    <select id="getIssueFilterListCount" parameterType="Map" resultType="Integer">
        SELECT COUNT(*) FROM issue AS a INNER JOIN commit_view AS b ON a.repo_id = b.repo_id AND a.start_commit = b.commit_id
        <trim prefix="where" prefixOverrides="and">
            <if test="manual_status != null">
                AND a.manual_status = #{manual_status}
            </if>
            <if test="developer != null">
                AND a.producer = #{developer}
            </if>
            <if test="priority != null">
                AND a.priority = #{priority}
            </if>
            <if test="solver !=null">
                AND a.solver = #{solver}
            </if>
            <if test="filesPath != null and filesPath.size > 0">
                AND a.target_files IN
                <foreach collection="filesPath" separator="," open="(" close=")" item="filePath">
                    #{filePath}
                </foreach>
            </if>
            <if test="types != null and types.size > 0">
                AND a.type IN
                <foreach collection="types" separator="," open="(" close=")" item="type">
                    #{type}
                </foreach>
            </if>
            <if test="status != null and status.size > 0">
                AND a.status IN
                <foreach collection="status" separator="," open="(" close=")" item="state">
                    #{state}
                </foreach>
            </if>
            <if test="since != null and since != '' ">
                AND <![CDATA[ b.commit_time >= #{since} ]]>
            </if>
            <if test="until != null and until != '' ">
                AND <![CDATA[ b.commit_time <= #{until} ]]>
            </if>
            <if test="toolName != null">
                AND a.tool = #{toolName}
            </if>
            <if test="repoList != null and repoList.size > 0">
                AND a.repo_id IN
                <foreach collection="repoList" separator="," open="(" close=")" item="repo_id">
                    #{repo_id}
                </foreach>
            </if>
            <if test="category != null">
                AND a.issue_category = #{category}
            </if>
            <if test="issueUuids != null and issueUuids.size > 0">
                AND a.uuid IN
                <foreach collection="issueUuids" separator="," open="(" close=")" item="issueUuid">
                    #{issueUuid}
                </foreach>
            </if>
        </trim>
    </select>

    <select id="getSolvedIssueFilterList" parameterType="Map" resultType="java.util.HashMap">
        SELECT a.uuid, a.type, a.tool, a.start_commit AS startCommit, a.start_commit_date AS startCommitDate, a.end_commit AS endCommit,
        a.end_commit_date AS endCommitDate, a.repo_id AS repoId, a.target_files AS targetFiles, a.create_time AS creatTime, a.priority,
        a.display_id AS displayId, a.status, a.issue_category AS issueCategory, a.producer, a.solver FROM issue AS a INNER JOIN commit_view
        AS b ON a.repo_id = b.repo_id AND a.end_commit = b.commit_id
        <trim prefix="where" prefixOverrides="and">
            <if test="developer != null">
                AND a.producer = #{developer}
            </if>
            <if test="solver !=null">
                AND a.solver = #{solver}
            </if>
            <if test="priority != null">
                AND a.priority = #{priority}
            </if>
            <if test="filesPath != null and filesPath.size > 0">
                AND a.target_files IN
                <foreach collection="filesPath" separator="," open="(" close=")" item="filePath">
                    #{filePath}
                </foreach>
            </if>
            <if test="types != null and types.size > 0">
                AND a.type IN
                <foreach collection="types" separator="," open="(" close=")" item="type">
                    #{type}
                </foreach>
            </if>
            <if test="status != null and status.size > 0">
                AND a.status IN
                <foreach collection="status" separator="," open="(" close=")" item="state">
                    #{state}
                </foreach>
            </if>
            <if test="since != null and since != '' ">
                AND <![CDATA[ b.commit_time >= #{since} ]]>
            </if>
            <if test="until != null and until != '' ">
                AND <![CDATA[ b.commit_time <= #{until} ]]>
            </if>
            <if test="toolName != null">
                AND a.tool = #{toolName}
            </if>
            <if test="repoList != null and repoList.size > 0">
                AND a.repo_id IN
                <foreach collection="repoList" separator="," open="(" close=")" item="repo_id">
                    #{repo_id}
                </foreach>
            </if>
            <if test="category != null">
                AND a.issue_category = #{category}
            </if>
            <if test="issueUuids != null and issueUuids.size > 0">
                AND a.uuid IN
                <foreach collection="issueUuids" separator="," open="(" close=")" item="issueUuid">
                    #{issueUuid}
                </foreach>
            </if>
        </trim>
        order by a.status, a.start_commit_date, a.priority, a.display_id
        <if test="start != null  and ps != null ">
            limit #{start},#{ps}
        </if>
    </select>

    <select id="getIssueFilterList" parameterType="Map" resultType="java.util.HashMap">
        SELECT a.uuid, a.type, a.tool, a.start_commit AS startCommit, a.start_commit_date AS startCommitDate, a.end_commit AS endCommit,
        a.end_commit_date AS endCommitDate, a.repo_id AS repoId, a.target_files AS targetFiles, a.create_time AS createTime, a.priority,
        a.display_id AS displayId, a.status, a.issue_category AS issueCategory, a.producer, a.solver FROM issue AS a INNER JOIN commit_view
        AS b ON a.repo_id = b.repo_id AND a.start_commit = b.commit_id
        <trim prefix="where" prefixOverrides="and">
            <if test="manual_status != null">
                AND a.manual_status = #{manual_status}
            </if>
            <if test="developer != null">
                AND a.producer = #{developer}
            </if>
            <if test="solver !=null">
                AND a.solver = #{solver}
            </if>
            <if test="priority != null">
                AND a.priority = #{priority}
            </if>
            <if test="filesPath != null and filesPath.size > 0">
                AND a.target_files IN
                <foreach collection="filesPath" separator="," open="(" close=")" item="filePath">
                    #{filePath}
                </foreach>
            </if>
            <if test="types != null and types.size > 0">
                AND a.type IN
                <foreach collection="types" separator="," open="(" close=")" item="type">
                    #{type}
                </foreach>
            </if>
            <if test="status != null and status.size > 0">
                AND a.status IN
                <foreach collection="status" separator="," open="(" close=")" item="state">
                    #{state}
                </foreach>
            </if>
            <if test="since != null and since != '' ">
                AND <![CDATA[ b.commit_time >= #{since} ]]>
            </if>
            <if test="until != null and until != '' ">
                AND <![CDATA[ b.commit_time <= #{until} ]]>
            </if>
            <if test="toolName != null">
                AND a.tool = #{toolName}
            </if>
            <if test="repoList != null and repoList.size > 0">
                AND a.repo_id IN
                <foreach collection="repoList" separator="," open="(" close=")" item="repo_id">
                    #{repo_id}
                </foreach>
            </if>
            <if test="category != null">
                AND a.issue_category = #{category}
            </if>
            <if test="issueUuids != null and issueUuids.size > 0">
                AND a.uuid IN
                <foreach collection="issueUuids" separator="," open="(" close=")" item="issueUuid">
                    #{issueUuid}
                </foreach>
            </if>
        </trim>
        order by a.status, a.start_commit_date, a.priority, a.display_id
        <if test="start != null  and ps != null ">
            limit #{start},#{ps}
        </if>
    </select>

    <update id="updateIssueManualStatus" parameterType="String" >
        UPDATE issue
        <trim prefix="set" suffixOverrides=",">
            <if test="manualStatus != null and manualStatus != '' ">
                manual_status = #{manualStatus},
            </if>
            <if test="currentTime != null and currentTime != '' ">
                update_time = #{currentTime},
            </if>
        </trim>
        WHERE
        1 = 1
        <if test="repoUuid != null and repoUuid != '' ">
            AND repo_id = #{repoUuid}
        </if>
        <if test="issueUuid != null and issueUuid != '' ">
            AND uuid = #{issueUuid}
        </if>
        <if test="issueType != null and issueType != '' ">
            AND type = #{issueType}
        </if>
        <if test="tool != null and tool != '' ">
            AND tool = #{tool}
        </if>
    </update>

    <select id="getSelfIntroduceSelfSolvedIssueInfo" parameterType="Map" resultType="Integer">
        SELECT DATEDIFF(end_commit_date,start_commit_date) FROM issue
        <where>
            producer = #{producer} AND tool = #{tool} AND solver = #{producer}
            AND status = 'Solved' AND manual_status = 'Default'
            <if test="repoList != null and repoList.size > 0">
                AND repo_id IN
                <foreach collection="repoList" separator="," open="(" close=")" item="repo_id">
                    #{repo_id}
                </foreach>
            </if>
            <if test="since != null and since != '' ">
                AND <![CDATA[ start_commit_date >= #{since} ]]>
            </if>
            <if test="until != null and until != '' ">
                AND <![CDATA[ start_commit_date <= #{until} ]]>
            </if>
        </where>
    </select>

    <select id="getOtherIntroduceSelfSolvedIssueInfo" parameterType="Map" resultType="Integer">
        SELECT DATEDIFF(end_commit_date,start_commit_date) FROM issue
        <where>
            producer &lt;&gt; #{producer} AND tool = #{tool} AND solver = #{producer}
            AND status = 'Solved' AND manual_status = 'Default'
            <if test="repoList != null and repoList.size > 0">
                AND repo_id IN
                <foreach collection="repoList" separator="," open="(" close=")" item="repo_id">
                    #{repo_id}
                </foreach>
            </if>
            <if test="since != null and since != '' ">
                AND <![CDATA[ start_commit_date >= #{since} ]]>
            </if>
            <if test="until != null and until != '' ">
                AND <![CDATA[ start_commit_date <= #{until} ]]>
            </if>
        </where>
    </select>

    <select id="getSelfIntroduceLivingIssueInfo" parameterType="Map" resultType="Integer">
        SELECT DATEDIFF(end_commit_date,start_commit_date) FROM issue
        <where>
            producer = #{producer} AND tool = #{tool} AND solver IS NULL
            AND status = 'Open' AND manual_status = 'Default'
            <if test="repoList != null and repoList.size > 0">
                AND repo_id IN
                <foreach collection="repoList" separator="," open="(" close=")" item="repo_id">
                    #{repo_id}
                </foreach>
            </if>
            <if test="since != null and since != '' ">
                AND <![CDATA[ start_commit_date >= #{since} ]]>
            </if>
            <if test="until != null and until != '' ">
                AND <![CDATA[ start_commit_date <= #{until} ]]>
            </if>
        </where>
    </select>

    <select id="getSelfIntroduceOtherSolvedIssueInfo" parameterType="Map" resultType="Integer">
        SELECT DATEDIFF(end_commit_date,start_commit_date) FROM issue
        <where>
            producer = #{producer} AND tool = #{tool} AND solver &lt;&gt; #{producer}
            AND status = 'Solved' AND manual_status = 'Default'
            <if test="repoList != null and repoList.size > 0">
                AND repo_id IN
                <foreach collection="repoList" separator="," open="(" close=")" item="repo_id">
                    #{repo_id}
                </foreach>
            </if>
            <if test="since != null and since != '' ">
                AND <![CDATA[ start_commit_date >= #{since} ]]>
            </if>
            <if test="until != null and until != '' ">
                AND <![CDATA[ start_commit_date <= #{until} ]]>
            </if>
        </where>
    </select>

    <select id="getSelfIntroduceSelfSolvedIssueDetail" parameterType="Map" resultType="com.alibaba.fastjson.JSONObject">
        SELECT display_id AS displayId, uuid, repo_id AS repoUuid, type, status, start_commit_date AS startCommitDate, producer,
        DATEDIFF(end_commit_date,start_commit_date) AS lifeCycle, target_files AS targetFiles, priority, issue_category AS issueCategory
        FROM issue
        <where>
            producer = #{producer} AND tool = #{tool} AND solver = #{producer}
            AND status = 'Solved' AND manual_status = 'Default'
            <if test="repoList != null and repoList.size > 0">
                AND repo_id IN
                <foreach collection="repoList" separator="," open="(" close=")" item="repo_id">
                    #{repo_id}
                </foreach>
            </if>
            <if test="since != null and since != '' ">
                AND <![CDATA[ start_commit_date >= #{since} ]]>
            </if>
            <if test="until != null and until != '' ">
                AND <![CDATA[ start_commit_date <= #{until} ]]>
            </if>
        </where>
        <if test="start != null  and ps != null ">
            limit #{start},#{ps}
        </if>
    </select>

    <select id="getOtherIntroduceSelfSolvedIssueDetail" parameterType="Map" resultType="com.alibaba.fastjson.JSONObject">
        SELECT display_id AS displayId, uuid, repo_id AS repoUuid, type, status, start_commit_date AS startCommitDate, producer,
        DATEDIFF(end_commit_date,start_commit_date) AS lifeCycle, target_files AS targetFiles, priority, issue_category AS issueCategory
        FROM issue
        <where>
            producer &lt;&gt; #{producer} AND tool = #{tool} AND solver = #{producer}
            AND status = 'Solved' AND manual_status = 'Default'
            <if test="repoList != null and repoList.size > 0">
                AND repo_id IN
                <foreach collection="repoList" separator="," open="(" close=")" item="repo_id">
                    #{repo_id}
                </foreach>
            </if>
            <if test="since != null and since != '' ">
                AND <![CDATA[ start_commit_date >= #{since} ]]>
            </if>
            <if test="until != null and until != '' ">
                AND <![CDATA[ start_commit_date <= #{until} ]]>
            </if>
        </where>
        <if test="start != null  and ps != null ">
            limit #{start},#{ps}
        </if>
    </select>

    <select id="getSelfIntroduceLivingIssueDetail" parameterType="Map" resultType="com.alibaba.fastjson.JSONObject">
        SELECT display_id AS displayId, uuid, repo_id AS repoUuid, type, status, start_commit_date AS startCommitDate, producer,
        DATEDIFF(end_commit_date,start_commit_date) AS lifeCycle, target_files AS targetFiles, priority, issue_category AS issueCategory
        FROM issue
        <where>
            producer = #{producer} AND tool = #{tool} AND solver IS NULL
            AND status = 'Open' AND manual_status = 'Default'
            <if test="repoList != null and repoList.size > 0">
                AND repo_id IN
                <foreach collection="repoList" separator="," open="(" close=")" item="repo_id">
                    #{repo_id}
                </foreach>
            </if>
            <if test="since != null and since != '' ">
                AND <![CDATA[ start_commit_date >= #{since} ]]>
            </if>
            <if test="until != null and until != '' ">
                AND <![CDATA[ start_commit_date <= #{until} ]]>
            </if>
        </where>
        <if test="start != null  and ps != null ">
            limit #{start},#{ps}
        </if>
    </select>

    <select id="getSelfIntroduceOtherSolvedIssueDetail" parameterType="Map" resultType="com.alibaba.fastjson.JSONObject">
        SELECT display_id AS displayId, uuid, repo_id AS repoUuid, type, status, start_commit_date AS startCommitDate, producer,
        DATEDIFF(end_commit_date,start_commit_date) AS lifeCycle, target_files AS targetFiles, priority, issue_category AS issueCategory
        FROM issue
        <where>
            producer = #{producer} AND tool = #{tool} AND solver &lt;&gt; #{producer}
            AND status = 'Solved' AND manual_status = 'Default'
            <if test="repoList != null and repoList.size > 0">
                AND repo_id IN
                <foreach collection="repoList" separator="," open="(" close=")" item="repo_id">
                    #{repo_id}
                </foreach>
            </if>
            <if test="since != null and since != '' ">
                AND <![CDATA[ start_commit_date >= #{since} ]]>
            </if>
            <if test="until != null and until != '' ">
                AND <![CDATA[ start_commit_date <= #{until} ]]>
            </if>
        </where>
        <if test="start != null  and ps != null ">
            limit #{start},#{ps}
        </if>
    </select>

    <select id="getIssueIntroducers" resultType="String">
        SELECT DISTINCT producer
        FROM issue
        <where>
            manual_status = 'Default'
            <if test="repoUuids != null and repoUuids.size > 0">
                AND repo_id IN
                <foreach collection="repoUuids" separator="," open="(" close=")" item="repoUuid">
                    #{repoUuid}
                </foreach>
            </if>
        </where>
        ORDER BY producer
    </select>

</mapper>