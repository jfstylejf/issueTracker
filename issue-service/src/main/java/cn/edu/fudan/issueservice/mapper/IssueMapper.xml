<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.fudan.issueservice.mapper.IssueMapper">

    <resultMap id="issue" type="cn.edu.fudan.issueservice.domain.dbo.Issue">
        <id property="uuid" column="uuid"/>
        <result property="type" column="type"/>
        <result property="tool" column="tool"/>
        <result property="startCommit" column="start_commit"/>
        <result property="startCommitDate" column="start_commit_date"/>
        <result property="endCommit" column="end_commit"/>
        <result property="endCommitDate" column="end_commit_date"/>
        <result property="repoId" column="repo_uuid"/>
        <result property="targetFiles" column="file_name"/>
        <result property="createTime" column="create_time"/>
        <result property="updateTime" column="update_time"/>
        <result property="priority" column="priority"/>
        <result property="displayId" column="id"/>
        <result property="producer" column="producer"/>
    </resultMap>

    <resultMap id="issueWithCommitView" type="cn.edu.fudan.issueservice.domain.dbo.Issue">
        <id property="uuid" column="uuid"/>
        <result property="type" column="type"/>
        <result property="tool" column="tool"/>
        <result property="startCommit" column="start_commit"/>
        <result property="startCommitDate" column="start_commit_date"/>
        <result property="endCommit" column="end_commit"/>
        <result property="endCommitDate" column="end_commit_date"/>
        <result property="repoId" column="repo_uuid"/>
        <result property="targetFiles" column="file_name"/>
        <result property="createTime" column="create_time"/>
        <result property="updateTime" column="update_time"/>
        <result property="priority" column="priority"/>
        <result property="displayId" column="id"/>
        <result property="status" column="status"/>
        <result property="resolution" column="resolution"/>
        <result property="producer" column="producer"/>
        <result property="issueCategory" column="issue_category"/>
        <result property="manualStatus" column="manual_status"/>
        <result property="solver" column="solver"/>
        <collection property="issueType" column="type"
                    select="cn.edu.fudan.issueservice.mapper.IssueTypeMapper.getIssueTypeByTypeName"/>
    </resultMap>

    <resultMap id="issue4" type="cn.edu.fudan.issueservice.domain.dbo.Issue">
        <id property="uuid" column="uuid"/>
        <result property="type" column="type"/>
        <result property="tool" column="tool"/>
        <result property="startCommit" column="start_commit"/>
        <result property="startCommitDate" column="start_commit_date"/>
        <result property="endCommit" column="end_commit"/>
        <result property="endCommitDate" column="end_commit_date"/>
        <result property="repoId" column="repo_uuid"/>
        <result property="targetFiles" column="file_name"/>
        <result property="createTime" column="create_time"/>
        <result property="updateTime" column="update_time"/>
        <result property="priority" column="priority"/>
        <result property="displayId" column="id"/>
        <result property="status" column="status"/>
        <result property="issueCategory" column="issue_category"/>
        <result property="manualStatus" column="manual_status"/>
        <result property="resolution" column="resolution"/>
        <result property="producer" column="producer"/>
        <collection property="issueType" column="type"
                    select="cn.edu.fudan.issueservice.mapper.IssueTypeMapper.getIssueTypeByTypeName"/>
    </resultMap>

    <insert id="insertIssueList" parameterType="List">
        insert into issue
        (
        uuid,
        type,
        tool,
        start_commit,
        start_commit_date,
        end_commit,
        end_commit_date,
        repo_uuid,
        file_name,
        create_time,
        update_time,
        priority,
        `status`,
        manual_status,
        resolution,
        producer,
        issue_category,
        solver,
        solve_commit,
        solve_commit_date
        )
        VALUES
        <foreach collection="list" item="item" index="index" separator=",">
            (
            #{item.uuid},
            #{item.type},
            #{item.tool},
            #{item.startCommit},
            #{item.startCommitDate},
            #{item.endCommit},
            #{item.endCommitDate},
            #{item.repoId},
            #{item.targetFiles},
            #{item.createTime},
            #{item.updateTime},
            #{item.priority},
            #{item.status},
            #{item.manualStatus},
            #{item.resolution},
            #{item.producer},
            #{item.issueCategory},
            #{item.solver},
            #{item.solveCommit},
            #{item.solveCommitDate}
            )
        </foreach>
    </insert>

    <select id="getIssueByID" parameterType="String" resultMap="issueWithCommitView">
        select *
        from issue
        where uuid = #{uuid}
    </select>

    <select id="getRepoWithIssues" parameterType="String" resultType="String">
        select
        distinct b.repo_uuid as repoId
        from issue as a inner join commit_view as b on a.repo_uuid = b.repo_uuid and a.start_commit = b.commit_id
        <where>
            manual_status = 'Default'
            <if test="developer != null">
                and b.developer_unique_name = #{developer}
            </if>
        </where>
    </select>


    <update id="batchUpdateIssue" parameterType="cn.edu.fudan.issueservice.domain.dbo.Issue">
        update issue
        set end_commit        = #{issueInfo.endCommit},
            end_commit_date   = #{issueInfo.endCommitDate},
            file_name         = #{issueInfo.targetFiles},
            update_time       = #{issueInfo.updateTime},
            priority          = #{issueInfo.priority},
            status            = #{issueInfo.status},
            manual_status     = #{issueInfo.manualStatus},
            resolution        = #{issueInfo.resolution},
            issue_category    = #{issueInfo.issueCategory},
            solver            = #{issueInfo.solver},
            solve_commit      = #{issueInfo.solveCommit},
            solve_commit_date = #{issueInfo.solveCommitDate}
        where uuid = #{issueInfo.uuid}
    </update>

    <delete id="deleteIssueByRepoIdAndTool" parameterType="String">
        delete
        from issue
        where repo_uuid = #{repo_uuid}
          and tool = #{tool}
    </delete>

    <select id="getExistIssueTypes" resultType="String">
        select distinct type as types
        from issue
        where tool = #{tool}
          AND manual_status = 'Default'
        order by types
    </select>

    <update id="updateOneIssuePriority">
        UPDATE issue
        SET priority = #{priority}
        WHERE uuid = #{uuid}
    </update>

    <update id="updateOneIssueStatus">
        UPDATE issue
        <trim prefix="set" suffixOverrides=",">
            <if test="status != null">
                status = #{status},
            </if>
            <if test="manual_status != null">
                manual_status = #{manual_status},
            </if>
        </trim>
        WHERE uuid = #{uuid}
    </update>

    <select id="getNotSolvedIssueAllListByToolAndRepoId" parameterType="String" resultMap="issue4">
        select uuid, type, tool, start_commit, start_commit_date, end_commit, end_commit_date, repo_uuid, file_name,
        create_time, update_time, priority, id, status, manual_status, resolution, issue_category, producer,
        solver
        from issue where tool = #{tool} and priority != 6
        <if test="repoUuids != null and repoUuids.size > 0">
            AND repo_uuid IN
            <foreach collection="repoUuids" separator="," open="(" close=")" item="repoUuid">
                #{repoUuid}
            </foreach>
        </if>
    </select>

    <select id="getIssuesByIds" resultMap="issue4">
        select * from issue
        <where>
            <if test="issueId_list != null  and issueId_list.size > 0">
                uuid in
                <foreach collection="issueId_list" item="issueId" separator="," open="(" close=")">
                    #{issueId}
                </foreach>
            </if>
        </where>
    </select>

    <select id="getSolvedIssueFilterListCount" parameterType="Map" resultType="Integer">
        SELECT COUNT(*) FROM issue
        <trim prefix="where" prefixOverrides="and">
            <if test="manual_status != null">
                AND manual_status = #{manual_status}
            </if>
            <if test="developer != null">
                AND producer = #{developer}
            </if>
            <if test="priority != null">
                AND priority = #{priority}
            </if>
            <if test="solver !=null">
                AND solver = #{solver}
            </if>
            <if test="filesPath != null and filesPath.size > 0">
                AND file_name IN
                <foreach collection="filesPath" separator="," open="(" close=")" item="filePath">
                    #{filePath}
                </foreach>
            </if>
            <if test="types != null and types.size > 0">
                AND type IN
                <foreach collection="types" separator="," open="(" close=")" item="type">
                    #{type}
                </foreach>
            </if>
            <if test="status != null and status.size > 0">
                AND status IN
                <foreach collection="status" separator="," open="(" close=")" item="state">
                    #{state}
                </foreach>
            </if>
            <if test="since != null and since != '' ">
                AND <![CDATA[ solve_commit_date >= #{since} ]]>
            </if>
            <if test="until != null and until != '' ">
                AND <![CDATA[ solve_commit_date <= #{until} ]]>
            </if>
            <if test="toolName != null">
                AND tool = #{toolName}
            </if>
            <if test="repoList != null and repoList.size > 0">
                AND repo_uuid IN
                <foreach collection="repoList" separator="," open="(" close=")" item="repo_uuid">
                    #{repo_uuid}
                </foreach>
            </if>
            <if test="category != null">
                AND issue_category = #{category}
            </if>
            <if test="issueUuids != null and issueUuids.size > 0">
                AND uuid IN
                <foreach collection="issueUuids" separator="," open="(" close=")" item="issueUuid">
                    #{issueUuid}
                </foreach>
            </if>
        </trim>
    </select>

    <select id="getIssueFilterListCount" parameterType="Map" resultType="Integer">
        SELECT COUNT(*) FROM issue
        <trim prefix="where" prefixOverrides="and">
            <if test="manual_status != null">
                AND manual_status = #{manual_status}
            </if>
            <if test="developer != null and developer.size > 0">
                AND producer IN
                <foreach collection="developer" separator="," open="(" close=")" item="item">
                    #{item}
                </foreach>
            </if>
            <if test="priority != null">
                AND priority = #{priority}
            </if>
            <if test="solver !=null">
                AND solver = #{solver}
            </if>
            <if test="filesPath != null and filesPath.size > 0">
                AND file_name IN
                <foreach collection="filesPath" separator="," open="(" close=")" item="filePath">
                    #{filePath}
                </foreach>
            </if>
            <if test="types != null and types.size > 0">
                AND type IN
                <foreach collection="types" separator="," open="(" close=")" item="type">
                    #{type}
                </foreach>
            </if>
            <if test="status != null and status.size > 0">
                AND status IN
                <foreach collection="status" separator="," open="(" close=")" item="state">
                    #{state}
                </foreach>
            </if>
            <if test="since != null and since != '' ">
                AND <![CDATA[ start_commit_date >= #{since} ]]>
            </if>
            <if test="until != null and until != '' ">
                AND <![CDATA[ start_commit_date <= #{until} ]]>
            </if>
            <if test="toolName != null">
                AND tool = #{toolName}
            </if>
            <if test="repoList != null and repoList.size > 0">
                AND repo_uuid IN
                <foreach collection="repoList" separator="," open="(" close=")" item="repo_uuid">
                    #{repo_uuid}
                </foreach>
            </if>
            <if test="category != null">
                AND issue_category = #{category}
            </if>
            <if test="issueUuids != null and issueUuids.size > 0">
                AND uuid IN
                <foreach collection="issueUuids" separator="," open="(" close=")" item="issueUuid">
                    #{issueUuid}
                </foreach>
            </if>
        </trim>
    </select>

    <update id="updateIssueManualStatus" parameterType="String">
        UPDATE issue
        <trim prefix="set" suffixOverrides=",">
            <if test="manualStatus != null and manualStatus != '' ">
                manual_status = #{manualStatus},
            </if>
            <if test="currentTime != null and currentTime != '' ">
                update_time = #{currentTime},
            </if>
        </trim>
        <trim prefix="where" prefixOverrides="and">
            <if test="repoUuid != null and repoUuid != '' ">
                AND repo_uuid = #{repoUuid}
            </if>
            <if test="issueUuid != null and issueUuid != '' ">
                AND uuid = #{issueUuid}
            </if>
            <if test="issueType != null and issueType != '' ">
                AND type = #{issueType}
            </if>
            <if test="tool != null and tool != '' ">
                AND tool = #{tool}
            </if>
        </trim>
    </update>

    <select id="getSelfIntroduceSelfSolvedIssueInfo" parameterType="Map" resultType="Integer">
        SELECT DATEDIFF(end_commit_date,start_commit_date) FROM issue
        <where>
            producer = #{producer} AND tool = #{tool} AND solver = #{producer}
            AND status = 'Solved' AND manual_status = 'Default'
            <if test="repoList != null and repoList.size > 0">
                AND repo_uuid IN
                <foreach collection="repoList" separator="," open="(" close=")" item="repo_uuid">
                    #{repo_uuid}
                </foreach>
            </if>
            <if test="since != null and since != '' ">
                AND <![CDATA[ start_commit_date >= #{since} ]]>
            </if>
            <if test="until != null and until != '' ">
                AND <![CDATA[ start_commit_date <= #{until} ]]>
            </if>
        </where>
    </select>

    <select id="getOtherIntroduceSelfSolvedIssueInfo" parameterType="Map" resultType="Integer">
        SELECT DATEDIFF(end_commit_date,start_commit_date) FROM issue
        <where>
            producer &lt;&gt; #{producer} AND tool = #{tool} AND solver = #{producer}
            AND status = 'Solved' AND manual_status = 'Default'
            <if test="repoList != null and repoList.size > 0">
                AND repo_uuid IN
                <foreach collection="repoList" separator="," open="(" close=")" item="repo_uuid">
                    #{repo_uuid}
                </foreach>
            </if>
            <if test="since != null and since != '' ">
                AND <![CDATA[ start_commit_date >= #{since} ]]>
            </if>
            <if test="until != null and until != '' ">
                AND <![CDATA[ start_commit_date <= #{until} ]]>
            </if>
        </where>
    </select>

    <select id="getSelfIntroduceLivingIssueInfo" parameterType="Map" resultType="Integer">
        SELECT DATEDIFF(end_commit_date,start_commit_date) FROM issue
        <where>
            producer = #{producer} AND tool = #{tool} AND solver IS NULL
            AND status = 'Open' AND manual_status = 'Default'
            <if test="repoList != null and repoList.size > 0">
                AND repo_uuid IN
                <foreach collection="repoList" separator="," open="(" close=")" item="repo_uuid">
                    #{repo_uuid}
                </foreach>
            </if>
            <if test="since != null and since != '' ">
                AND <![CDATA[ start_commit_date >= #{since} ]]>
            </if>
            <if test="until != null and until != '' ">
                AND <![CDATA[ start_commit_date <= #{until} ]]>
            </if>
        </where>
    </select>

    <select id="getSelfIntroduceOtherSolvedIssueInfo" parameterType="Map" resultType="Integer">
        SELECT DATEDIFF(end_commit_date,start_commit_date) FROM issue
        <where>
            producer = #{producer} AND tool = #{tool} AND solver &lt;&gt; #{producer}
            AND status = 'Solved' AND manual_status = 'Default'
            <if test="repoList != null and repoList.size > 0">
                AND repo_uuid IN
                <foreach collection="repoList" separator="," open="(" close=")" item="repo_uuid">
                    #{repo_uuid}
                </foreach>
            </if>
            <if test="since != null and since != '' ">
                AND <![CDATA[ start_commit_date >= #{since} ]]>
            </if>
            <if test="until != null and until != '' ">
                AND <![CDATA[ start_commit_date <= #{until} ]]>
            </if>
        </where>
    </select>

    <select id="getSelfIntroduceSelfSolvedIssueDetail" parameterType="Map" resultType="com.alibaba.fastjson.JSONObject">
        SELECT id AS displayId, uuid, repo_uuid AS repoUuid, type, status, start_commit_date AS startCommitDate,
        producer,
        DATEDIFF(end_commit_date,start_commit_date) AS lifeCycle, file_name AS targetFiles, priority, issue_category
        AS issueCategory
        FROM issue
        <where>
            producer = #{producer} AND tool = #{tool} AND solver = #{producer}
            AND status = 'Solved' AND manual_status = 'Default'
            <if test="repoList != null and repoList.size > 0">
                AND repo_uuid IN
                <foreach collection="repoList" separator="," open="(" close=")" item="repo_uuid">
                    #{repo_uuid}
                </foreach>
            </if>
            <if test="since != null and since != '' ">
                AND <![CDATA[ start_commit_date >= #{since} ]]>
            </if>
            <if test="until != null and until != '' ">
                AND <![CDATA[ start_commit_date <= #{until} ]]>
            </if>
        </where>
        <if test="start != null  and ps != null ">
            limit #{start},#{ps}
        </if>
    </select>

    <select id="getOtherIntroduceSelfSolvedIssueDetail" parameterType="Map"
            resultType="com.alibaba.fastjson.JSONObject">
        SELECT id AS displayId, uuid, repo_uuid AS repoUuid, type, status, start_commit_date AS startCommitDate,
        producer,
        DATEDIFF(end_commit_date,start_commit_date) AS lifeCycle, file_name AS targetFiles, priority, issue_category
        AS issueCategory
        FROM issue
        <where>
            producer &lt;&gt; #{producer} AND tool = #{tool} AND solver = #{producer}
            AND status = 'Solved' AND manual_status = 'Default'
            <if test="repoList != null and repoList.size > 0">
                AND repo_uuid IN
                <foreach collection="repoList" separator="," open="(" close=")" item="repo_uuid">
                    #{repo_uuid}
                </foreach>
            </if>
            <if test="since != null and since != '' ">
                AND <![CDATA[ start_commit_date >= #{since} ]]>
            </if>
            <if test="until != null and until != '' ">
                AND <![CDATA[ start_commit_date <= #{until} ]]>
            </if>
        </where>
        <if test="start != null  and ps != null ">
            limit #{start},#{ps}
        </if>
    </select>

    <select id="getSelfIntroduceLivingIssueDetail" parameterType="Map" resultType="com.alibaba.fastjson.JSONObject">
        SELECT id AS displayId, uuid, repo_uuid AS repoUuid, type, status, start_commit_date AS startCommitDate,
        producer,
        DATEDIFF(end_commit_date,start_commit_date) AS lifeCycle, file_name AS targetFiles, priority, issue_category
        AS issueCategory
        FROM issue
        <where>
            producer = #{producer} AND tool = #{tool} AND solver IS NULL
            AND status = 'Open' AND manual_status = 'Default'
            <if test="repoList != null and repoList.size > 0">
                AND repo_uuid IN
                <foreach collection="repoList" separator="," open="(" close=")" item="repo_uuid">
                    #{repo_uuid}
                </foreach>
            </if>
            <if test="since != null and since != '' ">
                AND <![CDATA[ start_commit_date >= #{since} ]]>
            </if>
            <if test="until != null and until != '' ">
                AND <![CDATA[ start_commit_date <= #{until} ]]>
            </if>
        </where>
        <if test="start != null  and ps != null ">
            limit #{start},#{ps}
        </if>
    </select>

    <select id="getSelfIntroduceOtherSolvedIssueDetail" parameterType="Map"
            resultType="com.alibaba.fastjson.JSONObject">
        SELECT id AS displayId, uuid, repo_uuid AS repoUuid, type, status, start_commit_date AS startCommitDate,
        producer,
        DATEDIFF(end_commit_date,start_commit_date) AS lifeCycle, file_name AS targetFiles, priority, issue_category
        AS issueCategory
        FROM issue
        <where>
            producer = #{producer} AND tool = #{tool} AND solver &lt;&gt; #{producer}
            AND status = 'Solved' AND manual_status = 'Default'
            <if test="repoList != null and repoList.size > 0">
                AND repo_uuid IN
                <foreach collection="repoList" separator="," open="(" close=")" item="repo_uuid">
                    #{repo_uuid}
                </foreach>
            </if>
            <if test="since != null and since != '' ">
                AND <![CDATA[ start_commit_date >= #{since} ]]>
            </if>
            <if test="until != null and until != '' ">
                AND <![CDATA[ start_commit_date <= #{until} ]]>
            </if>
        </where>
        <if test="start != null  and ps != null ">
            limit #{start},#{ps}
        </if>
    </select>

    <select id="getIssueIntroducers" resultType="String">
        SELECT DISTINCT producer
        FROM issue
        <where>
            manual_status = 'Default'
            <if test="repoUuids != null and repoUuids.size > 0">
                AND repo_uuid IN
                <foreach collection="repoUuids" separator="," open="(" close=")" item="repo_uuid">
                    #{repo_uuid}
                </foreach>
            </if>
        </where>
        ORDER BY producer
    </select>

    <select id="getRemainingIssueCount" resultType="Integer">
        SELECT COUNT(*)
        FROM issue
        WHERE repo_uuid = #{repoUuid}
          AND manual_status = 'Default'
          AND status = 'Open'
    </select>

    <select id="getSelfIntroduceLivingIssueCount" parameterType="Map" resultType="com.alibaba.fastjson.JSONObject">
        SELECT producer as developerName, count(*) as livingIssueCount
        FROM issue
        <where>
            solver IS NULL
            AND status = 'Open'
            AND manual_status = 'Default'
            <if test="repoList != null and repoList.size > 0">
                AND repo_uuid IN
                <foreach collection="repoList" separator="," open="(" close=")" item="repo_uuid">
                    #{repo_uuid}
                </foreach>
            </if>
            <if test="producerList != null and producerList.size > 0">
                AND producer IN
                <foreach collection="producerList" separator="," open="(" close=")" item="producer">
                    #{producer}
                </foreach>
            </if>
            <if test="since != null and since != '' ">
                AND <![CDATA[ start_commit_date >= #{since} ]]>
            </if>
            <if test="until != null and until != '' ">
                AND <![CDATA[ start_commit_date <= #{until} ]]>
            </if>
            <if test="tool != null and tool != '' ">
                AND tool = #{tool}
            </if>
        </where>
        group by producer
    </select>

    <select id="getIssueCountByIntroducerAndTool" resultType="cn.edu.fudan.issueservice.domain.dbo.Issue">
        SELECT uuid, type, status
        FROM issue
        WHERE producer = #{developer}
          AND manual_status = 'Default'
    </select>

    <select id="getIssuesOverview" resultType="java.util.Map">
        SELECT uuid, id AS displayId, type, repo_uuid AS repoUuid, file_name AS fileName, producer,
        start_commit_date AS startCommitDate, status, priority, issue_category AS issueCategory,
        solver, solve_commit_date AS solveTime, solve_commit AS solveCommit
        FROM issue
        <trim prefix="where" prefixOverrides="and">
            <if test="repoList != null and repoList.size > 0">
                AND repo_uuid IN
                <foreach collection="repoList" separator="," open="(" close=")" item="repo_uuid">
                    #{repo_uuid}
                </foreach>
            </if>
            <if test="tools != null and tools.size > 0">
                AND tool IN
                <foreach collection="tools" separator="," open="(" close=")" item="tool">
                    #{tool}
                </foreach>
            </if>
            <if test="since != null and since != '' ">
                AND <![CDATA[ start_commit_date >= #{since} ]]>
            </if>
            <if test="until != null and until != '' ">
                AND <![CDATA[ start_commit_date <= #{until} ]]>
            </if>
            <if test="manualStatus != null">
                AND manual_status = #{manualStatus}
            </if>
            <if test="producer != null and producer.size > 0">
                AND producer IN
                <foreach collection="producer" separator="," open="(" close=")" item="item">
                    #{item}
                </foreach>
            </if>
            <if test="priority != null">
                AND priority = #{priority}
            </if>
            <if test="status != null">
                AND status = #{status}
            </if>
            <if test="type != null">
                AND type = #{type}
            </if>
            <if test="uuid != null and uuid.size > 0">
                AND uuid IN
                <foreach collection="uuid" separator="," open="(" close=")" item="item">
                    #{item}
                </foreach>
            </if>
        </trim>
        ORDER BY status, start_commit_date DESC, priority, id
        <if test="start != null  and ps != null ">
            LIMIT #{start}, #{ps}
        </if>
    </select>

    <select id="getIssueCountByCategoryAndType" resultType="java.util.Map">
        SELECT COUNT(*) AS count, type, issue_category as category FROM issue
        <trim prefix="where" prefixOverrides="and">
            <if test="repoList != null and repoList.size > 0">
                AND repo_uuid IN
                <foreach collection="repoList" separator="," open="(" close=")" item="repo_uuid">
                    #{repo_uuid}
                </foreach>
            </if>
            <if test="tools != null and tools.size > 0">
                AND tool IN
                <foreach collection="tools" separator="," open="(" close=")" item="tool">
                    #{tool}
                </foreach>
            </if>
            <if test="since != null and since != '' ">
                AND <![CDATA[ start_commit_date >= #{since} ]]>
            </if>
            <if test="until != null and until != '' ">
                AND <![CDATA[ start_commit_date <= #{until} ]]>
            </if>
            <if test="manualStatus != null">
                AND manual_status = #{manualStatus}
            </if>
            <if test="producer != null and producer.size > 0">
                AND producer IN
                <foreach collection="producer" separator="," open="(" close=")" item="item">
                    #{item}
                </foreach>
            </if>
            <if test="priority != null">
                AND priority = #{priority}
            </if>
            <if test="status != null">
                AND status = #{status}
            </if>
            <if test="uuid != null and uuid.size > 0">
                AND uuid IN
                <foreach collection="uuid" separator="," open="(" close=")" item="item">
                    #{item}
                </foreach>
            </if>
        </trim>
        GROUP BY type
    </select>

    <select id="getLivingIssueTendency" parameterType="String" resultType="java.util.HashMap">
        SELECT count(*) as num, projectId, projectName
        FROM issue i,
             (SELECT a.project_name as projectName, a.id as projectId, b.repo_name as repoName, b.repo_uuid as repoUuid
              FROM project a,
                   sub_repository b
              WHERE a.project_name = b.project_name
                AND a.id = #{projectId}) as c
        WHERE i.repo_uuid = c.repoUuid
          AND (
                (<![CDATA[start_commit_date <= #{until} ]]> AND <![CDATA[ end_commit_date >= #{until} ]]>)
                OR
                (<![CDATA[end_commit_date <= #{until} ]]> AND status = "Open")
            )
          AND manual_status = 'Default'
    </select>

    <select id="getLivingIssueTendencyDetail" parameterType="String" resultType="java.util.HashMap">
        SELECT i.id              as displayId,
               i.uuid            as issueUuid,
               type              as type,
               issue_category    as issueCategory,
               repoName,
               branch,
               file_name         as targetFiles,
               producer,
               start_commit_date as startCommitDate,
               priority
        FROM issue i,
             (SELECT a.project_name as projectName,
                     a.id           as projectId,
                     b.repo_name    as repoName,
                     b.repo_uuid    as repoUuid,
                     branch
              FROM project a,
                   sub_repository b
              WHERE a.project_name = b.project_name
                AND a.id = #{projectId}) as c
        WHERE i.repo_uuid = c.repoUuid
          AND (
                (<![CDATA[start_commit_date <= #{until} ]]> AND <![CDATA[ end_commit_date >= #{until} ]]>)
                OR
                (<![CDATA[end_commit_date <= #{until} ]]> AND status = "Open")
            )
          AND manual_status = 'Default'
    </select>

    <select id="getIssueFilterList" parameterType="Map" resultType="java.util.HashMap">
        SELECT uuid, type, tool, start_commit AS startCommit, start_commit_date AS startCommitDate,
        end_commit AS endCommit,end_commit_date AS endCommitDate, repo_uuid AS repoId, file_name AS targetFiles,
        create_time AS createTime, priority, id AS displayId, status, issue_category AS issueCategory, producer, solver,
        solve_commit AS commit_id, solve_commit_date AS commit_time
        FROM issue
        <trim prefix="where" prefixOverrides="and">
            <if test="manual_status != null">
                AND manual_status = #{manual_status}
            </if>
            <if test="developer != null and developer.size > 0">
                AND producer IN
                <foreach collection="developer" separator="," open="(" close=")" item="item">
                    #{item}
                </foreach>
            </if>
            <if test="solver !=null">
                AND solver = #{solver}
            </if>
            <if test="priority != null">
                AND priority = #{priority}
            </if>
            <if test="filesPath != null and filesPath.size > 0">
                AND file_name IN
                <foreach collection="filesPath" separator="," open="(" close=")" item="filePath">
                    #{filePath}
                </foreach>
            </if>
            <if test="types != null and types.size > 0">
                AND type IN
                <foreach collection="types" separator="," open="(" close=")" item="type">
                    #{type}
                </foreach>
            </if>
            <if test="status != null and status.size > 0">
                AND status IN
                <foreach collection="status" separator="," open="(" close=")" item="state">
                    #{state}
                </foreach>
            </if>
            <if test="since != null and since != '' ">
                AND <![CDATA[ start_commit_date >= #{since} ]]>
            </if>
            <if test="until != null and until != '' ">
                AND <![CDATA[ start_commit_date <= #{until} ]]>
            </if>
            <if test="toolName != null">
                AND tool = #{toolName}
            </if>
            <if test="repoList != null and repoList.size > 0">
                AND repo_uuid IN
                <foreach collection="repoList" separator="," open="(" close=")" item="repo_id">
                    #{repo_id}
                </foreach>
            </if>
            <if test="category != null">
                AND issue_category = #{category}
            </if>
            <if test="issueUuids != null and issueUuids.size > 0">
                AND uuid IN
                <foreach collection="issueUuids" separator="," open="(" close=")" item="issueUuid">
                    #{issueUuid}
                </foreach>
            </if>
        </trim>
        ORDER BY status, start_commit_date DESC, priority, id
        <if test="start != null  and ps != null ">
            LIMIT #{start},#{ps}
        </if>
    </select>

    <select id="getSolvedIssueFilterList" parameterType="Map" resultType="java.util.HashMap">
        SELECT uuid, type, tool, start_commit AS startCommit, start_commit_date AS startCommitDate,
        end_commit AS endCommit, end_commit_date AS endCommitDate, repo_uuid AS repoId, file_name AS targetFiles,
        create_time AS creatTime, priority, id AS displayId, status, issue_category AS issueCategory, producer, solver,
        solve_commit AS commit_id, solve_commit_date AS commit_time
        FROM issue
        <trim prefix="where" prefixOverrides="and">
            <if test="developer != null">
                AND producer = #{developer}
            </if>
            <if test="solver !=null">
                AND solver = #{solver}
            </if>
            <if test="priority != null">
                AND priority = #{priority}
            </if>
            <if test="filesPath != null and filesPath.size > 0">
                AND file_name IN
                <foreach collection="filesPath" separator="," open="(" close=")" item="filePath">
                    #{filePath}
                </foreach>
            </if>
            <if test="types != null and types.size > 0">
                AND type IN
                <foreach collection="types" separator="," open="(" close=")" item="type">
                    #{type}
                </foreach>
            </if>
            <if test="status != null and status.size > 0">
                AND status IN
                <foreach collection="status" separator="," open="(" close=")" item="state">
                    #{state}
                </foreach>
            </if>
            <if test="since != null and since != '' ">
                AND <![CDATA[ solve_commit_date >= #{since} ]]>
            </if>
            <if test="until != null and until != '' ">
                AND <![CDATA[ solve_commit_date <= #{until} ]]>
            </if>
            <if test="toolName != null">
                AND tool = #{toolName}
            </if>
            <if test="repoList != null and repoList.size > 0">
                AND repo_uuid IN
                <foreach collection="repoList" separator="," open="(" close=")" item="repo_id">
                    #{repo_id}
                </foreach>
            </if>
            <if test="category != null">
                AND issue_category = #{category}
            </if>
            <if test="issueUuids != null and issueUuids.size > 0">
                AND uuid IN
                <foreach collection="issueUuids" separator="," open="(" close=")" item="issueUuid">
                    #{issueUuid}
                </foreach>
            </if>
        </trim>
        order by status, start_commit_date desc, priority, id
        <if test="start != null  and ps != null ">
            limit #{start},#{ps}
        </if>
    </select>

    <select id="getIssuesByFilesToolAndRepo" resultType="String">
        SELECT uuid FROM issue
        <trim prefix="where" prefixOverrides="and">
            <if test="preFiles != null and preFiles.size > 0">
                AND file_name IN
                <foreach collection="preFiles" separator="," open="(" close=")" item="preFile">
                    #{preFile}
                </foreach>
            </if>
            <if test="toolName != null">
                AND tool = #{toolName}
            </if>
            <if test="repoId != null">
                AND repo_uuid = #{repoId}
            </if>
        </trim>
    </select>

    <update id="updateIssuesForIgnore">
        UPDATE issue SET manual_status = 'Ignore'
        WHERE repo_uuid = #{repoUuid}
        <if test="ignoreFiles != null and ignoreFiles.size > 0">
            AND
            <foreach collection="ignoreFiles" separator="OR" open="(" close=")" item="ignoreFile">
                file_name LIKE #{ignoreFile}
            </foreach>
        </if>
    </update>

    <select id="getDeveloperListLivingIssue" resultType="java.util.Map">
        SELECT COUNT(*) AS issueCount, producer FROM issue
        WHERE status = 'Open'
        <if test="since != null and since != '' ">
            AND <![CDATA[ solve_commit_date >= #{since} ]]>
        </if>
        <if test="until != null and until != '' ">
            AND <![CDATA[ solve_commit_date <= #{until} ]]>
        </if>
        <if test="developers != null and developers.size > 0">
            AND producer IN
            <foreach collection="developers" separator="," open="(" close=")" item="developer">
                #{developer}
            </foreach>
        </if>
        <if test="repoUuids != null and repoUuids.size > 0">
            AND repo_uuid IN
            <foreach collection="repoUuids" separator="," open="(" close=")" item="repoUuid">
                #{repoUuid}
            </foreach>
        </if>
        GROUP BY producer
    </select>
</mapper>
