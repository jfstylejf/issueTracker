<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.fudan.issueservice.mapper.IssueMapper">

    <resultMap id="issue" type="Issue">
        <id property="uuid" column="uuid"/>
        <result property="type" column="type"/>
        <result property="category" column="category"/>
        <result property="start_commit" column="start_commit"/>
        <result property="start_commit_date" column="start_commit_date"/>
        <result property="end_commit" column="end_commit"/>
        <result property="end_commit_date" column="end_commit_date"/>
        <result property="raw_issue_start" column="raw_issue_start"/>
        <result property="raw_issue_end" column="raw_issue_end"/>
        <result property="repo_id" column="repo_id"/>
        <result property="target_files" column="target_files"/>
        <result property="create_time" column="create_time"/>
        <result property="update_time" column="update_time"/>
        <result property="priority" column="priority"/>
        <result property="displayId" column="display_id"/>
    </resultMap>

    <resultMap id="issue2" type="Issue">
        <id property="uuid" column="uuid"/>
        <result property="type" column="type"/>
        <result property="category" column="category"/>
        <result property="start_commit" column="start_commit"/>
        <result property="start_commit_date" column="start_commit_date"/>
        <result property="end_commit" column="end_commit"/>
        <result property="end_commit_date" column="end_commit_date"/>
        <result property="raw_issue_start" column="raw_issue_start"/>
        <result property="raw_issue_end" column="raw_issue_end"/>
        <result property="repo_id" column="repo_id"/>
        <result property="target_files" column="target_files"/>
        <result property="create_time" column="create_time"/>
        <result property="update_time" column="update_time"/>
        <result property="priority" column="priority"/>
        <result property="displayId" column="display_id"/>
        <result property="status" column="status"/>
        <result property="resolution" column="resolution"/>
        <collection property="issueType" column="type"
                    select="cn.edu.fudan.issueservice.mapper.IssueTypeMapper.getIssueTypeByTypeName"/>
    </resultMap>

    <resultMap id="issue3" type="Map">
        <id property="uuid" column="uuid"/>
        <result property="detail" column="detail"/>
    </resultMap>

    <resultMap id="issue4" type="Issue">
        <id property="uuid" column="uuid"/>
        <result property="type" column="type"/>
        <result property="category" column="category"/>
        <result property="start_commit" column="start_commit"/>
        <result property="start_commit_date" column="start_commit_date"/>
        <result property="end_commit" column="end_commit"/>
        <result property="end_commit_date" column="end_commit_date"/>
        <result property="raw_issue_start" column="raw_issue_start"/>
        <result property="raw_issue_end" column="raw_issue_end"/>
        <result property="repo_id" column="repo_id"/>
        <result property="target_files" column="target_files"/>
        <result property="create_time" column="create_time"/>
        <result property="update_time" column="update_time"/>
        <result property="priority" column="priority"/>
        <result property="displayId" column="display_id"/>
        <result property="status" column="status"/>
        <result property="resolution" column="resolution"/>
        <result property="sonar_issue_id" column="sonar_issue_id"/>
        <collection property="issueType" column="type"
                    select="cn.edu.fudan.issueservice.mapper.IssueTypeMapper.getIssueTypeByTypeName"/>
    </resultMap>


    <insert id="insertIssueList" parameterType="List">
        insert into issue
        (
        uuid,
        type,
        category,
        start_commit,
        start_commit_date,
        end_commit,
        end_commit_date,
        raw_issue_start,
        raw_issue_end,
        repo_id,
        target_files,
        create_time,
        update_time,
        priority,
        display_id,
        status,
        resolution,
        sonar_issue_id
        )
        VALUES
        <foreach collection="list" item="item" index="index" separator=",">
            (
            #{item.uuid},
            #{item.type},
            #{item.category},
            #{item.start_commit},
            #{item.start_commit_date},
            #{item.end_commit},
            #{item.end_commit_date},
            #{item.raw_issue_start},
            #{item.raw_issue_end},
            #{item.repo_id},
            #{item.target_files},
            #{item.create_time},
            #{item.update_time},
            #{item.priority},
            #{item.displayId},
            #{item.status},
            #{item.resolution},
            #{item.sonar_issue_id}
            )
        </foreach>
    </insert>

    <select id="getIssueList" parameterType="Map" resultMap="issue2">
        select * from issue as a join commit_view as b on a.repo_id = b.repo_id and a.start_commit = b.commit_id
        <trim prefix="where" prefixOverrides="and |or">
            <if test="repo_id != null">
                 and a.repo_id = #{repo_id}
            </if>
            <if test="types != null">
                and a.type in
                <foreach collection="types" separator="," open="(" close=")" item="type">
                    #{type}
                </foreach>
            </if>
            <if test="issue_ids != null">
                and a.uuid in
                <foreach collection="issue_ids" separator="," open="(" close=")" item="issue_id">
                    #{issue_id}
                </foreach>
            </if>
            <if test="issue_status != null">
                and a.status  in
                <foreach collection="issue_status" separator="," open="(" close=")" item="status">
                    #{status}
                </foreach>
            </if>
            <if test="category != null">
                and a.category = #{category}
            </if>
            <if test="developer != null">
                and b.developer = #{developer}
            </if>
        </trim>
        order by a.priority , a.end_commit_date desc , a.start_commit_date desc , a.display_id
        <if test="start != null  and size != null ">
            limit #{start},#{size}
        </if>
    </select>

    <select id="getIssueByID" parameterType="String" resultMap="issue2">
        select * from issue where uuid = #{uuid}
    </select>

    <select id="getIssueCount" parameterType="Map" resultType="Integer">
        select count(a.uuid) from issue as a join commit_view as b on a.repo_id = b.repo_id and a.start_commit = b.commit_id
        <where>
            <if test="repo_id != null">
                a.repo_id = #{repo_id}
            </if>
            <if test="types != null">
                and a.type in
                <foreach collection="types" separator="," open="(" close=")" item="type">
                    #{type}
                </foreach>
            </if>
            <if test="issue_ids != null">
                and a.uuid in
                <foreach collection="issue_ids" separator="," open="(" close=")" item="issue_id">
                    #{issue_id}
                </foreach>
            </if>
            <if test="solved_issue_ids != null">
                and a.uuid not in
                <foreach collection="solved_issue_ids" separator="," open="(" close=")" item="issue_id">
                    #{issue_id}
                </foreach>
            </if>
            <if test="issue_status != null">
                and a.status in
                <foreach collection="issue_status" separator="," open="(" close=")" item="status">
                    #{status}
                </foreach>
            </if>

            <if test="category != null">
                and a.category = #{category}
            </if>

            <if test="developer != null">
                and b.developer = #{developer}
            </if>
        </where>
    </select>

    <select id="getIssuesByEndCommit" parameterType="String" resultMap="issue">
        select * from issue
        where repo_id = #{repo_id} and end_commit = #{commit_id} and category = #{category}
    </select>


    <update id="batchUpdateIssue" parameterType="List">
        update issue
        <trim prefix="set" suffixOverrides=",">
            <trim prefix="start_commit = case" suffix="end,">
                <foreach collection="list" item="item">
                    <if test="item.start_commit != null">
                        when uuid=#{item.uuid} then #{item.start_commit}
                    </if>
                </foreach>
            </trim>
            <trim prefix="end_commit = case" suffix="end,">
                <foreach collection="list" item="item">
                    <if test="item.end_commit != null">
                        when uuid=#{item.uuid} then #{item.end_commit}
                    </if>
                </foreach>
            </trim>
            <trim prefix="end_commit_date = case" suffix="end,">
                <foreach collection="list" item="item">
                    <if test="item.end_commit_date != null">
                        when uuid=#{item.uuid} then #{item.end_commit_date}
                    </if>
                </foreach>
            </trim>
            <trim prefix="raw_issue_start = case" suffix="end,">
                <foreach collection="list" item="item">
                    <if test="item.raw_issue_start != null">
                        when uuid=#{item.uuid} then #{item.raw_issue_start}
                    </if>
                </foreach>
            </trim>
            <trim prefix="raw_issue_end = case" suffix="end,">
                <foreach collection="list" item="item">
                    <if test="item.raw_issue_end != null">
                        when uuid=#{item.uuid} then #{item.raw_issue_end}
                    </if>
                </foreach>
            </trim>
            <trim prefix="target_files = case" suffix="end,">
                <foreach collection="list" item="item">
                    <if test="item.target_files != null">
                        when uuid=#{item.uuid} then #{item.target_files}
                    </if>
                </foreach>
            </trim>
            <trim prefix="update_time = case" suffix="end,">
                <foreach collection="list" item="item">
                    <if test="item.update_time != null">
                        when uuid=#{item.uuid} then #{item.update_time}
                    </if>
                </foreach>
            </trim>
            <trim prefix="priority = case" suffix="end,">
                <foreach collection="list" item="item">
                    <if test="item.priority != null">
                        when uuid=#{item.uuid} then #{item.priority}
                    </if>
                </foreach>
            </trim>
            <trim prefix="status = case" suffix="end,">
                <foreach collection="list" item="item">
                    <if test="item.status != null">
                        when uuid=#{item.uuid} then #{item.status}
                    </if>
                </foreach>
            </trim>
            <trim prefix="resolution = case" suffix="end,">
                <foreach collection="list" item="item">
                    <if test="item.resolution != null">
                        when uuid=#{item.uuid} then #{item.resolution}
                    </if>
                </foreach>
            </trim>
        </trim>
        <where>
            <foreach collection="list" separator="or" item="item">
                uuid = #{item.uuid}
            </foreach>
        </where>
    </update>

    <update id="batchUpdateSonarIssues" parameterType="List">
        <!-- 接收list参数，循环着组装sql语句，注意for循环的写法
      separator=";" 代表着每次循环完，在sql后面放一个分号
      item="item" 循环List的每条的结果集
      collection="list" list 即为 map传过来的参数key -->
        <foreach collection="list" separator=";" item="item">
            update issue
            <trim prefix="set" suffixOverrides=",">
                update_time=#{item.update_time},
                <if test="item.end_commit != null">
                    end_commit=#{item.end_commit},
                </if>
                <if test="item.end_commit_date != null">
                    end_commit_date=#{item.end_commit_date},
                </if>
                <if test="item.status != null">
                    status=#{item.status},
                </if>
                <if test="item.resolution != null">
                    resolution=#{item.resolution},
                </if>
                <if test="item.start_commit != null">
                    start_commit=#{item.start_commit},
                </if>
            </trim>
            <where>
                    uuid = #{item.uuid}
            </where>
        </foreach>
    </update>

    <delete id="deleteIssueByRepoIdAndCategory" parameterType="String">
        delete from issue where repo_id = #{repo_id} and category = #{category}
    </delete>

    <select id="getExistIssueTypes" resultType="String">
        select distinct type  as types
        from issue
        where category = #{category} order by types
    </select>

    <select id="getIssueIdsByRepoIdAndCategory" resultType="String" parameterType="String">
        select uuid from issue where repo_id = #{repo_id} and category = #{category}
    </select>

    <select id="getSpecificIssueCount" resultType="int" parameterType="Map">
        select count(uuid) from issue
        <include refid="whereSpecificIssues" />
    </select>

    <sql id="whereSpecificIssues" >
        <where>
            category = #{category}
            <if test="repo_id != null">
               and repo_id = #{repo_id}
            </if>
            <if test="types != null">
                and type in
                <foreach collection="types" separator="," open="(" close=")" item="type">
                    #{type}
                </foreach>
            </if>
            <if test="list != null">
                and uuid in
                <foreach collection="list" separator="," open="(" close=")" item="issue_id">
                    #{issue_id}
                </foreach>
            </if>
            <if test="solved_issue_ids != null">
                and uuid not in
                <foreach collection="solved_issue_ids" separator="," open="(" close=")" item="issue_id">
                    #{issue_id}
                </foreach>
            </if>
        </where>
    </sql>

    <select id="getSpecificIssues" resultMap="issue2" parameterType="Map">
        select * from issue
        <include refid="whereSpecificIssues" />
        order by priority , end_commit_date desc , start_commit_date desc
        limit #{start},#{size}
    </select>

    <select id="getAvgEliminatedTime" resultType="double">
        select
        avg((UNIX_TIMESTAMP(end_commit_date) - UNIX_TIMESTAMP(start_commit_date)))
        FROM
        issue
        WHERE
        repo_id = #{repo_id} and category = #{category} and uuid in
        <foreach collection="list" separator="," open="(" close=")" item="issue_id">
            #{issue_id}
        </foreach>
    </select>

    <select id="getMaxAliveTime" resultType="long">
        select
        max((UNIX_TIMESTAMP(end_commit_date) - UNIX_TIMESTAMP(start_commit_date)))
        FROM
        issue
        WHERE
        repo_id = #{repo_id} and category = #{category}
        <if test="list != null">
            and uuid not in
            <foreach collection="list" separator="," open="(" close=")" item="issue_id">
                #{issue_id}
            </foreach>
        </if>
    </select>

    <update id="updateOneIssuePriority"  >
        UPDATE issue SET priority = #{priority} WHERE uuid = #{uuid}
    </update>

    <update id="updateOneIssueStatus"  >
        UPDATE issue
        <trim prefix="set" suffixOverrides=",">
            <if test="status != null">
                status = #{status},
            </if>
            <if test="manual_status != null">
                manual_status = #{manual_status},
            </if>
        </trim>
         WHERE uuid = #{uuid}
    </update>

    <select id="getIssueIdAndPriority" resultMap="issue3">
        SELECT a.uuid ,b.detail FROM issue  as a , rawIssue as b  where a.raw_issue_end = b.uuid and detail is not null
    </select>

    <select id="getMaxIssueDisplayId" parameterType="String" resultType="Integer">
        select max(display_id) from issue where repo_id = #{repo_id}
    </select>

    <update id="updateIssueDisplayId"  >
      UPDATE issue set display_id = #{display_id} where uuid = #{uuid}
    </update>



    <select id="getAllRepoId" resultType="String">
        select distinct(repo_id) from issue
    </select>

    <select id="getAllIssueIdByRepoId" parameterType="String" resultType="String">
        select uuid from issue where repo_id = #{repo_id}
    </select>

    <select id="getNotSolvedIssueListByTypeAndRepoId" parameterType="String" resultType="String">
        select uuid from issue where status != "Solved" and status != "Misinformation"
        <if test="repo_id != null and repo_id != ''" >
            and repo_id = #{repo_id}
        </if>
        <if test="type != null and type != ''" >
            and type = #{type}
        </if>
    </select>

    <select id="getIssueUuidListByCondition" parameterType="String" resultType="String">
        select uuid from issue
        <trim prefix="where" prefixOverrides="and |or">
            <if test="repo_id != null and repo_id != ''" >
                and repo_id = #{repo_id}
            </if>
            <if test="type != null and type != ''" >
                and type = #{type}
            </if>
            <if test="status != null and status != ''" >
                and status = #{status}
            </if>
        </trim>
    </select>

    <select id="getNotSolvedIssueAllListByCategoryAndRepoId" parameterType="String" resultType="Issue">
        select * from issue where repo_id = #{repo_id} and category = #{type} and status != "Solved"
    </select>

    <select id="getIssueByIssueId" parameterType="String" resultType="Issue">
        select * from issue where uuid = #{issue_id}
    </select>

    <update id="batchUpdateIssueListPriority" >
        update issue set priority = #{priority}
        <if test="list != null">
            where uuid in
            <foreach collection="list" separator="," open="(" close=")" item="issue_id">
                #{issue_id}
            </foreach>
        </if>
    </update>

    <update id="batchUpdateIssueListStatus" >
        update issue set status = #{status}
        <if test="list != null">
            where uuid in
            <foreach collection="list" separator="," open="(" close=")" item="issue_id">
                #{issue_id}
            </foreach>
        </if>
    </update>

    <select id="getIgnoredCountInMappedIssues" resultType="int">
        select count(uuid) from issue
        inner join tagged on uuid = item_id
        where uuid in
        <foreach collection="list" separator="," open="(" close=")" item="issue_id">
            #{issue_id}
        </foreach>
        and tag_id = #{ignoreId}
    </select>

    <select id="getNumberOfNewIssueByDuration" resultType="int">
        select count(*) from issue where repo_id = #{repo_id} and start_commit_date between #{start} and #{end}
    </select>

    <select id="getNumberOfEliminateIssueByDuration" resultType="int">
        select count(*) from issue where repo_id = #{repo_id} and end_commit_date between #{start} and #{end}
    </select>

    <select id="getCommitNewIssue" resultType="java.util.WeakHashMap">
        select start_commit as 'key',count(start_commit) as 'value'
        from issue
        where repo_id = #{repo_id} and start_commit_date between #{start} and #{end}
        group by start_commit order by value
    </select>

    <select id="getSonarIssueByRepoId" parameterType="String" resultMap="issue4">
        select *
        from issue
        where repo_id = #{repo_id} and category = #{category} and status != 'CLOSED'
        order by sonar_issue_id collate utf8mb4_bin
    </select>

    <select id="getIssueBySonarIssueKey" parameterType="String" resultMap="issue4">
        select *
        from issue
        where sonar_issue_id = binary(#{sonar_issue_id})
    </select>


    <select id="getIssuesByIssueIds" parameterType="List" resultMap="issue4">
        SELECT * FROM issue
        WHERE uuid IN
        <foreach collection="list" item="issue_id"  open="(" close=")" separator=",">
            #{issue_id}
        </foreach>
    </select>

    <select id="getCommitIds" parameterType="String" resultType="String">
        select commit_id from commit where repo_id = #{repo_id}
        <if test="since != null">
            and <![CDATA[ commit_time >= #{since} ]]>
        </if>
        <if test="until != null">
            and <![CDATA[ commit_time <= #{until} ]]>
        </if>
    </select>


    <select id="getHaveNotAdoptEliminateIssuesByCategoryAndRepoId" parameterType="String" resultMap="issue4">
        select * from issue
        where  repo_id = #{repo_id} and category = #{category} and resolution is not null and  resolution != '0';
    </select>
</mapper>