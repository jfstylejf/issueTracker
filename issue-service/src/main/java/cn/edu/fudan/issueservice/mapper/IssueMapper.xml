<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.fudan.issueservice.mapper.IssueMapper">

    <resultMap id="issue" type="Issue">
        <id property="uuid" column="uuid"/>
        <result property="type" column="type"/>
        <result property="tool" column="tool"/>
        <result property="start_commit" column="start_commit"/>
        <result property="start_commit_date" column="start_commit_date"/>
        <result property="end_commit" column="end_commit"/>
        <result property="end_commit_date" column="end_commit_date"/>
        <result property="repo_id" column="repo_id"/>
        <result property="target_files" column="target_files"/>
        <result property="create_time" column="create_time"/>
        <result property="update_time" column="update_time"/>
        <result property="priority" column="priority"/>
        <result property="displayId" column="display_id"/>
        <result property="producer" column="producer"/>
    </resultMap>

    <resultMap id="issueWithCommitView" type="Issue">
        <id property="uuid" column="uuid"/>
        <result property="type" column="type"/>
        <result property="tool" column="tool"/>
        <result property="start_commit" column="start_commit"/>
        <result property="start_commit_date" column="start_commit_date"/>
        <result property="end_commit" column="end_commit"/>
        <result property="end_commit_date" column="end_commit_date"/>
        <result property="repo_id" column="repo_id"/>
        <result property="target_files" column="target_files"/>
        <result property="create_time" column="create_time"/>
        <result property="update_time" column="update_time"/>
        <result property="priority" column="priority"/>
        <result property="displayId" column="display_id"/>
        <result property="status" column="status"/>
        <result property="resolution" column="resolution"/>
        <result property="producer" column="producer"/>
        <result property="issueCategory" column="issue_category"/>
        <collection property="issueType" column="type"
                    select="cn.edu.fudan.issueservice.mapper.IssueTypeMapper.getIssueTypeByTypeName"/>
    </resultMap>

    <resultMap id="issue3" type="Map">
        <id property="uuid" column="uuid"/>
        <result property="detail" column="detail"/>
    </resultMap>

    <resultMap id="issue4" type="Issue">
        <id property="uuid" column="uuid"/>
        <result property="type" column="type"/>
        <result property="tool" column="tool"/>
        <result property="start_commit" column="start_commit"/>
        <result property="start_commit_date" column="start_commit_date"/>
        <result property="end_commit" column="end_commit"/>
        <result property="end_commit_date" column="end_commit_date"/>
        <result property="repo_id" column="repo_id"/>
        <result property="target_files" column="target_files"/>
        <result property="create_time" column="create_time"/>
        <result property="update_time" column="update_time"/>
        <result property="priority" column="priority"/>
        <result property="displayId" column="display_id"/>
        <result property="status" column="status"/>
        <result property="resolution" column="resolution"/>
        <result property="producer" column="producer"/>
        <collection property="issueType" column="type"
                    select="cn.edu.fudan.issueservice.mapper.IssueTypeMapper.getIssueTypeByTypeName"/>
    </resultMap>


    <insert id="insertIssueList" parameterType="List">
        insert into issue
        (
        uuid,
        type,
        tool,
        start_commit,
        start_commit_date,
        end_commit,
        end_commit_date,
        repo_id,
        target_files,
        create_time,
        update_time,
        priority,
        display_id,
        `status`,
        resolution,
        producer,
        issue_category
        )
        VALUES
        <foreach collection="list" item="item" index="index" separator=",">
            (
            #{item.uuid},
            #{item.type},
            #{item.tool},
            #{item.start_commit},
            #{item.start_commit_date},
            #{item.end_commit},
            #{item.end_commit_date},
            #{item.repo_id},
            #{item.target_files},
            #{item.create_time},
            #{item.update_time},
            #{item.priority},
            #{item.displayId},
            #{item.status},
            #{item.resolution},
            #{item.producer},
            #{item.issueCategory}
            )
        </foreach>
    </insert>

    <select id="getIssueList" parameterType="Map" resultMap="issueWithCommitView">
        select
        a.uuid,a.type,a.tool,a.start_commit,a.start_commit_date,a.end_commit,a.end_commit_date,
        a.repo_id,a.target_files,a.create_time,a.update_time,a.priority,a.display_id,a.status,a.resolution,
        a.type,a.issue_category,b.developer_unique_name as developer,a.producer
        from issue as a left join commit_view as b on a.repo_id = b.repo_id and a.start_commit = b.commit_id
        <trim prefix="where" prefixOverrides="and | or">
            <if test="repo_id != null and repo_id.size > 0">
                and a.repo_id in
                <foreach collection="repo_id" separator="," open="(" close=")" item="repo">
                    #{repo}
                </foreach>
            </if>
            <if test="types != null">
                and a.type in
                <foreach collection="types" separator="," open="(" close=")" item="type">
                    #{type}
                </foreach>
            </if>
            <if test="issue_status != null">
                and a.status  in
                <foreach collection="issue_status" separator="," open="(" close=")" item="status">
                    #{status}
                </foreach>
            </if>
            <if test="toolName != null">
                and a.tool = #{toolName}
            </if>
            <if test="priority != null and priority != -1">
                and a.priority = #{priority}
            </if>
            <if test="developer != null">
                and b.developer_unique_name = #{developer}
            </if>
            <if test="since != null">
                and <![CDATA[ start_commit_date >= #{since} ]]>
            </if>
            <if test="until != null">
                and <![CDATA[ start_commit_date <= #{until} ]]>
            </if>
            <if test="issueCategory != null and issueCategory != ''">
                and a.issue_category = #{issueCategory}
            </if>
        </trim>
        order by a.priority , a.end_commit_date desc , a.start_commit_date desc , a.display_id
        <if test="start != null  and size != null ">
            limit #{start},#{size}
        </if>
    </select>

    <select id="getIssueWithAdder" parameterType="Map" resultType="java.util.HashMap">
        select
        a.uuid,a.type,a.tool,a.start_commit as startCommit,a.start_commit_date as startCommitDate,a.end_commit as endCommit,a.end_commit_date as endCommitDate,
        a.repo_id as repoId,a.target_files as targetFiles,a.priority,a.display_id as displayId,a.status,a.resolution,
        a.type,a.issue_category as issueCategory,b.developer_unique_name as adder
        from issue as a left join commit_view as b on a.repo_id = b.repo_id and a.start_commit = b.commit_id
        <trim prefix="where" prefixOverrides="and | or">
            <if test="repo_id != null and repo_id.size > 0">
                and a.repo_id in
                <foreach collection="repo_id" separator="," open="(" close=")" item="repo">
                    #{repo}
                </foreach>
            </if>
            <if test="types != null">
                and a.type in
                <foreach collection="types" separator="," open="(" close=")" item="type">
                    #{type}
                </foreach>
            </if>
            <if test="issue_status != null">
                and a.status  in
                <foreach collection="issue_status" separator="," open="(" close=")" item="status">
                    #{status}
                </foreach>
            </if>
            <if test="toolName != null">
                and a.tool = #{toolName}
            </if>
            <if test="priority != null and priority != -1">
                and a.priority = #{priority}
            </if>
            <if test="developer != null">
                and b.developer_unique_name = #{developer}
            </if>
            <if test="since != null">
                and <![CDATA[ start_commit_date >= #{since} ]]>
            </if>
            <if test="until != null">
                and <![CDATA[ start_commit_date <= #{until} ]]>
            </if>
            <if test="issueCategory != null and issueCategory != ''">
                and a.issue_category = #{issueCategory}
            </if>
        </trim>
        order by a.priority , a.end_commit_date desc , a.start_commit_date desc , a.display_id
        <if test="start != null  and size != null ">
            limit #{start},#{size}
        </if>
    </select>

    <select id="getIssueByID" parameterType="String" resultMap="issueWithCommitView">
        select * from issue where uuid = #{uuid}
    </select>

    <select id="getIssueCount" parameterType="Map" resultType="java.util.HashMap">
        select
        issue_category as 'key',count(*) as 'value'
        from issue as a left join commit_view as b on a.repo_id = b.repo_id and a.start_commit = b.commit_id
        <trim prefix="where" prefixOverrides="and | or">
            <if test="repo_id != null">
                and a.repo_id in
                <foreach collection="repo_id" separator="," open="(" close=")" item="repo">
                    #{repo}
                </foreach>
            </if>
            <if test="types != null">
                and a.type in
                <foreach collection="types" separator="," open="(" close=")" item="type">
                    #{type}
                </foreach>
            </if>
            <if test="issue_status != null">
                and a.status  in
                <foreach collection="issue_status" separator="," open="(" close=")" item="status">
                    #{status}
                </foreach>
            </if>
            <if test="toolName != null">
                and a.tool = #{toolName}
            </if>
            <if test="priority != null and priority != -1">
                and a.priority = #{priority}
            </if>
            <if test="developer != null">
                and b.developer_unique_name = #{developer}
            </if>
            <if test="since != null">
                and <![CDATA[ start_commit_date >= #{since} ]]>
            </if>
            <if test="until != null">
                and <![CDATA[ start_commit_date <= #{until} ]]>
            </if>
            <if test="issueCategory != null and issueCategory != ''">
                and a.issue_category = #{issueCategory}
            </if>
        </trim>
        group by issue_category;
    </select>

    <select id="getIssuesCount" parameterType="Map" resultType="java.util.HashMap">
        select
        issue_category as 'key',count(*) as 'value'
        from issue as a left join commit_view as b on a.repo_id = b.repo_id and a.start_commit = b.commit_id
        <trim prefix="where" prefixOverrides="and | or">
            <if test="repoList != null">
                and a.repo_id in
                <foreach collection="repoList" separator="," open="(" close=")" item="repo">
                    #{repo}
                </foreach>
            </if>
            <if test="types != null">
                and a.type in
                <foreach collection="types" separator="," open="(" close=")" item="type">
                    #{type}
                </foreach>
            </if>
            <if test="status != null">
                and a.status  in
                <foreach collection="status" separator="," open="(" close=")" item="status">
                    #{status}
                </foreach>
            </if>
            <if test="toolName != null">
                and a.tool = #{toolName}
            </if>
            <if test="priority != null and priority != -1">
                and a.priority = #{priority}
            </if>
            <if test="developer != null">
                and b.developer_unique_name = #{developer}
            </if>
            <if test="since != null">
                and <![CDATA[ start_commit_date >= #{since} ]]>
            </if>
            <if test="until != null">
                and <![CDATA[ start_commit_date <= #{until} ]]>
            </if>
            <if test="category != null and category != ''">
                and a.issue_category = #{category}
            </if>
            <if test="filesPath != null">
                and a.target_files in
                <foreach collection="filesPath" separator="," open="(" close=")" item="filePath">
                    #{filePath}
                </foreach>
            </if>
        </trim>
        group by issue_category;
    </select>

    <select id="getIssuesByEndCommit" parameterType="String" resultMap="issue">
        select * from issue
        where repo_id = #{repo_id} and end_commit = #{commit_id} and tool = #{tool}
    </select>

    <select id="getRepoWithIssues" parameterType="String" resultType="String">
        select
        distinct b.repo_id as repoId
        from issue as a inner join commit_view as b on a.repo_id = b.repo_id and a.start_commit = b.commit_id
        <trim prefix="where" prefixOverrides="and | or">

            <if test="developer != null">
                and b.developer_unique_name = #{developer}
            </if>

        </trim>
    </select>


    <update id="batchUpdateIssue" parameterType="List">
        update issue
        <trim prefix="set" suffixOverrides=",">
            <trim prefix="start_commit = case" suffix="end,">
                <foreach collection="list" item="item">
                    <if test="item.start_commit != null">
                        when uuid=#{item.uuid} then #{item.start_commit}
                    </if>
                </foreach>
            </trim>
            <trim prefix="end_commit = case" suffix="end,">
                <foreach collection="list" item="item">
                    <if test="item.end_commit != null">
                        when uuid=#{item.uuid} then #{item.end_commit}
                    </if>
                </foreach>
            </trim>
            <trim prefix="end_commit_date = case" suffix="end,">
                <foreach collection="list" item="item">
                    <if test="item.end_commit_date != null">
                        when uuid=#{item.uuid} then #{item.end_commit_date}
                    </if>
                </foreach>
            </trim>
            <trim prefix="target_files = case" suffix="end,">
                <foreach collection="list" item="item">
                    <if test="item.target_files != null">
                        when uuid=#{item.uuid} then #{item.target_files}
                    </if>
                </foreach>
            </trim>
            <trim prefix="update_time = case" suffix="end,">
                <foreach collection="list" item="item">
                    <if test="item.update_time != null">
                        when uuid=#{item.uuid} then #{item.update_time}
                    </if>
                </foreach>
            </trim>
            <trim prefix="priority = case" suffix="end,">
                <foreach collection="list" item="item">
                    <if test="item.priority != null">
                        when uuid=#{item.uuid} then #{item.priority}
                    </if>
                </foreach>
            </trim>
            <trim prefix="status = case" suffix="end,">
                <foreach collection="list" item="item">
                    <if test="item.status != null">
                        when uuid=#{item.uuid} then #{item.status}
                    </if>
                </foreach>
            </trim>
            <trim prefix="resolution = case" suffix="end,">
                <foreach collection="list" item="item">
                    <if test="item.resolution != null">
                        when uuid=#{item.uuid} then #{item.resolution}
                    </if>
                </foreach>
            </trim>
        </trim>
        <where>
            <foreach collection="list" separator="or" item="item">
                uuid = #{item.uuid}
            </foreach>
        </where>
    </update>

    <delete id="deleteIssueByRepoIdAndTool" parameterType="String">
        delete from issue where repo_id = #{repo_id} and tool = #{tool}
    </delete>

    <select id="getExistIssueTypes" resultType="String">
        select distinct type  as types
        from issue
        where tool = #{tool} order by types
    </select>

    <select id="getIssueIdsByRepoIdAndTool" resultType="String" parameterType="String">
        select uuid from issue where repo_id = #{repo_id} and tool = #{tool}
    </select>

    <select id="getSpecificIssueCount" resultType="int" parameterType="Map">
        select count(uuid) from issue
        <include refid="whereSpecificIssues" />
    </select>

    <sql id="whereSpecificIssues" >
        <where>
            tool = #{tool}
            <if test="repo_id != null">
                and repo_id = #{repo_id}
            </if>
            <if test="types != null">
                and type in
                <foreach collection="types" separator="," open="(" close=")" item="type">
                    #{type}
                </foreach>
            </if>
            <if test="list != null">
                and uuid in
                <foreach collection="list" separator="," open="(" close=")" item="issue_id">
                    #{issue_id}
                </foreach>
            </if>
            <if test="solved_issue_ids != null">
                and uuid not in
                <foreach collection="solved_issue_ids" separator="," open="(" close=")" item="issue_id">
                    #{issue_id}
                </foreach>
            </if>
        </where>
    </sql>

    <select id="getSpecificIssues" resultMap="issueWithCommitView" parameterType="Map">
        select * from issue
        <include refid="whereSpecificIssues" />
        order by priority , end_commit_date desc , start_commit_date desc
        limit #{start},#{size}
    </select>

    <select id="getAvgEliminatedTime" resultType="double">
        select
        avg((UNIX_TIMESTAMP(end_commit_date) - UNIX_TIMESTAMP(start_commit_date)))
        FROM
        issue
        WHERE
        repo_id = #{repo_id} and tool = #{tool} and uuid in
        <foreach collection="list" separator="," open="(" close=")" item="issue_id">
            #{issue_id}
        </foreach>
    </select>

    <select id="getMaxAliveTime" resultType="long">
        select
        max((UNIX_TIMESTAMP(end_commit_date) - UNIX_TIMESTAMP(start_commit_date)))
        FROM
        issue
        WHERE
        repo_id = #{repo_id} and tool = #{tool}
        <if test="list != null">
            and uuid not in
            <foreach collection="list" separator="," open="(" close=")" item="issue_id">
                #{issue_id}
            </foreach>
        </if>
    </select>

    <update id="updateOneIssuePriority"  >
        UPDATE issue SET priority = #{priority} WHERE uuid = #{uuid}
    </update>

    <update id="updateOneIssueStatus"  >
        UPDATE issue
        <trim prefix="set" suffixOverrides=",">
            <if test="status != null">
                status = #{status},
            </if>
            <if test="manual_status != null">
                manual_status = #{manual_status},
            </if>
        </trim>
        WHERE uuid = #{uuid}
    </update>

    <select id="getMaxIssueDisplayId" parameterType="String" resultType="Integer">
        select max(display_id) from issue where repo_id = #{repo_id}
    </select>

    <update id="updateIssueDisplayId"  >
        UPDATE issue set display_id = #{display_id} where uuid = #{uuid}
    </update>



    <select id="getAllRepoId" resultType="String">
        select distinct(repo_id) from issue
    </select>

    <select id="getAllIssueIdByRepoId" parameterType="String" resultType="String">
        select uuid from issue where repo_id = #{repo_id}
    </select>

    <select id="getNotSolvedIssueListByTypeAndRepoId" parameterType="String" resultType="String">
        select uuid from issue where repo_id = #{repo_id} and type = #{type} and priority != 6
    </select>

    <select id="getNotSolvedIssueAllListByToolAndRepoId" parameterType="String" resultType="Issue">
        select * from issue where repo_id = #{repo_id} and tool = #{tool} and priority != 6
    </select>

    <update id="batchUpdateIssueListPriority" >
        update issue set priority = #{priority}
        <if test="list != null">
            where uuid in
            <foreach collection="list" separator="," open="(" close=")" item="issue_id">
                #{issue_id}
            </foreach>
        </if>
    </update>

    <select id="getIgnoredCountInMappedIssues" resultType="int">
        select count(uuid) from issue
        inner join tagged on uuid = item_id
        where uuid in
        <foreach collection="list" separator="," open="(" close=")" item="issue_id">
            #{issue_id}
        </foreach>
        and tag_id = #{ignoreId}
    </select>

    <select id="getNumberOfNewIssueByDuration" resultType="int">
        select count(*) from issue where repo_id = #{repo_id} and start_commit_date between #{start} and #{end}
    </select>

    <select id="getNumberOfEliminateIssueByDuration" resultType="int">
        select count(*) from issue where repo_id = #{repo_id} and end_commit_date between #{start} and #{end}
    </select>

    <select id="getCommitNewIssue" resultType="java.util.WeakHashMap">
        select start_commit as 'key',count(start_commit) as 'value'
        from issue
        where repo_id = #{repo_id} and start_commit_date between #{start} and #{end}
        group by start_commit order by value
    </select>


    <select id="getIssuesByIssueIds" parameterType="List" resultMap="issue4">
        SELECT * FROM issue
        WHERE uuid IN
        <foreach collection="list" item="issue_id"  open="(" close=")" separator=",">
            #{issue_id}
        </foreach>
    </select>

    <select id="getCommitIds" parameterType="String" resultType="String">
        select commit_id from commit where repo_id = #{repo_id}
        <if test="since != null">
            and <![CDATA[ commit_time >= #{since} ]]>
        </if>
        <if test="until != null">
            and <![CDATA[ commit_time <= #{until} ]]>
        </if>
    </select>


    <select id="getHaveNotAdoptEliminateIssuesByToolAndRepoId" parameterType="String" resultMap="issue4">
        select * from issue
        where  repo_id = #{repo_id} and tool = #{tool} and resolution is not null and  resolution != '0';
    </select>

    <select id="getIssueByRepoIdAndToolAndStatusList" parameterType="String" resultMap="issue4">
        select * from issue
        where  repo_id = #{repo_id} and tool = #{tool}
        <if test="status_list != null and status_list.size > 0">
            <foreach collection="status_list" item="status">
                and status != #{status}
            </foreach>
        </if>
    </select>


    <select id="getIssuesByIds"  resultMap="issue4">
        select * from issue
        <where>
            <if test="issueId_list != null  and issueId_list.size > 0">
                uuid in
                <foreach collection="issueId_list" item="issueId" separator="," open="(" close=")">
                    #{issueId}
                </foreach>
            </if>
        </where>
    </select>

    <select id="getIssueByRawIssueCommitViewIssueTable" resultType="java.util.HashMap">
        select uuid, type, status, start_commit_date, end_commit_date, now() as now_date, datediff(now(),start_commit_date) as lifeCycle
        from issue
        where uuid in
        (SELECT a.issue_id
        FROM
        rawIssue as a
        INNER JOIN commit_view as b
        ON a.repo_id = b.repo_id AND a.commit_id = b.commit_id
        <trim prefix="where" prefixOverrides="and">
            <if test="repoIdList != null and repoIdList.size > 0">
                and a.repo_id in
                <foreach collection="repoIdList" separator="," open="(" close=")" item="repo_id">
                    #{repo_id}
                </foreach>
            </if>

            <if test="rawIssueStatus != null  and rawIssueStatus != ''">
                and a.status = #{rawIssueStatus}
            </if>

            <if test="type != null  and type != ''">
                and a.type = #{type}
            </if>

            <if test="developer != null  and developer != ''">
                and b.developer_unique_name = #{developer}
            </if>

            <if test="tool != null  and tool != ''">
                and a.tool = #{tool}
            </if>

            <if test="since != null and since != '' ">
                and <![CDATA[ b.commit_time >= #{since} ]]>
            </if>

            <if test="until != null and until != '' ">
                and <![CDATA[ b.commit_time <= #{until} ]]>
            </if>
        </trim>
        GROUP BY a.issue_id)
        <if test="issueStatus != null  and issueStatus != ''">
            and status = #{issueStatus}
        </if>
        order by lifeCycle desc
    </select>

    <select id="getSolvedIssueLifeCycle" resultType="java.util.HashMap">
        select display_id as displayId, uuid, repo_id as repoId, type, status, start_commit_date as startCommitDate, datediff(end_commit_date,start_commit_date) as lifeCycle, target_files as targetFiles, priority, issue_category as issueCategory
        from issue
        where uuid in
        (SELECT a.issue_id
        FROM
        rawIssue as a
        INNER JOIN commit_view as b
        ON a.repo_id = b.repo_id AND a.commit_id = b.commit_id
        <trim prefix="where" prefixOverrides="and">
            <if test="repoIdList != null and repoIdList.size > 0">
                and a.repo_id in
                <foreach collection="repoIdList" separator="," open="(" close=")" item="repo_id">
                    #{repo_id}
                </foreach>
            </if>

            <if test="status != null  and status != ''">
                and a.status = #{status}
            </if>

            <if test="type != null  and type != ''">
                and a.type = #{type}
            </if>

            <if test="developer != null  and developer != ''">
                and b.developer_unique_name = #{developer}
            </if>

            <if test="tool != null  and tool != ''">
                and a.tool = #{tool}
            </if>

            <if test="since != null and since != '' ">
                and <![CDATA[ b.commit_time >= #{since} ]]>
            </if>

            <if test="until != null and until != '' ">
                and <![CDATA[ b.commit_time <= #{until} ]]>
            </if>
        </trim>

        GROUP BY a.issue_id)
        and status = "Solved"
        order by  lifeCycle desc

    </select>

    <select id="getSolvedIssueLifeCycleByOtherSolved" parameterType="String" resultType="java.util.HashMap">
        select display_id as displayId, uuid, repo_id as repoId, type, status, start_commit_date as startCommitDate, datediff(end_commit_date,start_commit_date) as lifeCycle, target_files as targetFiles, priority, issue_category as issueCategory
        from issue
        where uuid in
        (SELECT a.issue_id
        FROM
        rawIssue as a
        INNER JOIN commit_view as b
        ON a.repo_id = b.repo_id AND a.commit_id = b.commit_id
        <trim prefix="where" prefixOverrides="and">
            <if test="repoIdList != null and repoIdList.size > 0">
                and a.repo_id in
                <foreach collection="repoIdList" separator="," open="(" close=")" item="repo_id">
                    #{repo_id}
                </foreach>
            </if>

            <if test="status != null  and status != ''">
                and a.status = #{status}
            </if>

            <if test="type != null  and type != ''">
                and a.type = #{type}
            </if>

            <if test="developer != null  and developer != ''">
                and b.developer_unique_name != #{developer}
            </if>

            <if test="tool != null  and tool != ''">
                and a.tool = #{tool}
            </if>

            <if test="since != null and since != '' ">
                and <![CDATA[ b.commit_time >= #{since} ]]>
            </if>

            <if test="until != null and until != '' ">
                and <![CDATA[ b.commit_time <= #{until} ]]>
            </if>
        </trim>
        GROUP BY a.issue_id)
        and status = "Solved"
        order by lifeCycle desc

    </select>

    <select id="getOpenIssueLifeCycle" resultType="java.util.HashMap">
        select display_id as displayId, uuid, repo_id as repoId, type, status, start_commit_date as startCommitDate, datediff(now(),start_commit_date) as lifeCycle, target_files as targetFiles, priority, issue_category as issueCategory
        from issue
        where uuid in
        (SELECT a.issue_id
        FROM
        rawIssue as a
        INNER JOIN commit_view as b
        ON a.repo_id = b.repo_id AND a.commit_id = b.commit_id
        <trim prefix="where" prefixOverrides="and">
            <if test="repoIdList != null and repoIdList.size > 0">
                and a.repo_id in
                <foreach collection="repoIdList" separator="," open="(" close=")" item="repo_id">
                    #{repo_id}
                </foreach>
            </if>

            <if test="rawIssueStatus != null  and rawIssueStatus != ''">
                and a.status = #{rawIssueStatus}
            </if>

            <if test="type != null  and type != ''">
                and a.type = #{type}
            </if>

            <if test="developer != null  and developer != ''">
                and b.developer_unique_name = #{developer}
            </if>

            <if test="tool != null  and tool != ''">
                and a.tool = #{tool}
            </if>

            <if test="since != null and since != '' ">
                and <![CDATA[ b.commit_time >= #{since} ]]>
            </if>

            <if test="until != null and until != '' ">
                and <![CDATA[ b.commit_time <= #{until} ]]>
            </if>
        </trim>
        GROUP BY a.issue_id)
        and status = #{issueStatus}
        order by lifeCycle desc
    </select>

    <select id="getIssueStatisticByIssueIdList"  parameterType="String" resultType="java.util.HashMap">
        select b.type, AVG(b.lifeCycle) as avgLifeCycle ,MIN(b.lifeCycle) as minLifeCycle , MAX(b.lifeCycle) as maxLifeCycle, COUNT(b.type) as quantity
        FROM
        (select type, DATEDIFF(end_commit_date,start_commit_date) AS lifeCycle
        from issue
        <where>
            <if test="issueId_list != null  and issueId_list.size > 0">
                uuid in
                <foreach collection="issueId_list" item="issueId" separator="," open="(" close=")">
                    #{issueId}
                </foreach>
            </if>
        </where>
        ) AS b
        GROUP BY b.type
        <if test='order != null and order == "quantity" '>
            ORDER BY quantity
        </if>
        <if test='order != null and order == "lifecycle" '>
            ORDER BY avgLifeCycle
        </if>
        <if test='asc != null and asc == "false" '>
            desc
        </if>
    </select>

    <select id="getAdderByIssue" resultType="String">
        SELECT a.developer FROM rawIssue AS a INNER JOIN commit_view AS b
        ON a.repo_id = b.repo_id AND a.commit_id = b.commit_id
        WHERE a.status = #{status}
        <if test="tool != null and tool != '' ">
            AND a.tool = #{tool}
        </if>
        <if test="repoList != null and repoList.size > 0">
            AND a.repo_id IN
            <foreach collection="repoList" separator="," open="(" close=")" item="repo_id">
                #{repo_id}
            </foreach>
        </if>
        <if test="since != null and since != '' ">
            AND <![CDATA[ b.commit_time >= #{since} ]]>
        </if>
        <if test="until != null and until != '' ">
            AND <![CDATA[ b.commit_time <= #{until} ]]>
        </if>
    </select>

    <select id="getSolvedIssue" resultType="String">
        SELECT uuid FROM issue WHERE status = #{status}
        <if test="repoList != null and repoList.size > 0">
            AND repo_id IN
            <foreach collection="repoList" separator="," open="(" close=")" item="repo_id">
                #{repo_id}
            </foreach>
        </if>
        <if test="tool != null and tool != '' ">
            AND tool = #{tool}
        </if>
        <if test="since != null and since != '' ">
            AND <![CDATA[ update_time >= #{since} ]]>
        </if>
        <if test="until != null and until != '' ">
            AND <![CDATA[ update_time <= #{until} ]]>
        </if>
    </select>

    <update id="test" parameterType="String">
        update issue set solver = #{s} where uuid = #{uuid}
    </update>

    <select id="getIssuetest" resultType="String">
        select * from issue where status = 'Solved'
    </select>

    <select id="getIssueFilterListCount" parameterType="Map" resultType="Integer">
        SELECT COUNT(*) FROM issue
        <trim prefix="where" prefixOverrides="and">
            <if test="developer != null">
                AND producer = #{developer}
            </if>
            <if test="priority != null">
                AND priority = #{priority}
            </if>
            <if test="solver !=null">
                AND solver = #{solver}
            </if>
            <if test="filesPath != null and filesPath.size > 0">
                AND target_files IN
                <foreach collection="filesPath" separator="," open="(" close=")" item="filePath">
                    #{filePath}
                </foreach>
            </if>
            <if test="types != null and types.size > 0">
                AND type IN
                <foreach collection="types" separator="," open="(" close=")" item="type">
                    #{type}
                </foreach>
            </if>
            <if test="status != null and status.size > 0">
                AND status IN
                <foreach collection="status" separator="," open="(" close=")" item="state">
                    #{state}
                </foreach>
            </if>
            <if test="since != null and since != '' ">
                AND <![CDATA[ start_commit_date >= #{since} ]]>
            </if>
            <if test="until != null and until != '' ">
                AND <![CDATA[ end_commit_date <= #{until} ]]>
            </if>
            <if test="toolName != null">
                AND tool = #{toolName}
            </if>
            <if test="repoList != null and repoList.size > 0">
                AND repo_id IN
                <foreach collection="repoList" separator="," open="(" close=")" item="repo_id">
                    #{repo_id}
                </foreach>
            </if>
            <if test="category != null">
                AND issue_category = #{category}
            </if>
            <if test="issueUuids != null and issueUuids.size > 0">
                AND uuid IN
                <foreach collection="issueUuids" separator="," open="(" close=")" item="issueUuid">
                    #{issueUuid}
                </foreach>
            </if>
        </trim>
    </select>

    <select id="getIssueFilterList" parameterType="Map" resultType="java.util.HashMap">
        SELECT uuid, type, tool, start_commit AS startCommit, start_commit_date AS startCommitDate, end_commit AS endCommit,
        end_commit_date AS endCommitDate, repo_id AS repoId, target_files AS targetFiles, create_time AS creatTime, priority,
        display_id AS displayId, status, issue_category AS issueCategory, producer, solver FROM issue
        <trim prefix="where" prefixOverrides="and">
            <if test="developer != null">
                AND producer = #{developer}
            </if>
            <if test="solver !=null">
                AND solver = #{solver}
            </if>
            <if test="priority != null">
                AND priority = #{priority}
            </if>
            <if test="filesPath != null and filesPath.size > 0">
                AND target_files IN
                <foreach collection="filesPath" separator="," open="(" close=")" item="filePath">
                    #{filePath}
                </foreach>
            </if>
            <if test="types != null and types.size > 0">
                AND type IN
                <foreach collection="types" separator="," open="(" close=")" item="type">
                    #{type}
                </foreach>
            </if>
            <if test="status != null and status.size > 0">
                AND status IN
                <foreach collection="status" separator="," open="(" close=")" item="state">
                    #{state}
                </foreach>
            </if>
            <if test="since != null and since != '' ">
                AND <![CDATA[ start_commit_date >= #{since} ]]>
            </if>
            <if test="until != null and until != '' ">
                AND <![CDATA[ end_commit_date <= #{until} ]]>
            </if>
            <if test="toolName != null">
                AND tool = #{toolName}
            </if>
            <if test="repoList != null and repoList.size > 0">
                AND repo_id IN
                <foreach collection="repoList" separator="," open="(" close=")" item="repo_id">
                    #{repo_id}
                </foreach>
            </if>
            <if test="category != null">
                AND issue_category = #{category}
            </if>
            <if test="issueUuids != null and issueUuids.size > 0">
                AND uuid IN
                <foreach collection="issueUuids" separator="," open="(" close=")" item="issueUuid">
                    #{issueUuid}
                </foreach>
            </if>
        </trim>
        order by priority , end_commit_date desc , start_commit_date desc , display_id
        <if test="start != null  and ps != null ">
            limit #{start},#{ps}
        </if>
    </select>
</mapper>