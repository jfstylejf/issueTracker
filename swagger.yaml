swagger: "2.0"
info:
  description: ""
  version: "1.0.0"
  title: "issueTracker"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "pyu17@fudan.edu.cn"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

tags:
- name: "account-service"
- name: "project-service"
- name: "scan-service"
- name: "unifying-service"
- name: "issue-service"
- name: "commit-service"
schemes:
- "http"
paths:
  /user:
    post:
      tags:
      - "account-service"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "account"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResponseBean"
  /user/login:
    get:
      tags:
      - "account-service"
      summary: "Logs user into the system"
      operationId: "login"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description : "succsssful login"
          schema:
            $ref: "#/definitions/ResponseBean"
        400:
          description: "failed"
          schema:
            $ref : "#/definitions/ResponseBean"
        401:
          description: "Incorrect username or password"
          schema:
            $ref : "#/definitions/ResponseBean"
  /user/auth/{userToken}:
    get:
      tags:
      - "account-service"
      summary: "Logs user into the system"
      operationId: "auth"
      produces:
      - "application/json"
      parameters:
      - name: "userToken"
        in: "path"
        description: "token of user that needs to be fetched"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResponseBean"
        400:
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/ResponseBean"
        404:
          description: "user not found"
  /user/accountId:
    get:
      tags:
      - "account-service"
      summary: "get AccountID By userToken"
      operationId: "getAccountID"
      produces:
      - "application/json"
      parameters:
      - name: "userToken"
        in: "query"
        description: "token of user for get accountID"
        required: true
        type: "string"
      responses:
        200:
          description : "succsssful"
          schema:
            type: "string"
        400:
          description: "failed"
        401:
          description: "Incorrect userToken"

  /project:
    post:
      tags:
      - "project-service"
      summary: "add a project"
      description: "This can only be done by logged in user"
      operationId: "addProject"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "project"
        description: "project that user want to add"
        required: true
        schema:
          $ref: "#/definitions/Project"
      - in: "header"
        name: "token"
        description: "get userToken from Header"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResponseBean"
        400:
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/ResponseBean"
    get:
      tags:
      - "project-service"
      summary: "query Project list By userToken"
      operationId: "query"
      produces:
      - "application/json"
      parameters:
      - in: "header"
        name: "token"
        description: "get userToken from Header"
        required: true
        type: "string"
      responses:
        200:
          description : "succsssful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Project"
        400:
          description: "failed"

    put:
      tags:
      - "project-service"
      summary: "update Project "
      operationId: "updateProject"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "project"
        description: " message about project "
        required: true
        schema:
          $ref: '#/definitions/Project'
      responses:
        200:
          description : "succsssful"
          schema:
            $ref: "#/definitions/ResponseBean"
        401:
          description: "failed"
          schema:
            $ref: "#/definitions/ResponseBean"

  /project/{projectId}:
    delete:
      tags:
      - "project-service"
      summary: "delet a project"
      description: "delet a project by projectId"
      operationId: "delete"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "projectId"
        description: "project that user want to delet"
        required: true
        type : "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResponseBean"
        401:
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/ResponseBean"
    get:
      tags:
      - "project-service"
      summary: "get a project"
      description: "get a project by projectId"
      operationId: "getProject"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "projectId"
        description: "project that user want to get"
        required: true
        type : "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Project"
        401:
          description: "Invalid ID supplied"

  /project/repo-path/{project_id}:
    get:
      tags:
      - "project-service"
      summary: "get Repo Path"
      description: "get Repo Path by project_id"
      operationId: "getRepoPath"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "project_id"
        description: "project id"
        required: true
        type : "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
        401:
          description: "Invalid ID supplied"

  /project/repo-id:
    get:
      tags:
      - "project-service"
      summary: "get Repo id"
      description: "get Repo id by project_id"
      operationId: "getRepoId"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "project-id"
        description: "project id"
        required: true
        type : "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
        401:
          description: "Invalid ID supplied"

  /scan:
    post:
      tags:
      - "scan-service"
      summary: "add a Scan"
      description: " "
      operationId: "addScan"
      parameters:
      - in: "body"
        name: "requestParam"
        description: "get projectId and commitId from  JSONObject"
        required: true
        schema:
          $ref: "#/definitions/ScanJSONObject"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResponseBean"
        401:
          description: "failed operation"
          schema:
            $ref: "#/definitions/ResponseBean"


    put:
      tags:
      - "scan-service"
      summary: "update a Scan"
      description: "update a Scan record"
      operationId: "updateScan"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "scan"
        description: "a scan object"
        required: true
        schema:
          $ref: "#/definitions/Scan"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResponseBean"
        401:
          description: "failed operation"
          schema:
            $ref: "#/definitions/ResponseBean"


  /scan/{projectId}:
    delete:
      tags:
      - "scan-service"
      summary: "delet  Scans by projectId"
      operationId: "deleteScans"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "projectId"
        description: "a project id"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResponseBean"
        401:
          description: "failed operation"
          schema:
            $ref: "#/definitions/ResponseBean"

  /scan/last-commit-date:
    get:
      tags:
      - "scan-service"
      summary: "get TillCommitDate by projectId"
      operationId: "getTillCommitDateByProjectId"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "project-id"
        description: "a project id"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
        401:
          description: "failed operation"

  /scan/commits:
    get:
      tags:
      - "scan-service"
      summary: "get commits by projectId"
      operationId: "getScannedCommits"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "project-id"
        description: "a project id"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
        401:
          description: "failed operation"

  /issue:
    get:
      tags:
      - "issue-service"
      summary: "get Issues by project_id,page and size"
      operationId: "getIssues"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "project-id"
        description: "a project id"
        required: true
        type: "string"
      - in: "query"
        name: "page"
        description: " "
        required: true
        type: "string"
      - in: "query"
        name: "size"
        description: " "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/IssuesMsg'
        401:
          description: "failed operation"
          schema:
            $ref: '#/definitions/IssuesMsg'

    post:
      tags:
      - "issue-service"
      summary: "add Issues"
      operationId: "addIssues"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "issueList"
        description: ""
        required: true
        schema:
          $ref: "#/definitions/IssueList"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/ResponseBean'
        401:
          description: "failed operation"
          schema:
            $ref: '#/definitions/ResponseBean'

    put:
      tags:
      - "issue-service"
      summary: "update Issues"
      operationId: "updateIssues"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "issueList"
        description: ""
        required: true
        schema:
          $ref: "#/definitions/IssueList"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/ResponseBean'
        401:
          description: "failed operation"
          schema:
            $ref: '#/definitions/ResponseBean'

  /issue/{projectId}:
    delete:
      tags:
      - "issue-service"
      summary: "delete Issues by projectid"
      operationId: "deleteIssues"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "projectId"
        description: ""
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/ResponseBean'
        401:
          description: "failed operation"
          schema:
            $ref: '#/definitions/ResponseBean'

  /issue/mapping:
    post:
      tags:
      - "issue-service"
      summary: "mapping"
      operationId: "mapping"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "requestParam"
        description: ""
        required: true
        schema:
          $ref: "#/definitions/IssueJSONObject"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/ResponseBean'
        401:
          description: "failed operation"
          schema:
            $ref: '#/definitions/ResponseBean'

  /issue/raw-issue:
    get:
      tags:
      - "issue-service"
      summary: "get RawIssueList by issue_id"
      operationId: "getRawIssueList"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "issue_id"
        description: " "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/RawIssueList'
        401:
          description: "failed operation"

  /commit:
    get:
      tags:
      - "commit-service"
      summary: "get the commitList by projectId"
      operationId: "getCommitList"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "projectId"
        description: " "
        required: true
        type: "string"
      response:
        200:
          descirption: "successful operation"
          schema:
            $ref: '#/definitions/CommitList'
        404:
          description: "failed operation"

  /commit/checkout/{projectId}/{commitId}:
    get:
      tags:
      - "commit-service"
      summary: "checkout the project into the certain version by projectId and commitId"
      operationId: "checkout"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "projectId"
        description: " "
        required: true
        type: "string"
      - in: "path"
        name: "commitId"
        description: " "
        required: true
        type: "string"
      response:
        200:
          descirption: "successful operation"
          schema:
            $ref: '#/definitions/ResponseBean'
        404:
          description: "failed operation"

  /commit/commit-time:
    get:
      tags:
      - "commit-service"
      summary: "get the time of commit by commitId"
      operationId: "getCommitTime"
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "commitId"
        description: " "
        required: true
        type: "string"
      response:
        200:
          descirption: "successful operation"
          schema:
            $ref: '#/definitions/CommitTime'
        404:
          description: "failed operation"



securityDefinitions:
  token:
    type: "apiKey"
    name: "token"
    in: "header"

definitions:
  User:
    type: "object"
    properties:
      uuid:
        type: "string"
      accountName:
        type: "string"
      password:
        type: "string"
      name:
        type: "string"
      email:
        type: "string"

  Project:
    type: "object"
    properties:
      uuid:
        type: "string"
      name:
        type: "string"
      language:
        type: "string"
      url:
        type: "string"
      vcs_type:
        type: "string"
      account_id:
        type: "string"
      prev_scan_commit:
        type: "string"
      download_status:
        type: "string"
      scan_status:
        type: "string"
      till_commit_time:
        type: "string"
      last_scan_time:
        type: "string"
      description:
        type: "string"
      repo_id:
        type: "string"

  Scan:
    type: "object"
    properties:
      uuid:
        type: "string"
      name:
        type: "string"
      start_time:
        type: "string"
      end_time:
        type: "string"
      status:
        type: "string"
      result_summary:
        type: "string"
      project_id:
        type: "string"
      commit_id:
        type: "string"

  ScanJSONObject:
    type: "object"
    properties:
      projectId:
        type: "string"
      commitId:
        type: "string"


  Issue:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      uuid:
        type: "string"
      type:
        type: "string"
      start_commit_time:
        type: "string"
      end_commit_time:
        type: "string"
      start_commit:
        type: "string"
      end_commit:
        type: "string"
      raw_issue_start:
        type: "string"
      raw_issue_end:
        type: "string"
      project_id:
        type: "string"
      target_files:
        type: "string"
      rawIssues:
        type: "object"

  RawIssue:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      uuid:
        type: "string"
      type:
        type: "string"
      detail:
        type: "string"
      file_name:
        type: "string"
      scan_id:
        type: "string"
      issue_id:
        type: "string"
      commit_id:
        type: "string"
      commit_time:
        type: "string"
      locations:
        type: "array"
        items:
          type: "object"

  IssueList:
    type: "array"
    items:
      $ref: "#/definitions/Issue"

  IssuesMsg:
    type: "object"
    properties:
      msg:
        type: "string"
      start:
        type: "string"
      totalPage:
        type: "string"
      issueList:
        type: "array"
        items:
          $ref: "#/definitions/IssueList"

  IssueJSONObject:
    type: "object"
    properties:
      project_id:
        type: "string"
      pre_commit_id:
        type: "string"
      current_commit_id:
        type: "string"

  RawIssueList:
    type: "array"
    items:
      $ref: "#/definitions/RawIssue"

  Commit:
    type: "object"
    properties:
      uuid:
        type: "string"
      commit_id:
        type: "string"
      message:
        type: "string"
      developer:
        type: "string"
      commit_time:
        type: "string"
      repo_id:
        type: "string"
      is_scanned:
        type: "bool"

  CommitList:
    type: "array"
    items:
      $ref: "#/definitions/Commit"

  CommitTime:
    type: "object"
    properties:
      commit_time: "string"



  ResponseBean:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      msg:
        type: "string"
      data:
        type: "object"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
