swagger: "2.0"
info:
  description: ""
  version: "1.0.0"
  title: "issueTracker"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "pyu17@fudan.edu.cn"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

tags:
  - name: "account-service"
  - name: "project-service"
  - name: "scan-service"
  - name: "issue-service"
  - name: "commit-service"
  - name: "tag-service"
  - name: "clone-service"
schemes:
  - "http"
paths:
  /user/account-name/check:
    get:
      tags:
        - "account-service"
      summary: "Check Account Name"
      operationId: "check_account_name"
      produces:
        - "application/json"
      parameters:
        - name: "accountName"
          in: "query"
          description: "The account name for register"
          required: true
          type: "string"
      responses:
        200:
          description : "succsss"
          schema:
            $ref: "#/definitions/ResponseBean"
  /user/email/check:
    get:
      tags:
        - "account-service"
      summary: "Check Email"
      operationId: "check_email"
      produces:
        - "application/json"
      parameters:
        - name: "email"
          in: "query"
          description: "The emailfor register"
          required: true
          type: "string"
      responses:
        200:
          description : "succsss"
          schema:
            $ref: "#/definitions/ResponseBean"
  /user/nick-name/check:
    get:
      tags:
        - "account-service"
      summary: "Check Nick Name"
      operationId: "check_nick_name"
      produces:
        - "application/json"
      parameters:
        - name: "nickName"
          in: "query"
          description: "The nickName for register"
          required: true
          type: "string"
      responses:
        200:
          description : "succsss"
          schema:
            $ref: "#/definitions/ResponseBean"
  /user/register:
    post:
      tags:
        - "account-service"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "account"
          description: "Created user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResponseBean"
  /user/login:
    get:
      tags:
        - "account-service"
      summary: "Logs user into the system"
      operationId: "login"
      produces:
        - "application/json"
      parameters:
        - name: "username"
          in: "query"
          description: "The user name for login"
          required: true
          type: "string"
        - name: "password"
          in: "query"
          description: "The password for login in clear text"
          required: true
          type: "string"
      responses:
        200:
          description : "succsssful login"
          schema:
            $ref: "#/definitions/ResponseBean"
        400:
          description: "failed"
          schema:
            $ref : "#/definitions/ResponseBean"
        401:
          description: "Incorrect username or password"
          schema:
            $ref : "#/definitions/ResponseBean"
  /user/auth/{userToken}:
    get:
      tags:
        - "account-service"
      summary: "Logs user into the system"
      operationId: "auth"
      produces:
        - "application/json"
      parameters:
        - name: "userToken"
          in: "path"
          description: "token of user that needs to be fetched"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResponseBean"
        400:
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/ResponseBean"
        404:
          description: "user not found"
  /user/accountId:
    get:
      tags:
        - "account-service"
      summary: "get AccountID By userToken"
      operationId: "getAccountID"
      produces:
        - "application/json"
      parameters:
        - name: "userToken"
          in: "query"
          description: "token of user for get accountID"
          required: true
          type: "string"
      responses:
        200:
          description : "succsssful"
          schema:
            type: "string"
        400:
          description: "failed"
        401:
          description: "Incorrect userToken"
  /user/accountIds:
    get:
      tags:
        - "account-service"
      summary: "get AccountIDs"
      operationId: "getAccountIds"
      produces:
        - "application/json"
      responses:
        200:
          description : "succsssful"
          schema:
            type: "array"
            items:
              type: "string"
        400:
          description: "failed"


  /project:
    post:
      tags:
        - "project-service"
      summary: "add a project"
      description: "This can only be done by logged in user"
      operationId: "addProject"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "project"
          description: "project that user want to add"
          required: true
          schema:
            $ref: "#/definitions/AddProjectJson"
        - in: "header"
          name: "token"
          description: "get userToken from Header"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResponseBean"
        400:
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/ResponseBean"
    get:
      tags:
        - "project-service"
      summary: "query Project list By userToken"
      operationId: "query"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          name: "token"
          description: "get userToken from Header"
          required: true
          type: "string"
        - in: "query"
          name: "type"
          required: true
          type: "string"
      responses:
        200:
          description : "succsssful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Project"
        400:
          description: "failed"
  /project/{projectId}:
    delete:
      tags:
        - "project-service"
      summary: "delet a project"
      description: "delet a project by projectId"
      operationId: "delete"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "projectId"
          description: "project that user want to delet"
          required: true
          type : "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResponseBean"
        401:
          description: "Invalid ID supplied"
          schema:
            $ref: "#/definitions/ResponseBean"
  /project/filter:
    get:
      tags:
        - "project-service"
      summary: "query Project list By userToken"
      operationId: "filter"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          name: "token"
          description: "get userToken from Header"
          required: true
          type: "string"
        - in: "query"
          name: "keyWord"
          required: true
          type: "string"
      responses:
        200:
          description : "succsssful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Project"
        400:
          description: "failed"
  /inner/project:
    put:
      tags:
        - "project-service"
      summary: "update Project "
      operationId: "updateProject"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "project"
          description: " message about project "
          required: true
          schema:
            $ref: '#/definitions/Project'
      responses:
        200:
          description : "succsssful"
          schema:
            $ref: "#/definitions/ResponseBean"
        401:
          description: "failed"
          schema:
            $ref: "#/definitions/ResponseBean"
    get:
      tags:
        - "project-service"
      summary: "get project by  repo_id"
      description: "get project by  repo_id"
      operationId: "get project by  repo_id"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "repo_id"
          description: "repo id"
          required: true
          type : "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
        401:
          description: "Invalid ID supplied"
  /inner/project/repo-id:
    get:
      tags:
        - "project-service"
      summary: "get Repo id"
      description: "get Repo id by project_id"
      operationId: "getRepoId"
      produces:
        - "application/json"
      parameters:
        - in: "query"
          name: "project-id"
          description: "project id"
          required: true
          type : "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
        401:
          description: "Invalid ID supplied"
  /inner/project/{project-id}:
    get:
      tags:
        - "project-service"
      summary: "get a project"
      description: "get a project by projectId"
      operationId: "getProject"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "project-id"
          description: "project that user want to get"
          required: true
          type : "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Project"
        401:
          description: "Invalid ID supplied"
  /inner/projects:
    get:
      tags:
        - "project-service"
      summary: "get  project object List by account id"
      description: "get  projectId List by account id"
      operationId: "getProjects"
      produces:
        - "application/json"
      parameters:
        - in: "query"
          name: "account_id"
          description: "account_id that user want to get"
          required: false
          type : "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Project"
        401:
          description: "Invalid ID supplied"

  /scan:
    post:
      tags:
        - "scan-service"
      summary: "Send Scan Message"
      description: " "
      operationId: "addScan"
      parameters:
        - in: "body"
          name: "requestParam"
          description: "get projectId and commitId from  JSONObject"
          required: true
          schema:
            $ref: "#/definitions/ScanJSONObject"
      produces:
        - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResponseBean"
        401:
          description: "failed operation"
          schema:
            $ref: "#/definitions/ResponseBean"
  /scan/commits:
    get:
      tags:
        - "scan-service"
      summary: "get Commits"
      description: " "
      operationId: "getCommits"
      parameters:
        - in: "query"
          name: "project_id"
          description: ""
          required: true
          type: "string"
        - in: "query"
          name: "page"
          description: ""
          type: "string"
          required: false
          default: "1"
        - in: "query"
          name: "size"
          description: ""
          type: "string"
          required: false
          default: "10"
        - in: "query"
          name: "is_whole"
          description: ""
          type: "string"
          required: false
          default: "false"
        - in: "query"
          name: "category"
          description: ""
          type: "string"
          required: true
      produces:
        - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            items:
              $ref: "#/definitions/CommitsMsg"
        401:
          description: "failed operation"
  /inner/scan:
    put:
      tags:
        - "scan-service"
      summary: "update a Scan"
      description: "update a Scan record"
      operationId: "updateScan"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "scan"
          description: "a scan object"
          required: true
          schema:
            $ref: "#/definitions/Scan"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResponseBean"
        401:
          description: "failed operation"
          schema:
            $ref: "#/definitions/ResponseBean"
    post:
      tags:
        - "scan-service"
      summary: "add one scan"
      operationId: "addscan"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "scan"
          description: "scan json object"
          required: true
          schema:
            $ref: "#/definitions/Scan"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
        401:
          description: "failed operation"
  /inner/scan/{repoId}:
    delete:
      tags:
        - "scan-service"
      summary: "delet  Scans by repoId"
      operationId: "deleteScans"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "repoId"
          description: "a repo id"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResponseBean"
        401:
          description: "failed operation"
          schema:
            $ref: "#/definitions/ResponseBean"
  /inner/scan/last-commit:
    get:
      tags:
        - "scan-service"
      summary: "get Latest Scanned CommitId"
      operationId: "getLatestScannedCommitId"
      produces:
        - "application/json"
      parameters:
        - in: "query"
          name: "repo_id"
          description: "a repo_id id"
          required: true
          type: "string"
        - in: "query"
          name: "category"
          description: "category"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
        401:
          description: "failed operation"
  /inner/scan/commits:
    get:
      tags:
        - "scan-service"
      summary: "get commits that have been scanned"
      operationId: "getScannedCommits"
      produces:
        - "application/json"
      parameters:
        - in: "query"
          name: "repo_id"
          description: "a repo id"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Scan"
        401:
          description: "failed operation"

  /issue:
    get:
      tags:
        - "issue-service"
      summary: "get Issues by project_id,page and size"
      operationId: "getIssues"
      produces:
        - "application/json"
      parameters:
        - in: "query"
          name: "project-id"
          description: "a project id"
          required: true
          type: "string"
        - in: "query"
          name: "page"
          description: " "
          required: true
          type: "string"
        - in: "query"
          name: "size"
          description: " "
          required: true
          type: "string"
        - in: "query"
          name: "category"
          description: "category"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/IssuesMsg'
        401:
          description: "failed operation"

  /issue/issue-types:
    get:
      tags:
        - "issue-service"
      summary: "get Exist IssueTypes"
      operationId: "getExistIssueTypes"
      produces:
        - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "string"
        401:
          description: "failed operation"

  /issue/filter:
    post:
      tags:
        - "issue-service"
      summary: "filter of issues"
      operationId: "filterIssues"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "requestParam"
          description: ""
          required: true
          schema:
            $ref: '#/definitions/IssueFilterRequestParam'
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties:
              totalPage:
                type: "integer"
                format: "int32"
              totalCount:
                type: "integer"
                format: "int32"
              issueList:
                items:
                  $ref: '#/definitions/IssueList'
        401:
          description: "failed operation"


  /issue/dashboard:
    get:
      tags:
        - "issue-service"
      summary: "get dashboard info "
      operationId: "getDashBoardInfo"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          name: "token"
          description: "get userToken from Header"
          required: true
          type: "string"
        - in: "query"
          name: "duration"
          required: true
          type: "string"
        - in: "query"
          name: "project_id"
          required: false
          type: "string"
      responses:
        200:
          description: "succsssful"
          schema:
            type: "object"
            properties:
              newIssueCount:
                type: "integer"
                format: "int32"
              eliminatedIssueCount:
                type: "integer"
                format: "int32"
              remainingIssueCount:
                type: "integer"
                format: "int32"
        400:
          description: "failed"

  /issue/statistical-results:
    get:
      tags:
        - "issue-service"
      summary: "get Statistical Results "
      operationId: "getStatisticalResults"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          name: "token"
          description: "get userToken from Header"
          required: true
          type: "string"
        - in: "query"
          name: "month"
          required: true
          type: "string"
        - in: "query"
          name: "project_id"
          required: false
          type: "string"
      responses:
        200:
          description: "succsssful"
          schema:
            type: "object"
            properties:
              newIssueCount:
                type: "integer"
                format: "int32"
              eliminatedIssueCount:
                type: "integer"
                format: "int32"
              remainingIssueCount:
                type: "integer"
                format: "int32"
        400:
          description: "failed"

  /inner/issue:
    post:
      tags:
        - "issue-service"
      summary: "add Issues"
      operationId: "addIssues"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "issueList"
          description: ""
          required: true
          schema:
            $ref: "#/definitions/IssueList"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/ResponseBean'
        401:
          description: "failed operation"
          schema:
            $ref: '#/definitions/ResponseBean'

    put:
      tags:
        - "issue-service"
      summary: "update Issues"
      operationId: "updateIssues"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "issueList"
          description: ""
          required: true
          schema:
            $ref: "#/definitions/IssueList"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/ResponseBean'
        401:
          description: "failed operation"
          schema:
            $ref: '#/definitions/ResponseBean'


  /inner/issue/{category}/{repoId}:
    delete:
      tags:
        - "issue-service"
      summary: "delete Issues by repoId"
      operationId: "deleteIssues"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "category"
          description: ""
          required: true
          type: "string"
        - in: "path"
          name: "repoId"
          description: ""
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/ResponseBean'
        401:
          description: "failed operation"
          schema:
            $ref: '#/definitions/ResponseBean'

  /inner/issue/mapping:
    post:
      tags:
        - "issue-service"
      summary: "mapping"
      operationId: "mapping"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "requestParam"
          description: ""
          required: true
          schema:
            $ref: "#/definitions/IssueJSONObject"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/ResponseBean'
        401:
          description: "failed operation"
          schema:
            $ref: '#/definitions/ResponseBean'

  /raw-issue:
    get:
      tags:
        - "issue-service"
      summary: "get RawIssueList by issue_id"
      operationId: "getRawIssueList"
      produces:
        - "application/json"
      parameters:
        - in: "query"
          name: "issue_id"
          description: " "
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/RawIssueList'
        401:
          description: "failed operation"

  /raw-issue/code:
    get:
      tags:
        - "issue-service"
      summary: "get LocationList by raw_issue_id"
      operationId: "getLocationList"
      produces:
        - "application/json"
      parameters:
        - in: "query"
          name: "project_id"
          description: " "
          required: true
          type: "string"
        - in: "query"
          name: "commit_id"
          description: " "
          required: true
          type: "string"
        - in: "query"
          name: "file_path"
          description: " "
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties:
              code:
                type: "string"
        401:
          description: "failed operation"

  /inner/raw-issue:
    post:
      tags:
        - "issue-service"
      summary: "add RawIssues"
      operationId: "addRawIssues"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "list"
          description: " "
          required: true
          schema:
            $ref: "#/definitions/RawIssueList"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResponseBean"
        400:
          description: "failed operation"
          schema:
            $ref: "#/definitions/ResponseBean"

    put:
      tags:
        - "issue-service"
      summary: "update RawIssues"
      operationId: "updateRawIssues"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "list"
          description: " "
          required: true
          schema:
            $ref: "#/definitions/RawIssueList"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResponseBean"
        400:
          description: "failed operation"
          schema:
            $ref: "#/definitions/ResponseBean"

  /inner/raw-issue/{category}/{repoId}:
    delete:
      tags:
        - "issue-service"
      summary: "delete RawIssues"
      operationId: "deleteRawIssue"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "category"
          description: " "
          required: true
          type: "string"
        - in: "path"
          name: "repoId"
          description: " "
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResponseBean"
        400:
          description: "failed operation"
          schema:
            $ref: "#/definitions/ResponseBean"

  /inner/raw-issue/list-by-commit:
    get:
      tags:
        - "issue-service"
      summary: "get RawIssues by commit_id"
      operationId: "getRawIssues"
      produces:
        - "application/json"
      parameters:
        - in: "query"
          name: "commit_id"
          description: " "
          required: true
          type: "string"
        - in: "query"
          name: "category"
          description: " "
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/RawIssueList'
        401:
          description: "failed operation"

  /tags/default:
    get:
      tags:
        - "tag-service"
      summary: "get all default tags"
      operationId: "getAllDefaultTags"
      produces:
        - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/TagList'
        401:
          description: "failed operation"

  /tags/{tag-id}:
    delete:
      tags:
        - "tag-service"
      summary: "delete Tag"
      operationId: "deleteTag"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "tag-id"
          description: " "
          required: true
          type: "string"
        - in: "query"
          name: "item-id"
          description: " "
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResponseBean"
        401:
          description: "failed operation"
          schema:
            $ref: "#/definitions/ResponseBean"

  /tags:
    post:
      tags:
        - "tag-service"
      summary: "add Tag"
      operationId: "addTag"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "requestBody"
          description: " "
          required: true
          schema:
            type: "object"
            properties:
              name:
                type: "string"
              scope:
                type: "string"
              itemId:
                type: "string"
              isDefault:
                type: "boolean"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResponseBean"
        401:
          description: "failed operation"
          schema:
            $ref: "#/definitions/ResponseBean"

    put:
      tags:
        - "tag-service"
      summary: "modify Tag"
      operationId: "modifyTag"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "requestBody"
          description: " "
          required: true
          schema:
            type: "object"
            properties:
              name:
                type: "string"
              scope:
                type: "string"
              itemId:
                type: "string"
              oldName:
                type: "string"
              isDefault:
                type: "boolean"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResponseBean"
        401:
          description: "failed operation"
          schema:
            $ref: "#/definitions/ResponseBean"

  /inner/tags:
    post:
      tags:
        - "tag-service"
      summary: "add multiTagged item"
      operationId: "addMultiTaggedItem"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "requestBody"
          description: " "
          required: true
          schema:
            type: "array"
            items:
              type: "object"
              properties:
                item_id:
                  type: "string"
                tag_id:
                  type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResponseBean"
        401:
          description: "failed operation"
          schema:
            $ref: "#/definitions/ResponseBean"

    get:
      tags:
        - "tag-service"
      summary: "get tags by item id"
      operationId: "getTags"
      produces:
        - "application/json"
      parameters:
        - in: "query"
          name: "item-id"
          description: " "
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/TagList'
        401:
          description: "failed operation"

    delete:
      tags:
        - "tag-service"
      summary: "delete tag by projectId"
      operationId: "deleteTagByProjectId"
      produces:
        - "application/json"
      parameters:
        - in: "query"
          name: "project-id"
          description: " "
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResponseBean"
        401:
          description: "failed operation"
          schema:
            $ref: "#/definitions/ResponseBean"

  /inner/tags/item-ids:
    post:
      tags:
        - "tag-service"
      summary: "get item ids"
      operationId: "getItemIds"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "tagIds"
          description: " "
          required: true
          schema:
            type: "array"
            items:
              type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              type: "string"
        401:
          description: "failed operation"

  /inner/tags/tagged-delete:
    post:
      tags:
        - "tag-service"
      summary: "delete Tagged"
      operationId: "deleteTagged"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "itemIds"
          description: " "
          required: true
          schema:
            type: "array"
            items:
              type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ResponseBean"
        401:
          description: "failed operation"
          schema:
            $ref: "#/definitions/ResponseBean"

  /event:
    post:
      tags:
        - event-service
      summary: "add some events"
      operationId: "addEvents"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "events"
          description: "events to add"
          required: true
          schema:
            $ref: "#/definitions/EventList"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            properties:
              code:
                type: "string"
        401:
          description: "failed operation"

  /event/current-events:
    get:
      tags:
        - event-service
      summary: "query current events list By userToken"
      operationId: "current-events"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          name: "token"
          description: "get userToken from Header"
          required: true
          type: "string"
        - in: "query"
          name: "category"
          required: true
          type: "string"
      responses:
        200:
          description : "succsssful"
          schema:
            $ref: "#/definitions/EventList"
        400:
          description: "failed"


  /commit:
    get:
      tags:
        - commit-service
      summary: get the commitList by projectId
      operationId: getCommitList
      produces:
        - application/json
      parameters:
        - in: query
          name: projectId
          description: ' '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/CommitList'
        '404':
          description: not found
          schema:
            $ref: '#/definitions/VoidResponse-Python'
        '500':
          description: failed operation
          schema:
            $ref: '#/definitions/VoidResponse-Python'

  '/commit/checkout/{projectId}/{commitId}':
    get:
      tags:
        - commit-service
      summary: checkout the project into the certain version by projectId and commitId
      operationId: checkout
      produces:
        - application/json
      parameters:
        - in: path
          name: projectId
          description: ' '
          required: true
          type: string
        - in: path
          name: commitId
          description: ' '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/VoidResponse-Python'
        '404':
          description: not found
          schema:
            $ref: '#/definitions/VoidResponse-Python'
        '500':
          description: failed operation
          schema:
            $ref: '#/definitions/VoidResponse-Python'

  /commit/commit-time:
    get:
      tags:
        - commit-service
      summary: get the time of commit by commitId
      operationId: getCommitTime
      produces:
        - application/json
      parameters:
        - in: query
          name: commitId
          description: ' '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/CommitTime'
        '404':
          description: not found
          schema:
            $ref: '#/definitions/VoidResponse-Python'
        '500':
          description: failed operation
          schema:
            $ref: '#/definitions/VoidResponse-Python'

  /clonemeasure/repository:
    get:
      tags:
        - clone-service
      summary: get the clone measure data of a repo by repoId and commitId
      operationId: getMeasureCloneData
      produces:
        - application/json
      parameters:
        - in: path
          name: projectId
          description: ' '
          required: true
          type: string
        - in: path
          name: commitId
          description: ' '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: "#/definitions/ResponseBean"
        '401':
          description: failed
          schema:
            $ref: "#/definitions/ResponseBean"
  /clonemeasure/repositoryratio:
    get:
      tags:
        - clone-service
      summary: get the clone measure ratio data of a repo by repoId and commitId
      operationId: getMeasureCloneRatio
      produces:
        - application/json
      parameters:
        - in: path
          name: projectId
          description: ' '
          required: true
          type: string
        - in: path
          name: commitId
          description: ' '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
        '401':
          description: failed
securityDefinitions:
  token:
    type: "apiKey"
    name: "token"
    in: "header"

definitions:
  User:
    type: "object"
    properties:
      accountName:
        type: "string"
      password:
        type: "string"
      name:
        type: "string"
      email:
        type: "string"

  AddProjectJson:
    type: "object"
    properties:
      url:
        type: "string"
      name:
        type: "string"
      type:
        type: "string"


  Project:
    type: "object"
    properties:
      uuid:
        type: "string"
      name:
        type: "string"
      language:
        type: "string"
      url:
        type: "string"
      vcs_type:
        type: "string"
      account_id:
        type: "string"
      prev_scan_commit:
        type: "string"
      download_status:
        type: "string"
      scan_status:
        type: "string"
      till_commit_time:
        type: "string"
      last_scan_time:
        type: "string"
      description:
        type: "string"
      repo_id:
        type: "string"

  Scan:
    type: "object"
    properties:
      uuid:
        type: "string"
      name:
        type: "string"
      start_time:
        type: "string"
      end_time:
        type: "string"
      status:
        type: "string"
      result_summary:
        type: "string"
      project_id:
        type: "string"
      commit_id:
        type: "string"

  ScanJSONObject:
    type: "object"
    properties:
      category:
        type: "string"
      projectId:
        type: "string"
      commitId:
        type: "string"

  CommitsMsg:
    type: "object"
    properties:
      totalCount:
        type: "integer"
        format: "int32"
      commitList:
        type: "array"
        items:
          type: "object"
          properties:
            data:
              type: "object"
              properties:
                uuid:
                  type: "string"
                commit_id:
                  type: "string"
                message:
                  type: "string"
                developer:
                  type: "string"
                commit_time:
                  type: "string"
                repo_id:
                  type: "string"
                is_scanned:
                  type: "boolean"
            isScanned:
              type: "boolean"

  IssueFilterRequestParam:
    type: "object"
    properties:
      project_id:
        type: "string"
      size:
        type: "integer"
        format: "int32"
      page:
        type: "integer"
        format: "int32"
      tags:
        type: "array"
        items:
          type: "string"
      types:
        type: "array"
        items:
          type: "string"

  Issue:
    type: "object"
    properties:
      uuid:
        type: "string"
      type:
        type: "string"
      start_commit:
        type: "string"
      end_commit:
        type: "string"
      raw_issue_start:
        type: "string"
      raw_issue_end:
        type: "string"
      project_id:
        type: "string"
      target_files:
        type: "string"
      issueType:
        type: "object"
      tags:
        type: "array"
        items:
          type: "object"

  RawIssue:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      uuid:
        type: "string"
      type:
        type: "string"
      detail:
        type: "string"
      file_name:
        type: "string"
      scan_id:
        type: "string"
      issue_id:
        type: "string"
      commit_id:
        type: "string"
      commit_time:
        type: "string"
      locations:
        type: "array"
        items:
          type: "object"

  IssueList:
    type: "array"
    items:
      $ref: "#/definitions/Issue"

  IssuesMsg:
    type: "object"
    properties:
      start:
        type: "string"
      totalPage:
        type: "string"
      totalCount:
        type: "string"
      issueList:
        type: "array"
        items:
          $ref: "#/definitions/IssueList"

  IssueJSONObject:
    type: "object"
    properties:
      repo_id:
        type: "string"
      pre_commit_id:
        type: "string"
      current_commit_id:
        type: "string"
      category:
        type: "string"

  EventObject:
    type: "object"
    properties:
      id:
        type: "string"
      eventType:
        type: "string"
      targetType:
        type: "string"
      targetId:
        type: "string"
      targetCommitter:
        type: "string"
      repoId:
        type: "string"
      createTime:
        type: "string"

  RawIssueList:
    type: "array"
    items:
      $ref: "#/definitions/RawIssue"

  EventList:
    type: "array"
    items:
      $ref: "#/definitions/EventObject"


  LocationList:
    type: "array"
    items:
      $ref: "#/definitions/Location"

  Location:
    type: "object"
    properties:
      uuid:
        type: "string"
      start_line:
        type: "integer"
        format: "int32"
      end_line:
        type: "integer"
        format: "int32"
      bug_lines:
        type: "string"
      file_path:
        type: "string"
      class_name:
        type: "string"
      method_name:
        type: "string"
      rawIssue_id:
        type: "string"
      code:
        type: "string"


  Commit:
    type: "object"
    properties:
      data:
        type: "object"
        properties:
          uuid:
            type: "string"
          commit_id:
            type: "string"
          message:
            type: "string"
          developer:
            type: "string"
          commit_time:
            type: "string"
          repo_id:
            type: "string"
          is_scanned:
            type: "boolean"

  CommitList:
    type: "array"
    items:
      $ref: "#/definitions/Commit"

  CommitTime:
    type: "object"
    properties:
      data:
        type: "object"
        properties:
          status:
            type: "string"
          commit_time:
            type: "string"

  TagList:
    type: "array"
    items:
      $ref: "#/definitions/Tag"

  Tag:
    type: "object"
    properties:
      uuid:
        type: "string"
      name:
        type: "string"
      scope:
        type: "string"
      color:
        type: "string"
      icon:
        type: "string"



  ResponseBean:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      msg:
        type: "string"
      data:
        type: "object"

  VoidResponse-Python:
    type: object
    properties:
      status:
        type: string
      message:
        type: string

externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
