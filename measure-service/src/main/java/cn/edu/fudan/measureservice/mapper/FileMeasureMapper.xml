<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.fudan.measureservice.mapper.FileMeasureMapper">

    <resultMap id="fileMeasure" type="FileMeasure">
        <id property="uuid" column="uuid"/>
        <result property="repoUuid" column="repo_id"/>
        <result property="commitId" column="commit_id"/>
        <result property="commitTime" column="commit_time"/>
        <result property="filePath" column="file_path"/>
        <result property="ccn" column="ccn"/>
        <result property="addLine" column="add_lines"/>
        <result property="deleteLine" column="del_lines"/>
        <result property="totalLine" column="total_lines"/>
        <result property="diffCcn" column="diff_ccn"/>
        <result property="absoluteLine" column="absolute_lines"/>
    </resultMap>

    <insert id="insertOneFileMeasure" >
        insert into file_measure
            (
               uuid,
               repo_id,
               commit_id,
               commit_time,
               file_path,
               diff_ccn,
               ccn,
               add_lines,
               del_lines,
               total_lines
            )
        values
           (
              #{uuid},
              #{repoUuid},
              #{commitId},
              #{commitTime},
              #{filePath},
              #{diffCcn},
              #{ccn},
              #{addLine},
              #{deleteLine},
              #{totalLine}
           )
    </insert>

    <select id="getDevHistoryCommitInfo" parameterType="String" resultType="java.util.HashMap">
        SELECT
            commit_id,commit_time,developer_name,commit_message,first_parent_commit_id,second_parent_commit_id
        FROM
            repo_measure
        WHERE
            repo_id = #{repo_id}
            and
            DATE(commit_time) BETWEEN #{since} AND #{until}
        ORDER BY
            commit_time
    </select>

    <select id="getCcnByCommitIdAndFilePath" parameterType="String" resultType="Integer">
        SELECT
            ccn
        FROM
            file_measure
        WHERE
            commit_id = #{commit_id}
            and
            file_path = #{file_path}
    </select>

    <select id="getDevHistoryFileInfo" parameterType="String" resultType="java.util.HashMap">
        SELECT
            file_path, commit_id, ccn, diff_ccn, add_lines, del_lines
        FROM
            issueTracker.file_measure
        WHERE
            commit_id = #{commit_id}
    </select>

    <insert id="insertFileMeasureList">
        insert into issueTracker.file_measure
        (
        uuid,
        repo_id,
        commit_id,
        commit_time,
        file_path,
        diff_ccn,
        ccn,
        add_lines,
        del_lines,
        total_lines,
        absolute_lines
        )
        VALUES
        <foreach collection="fileMeasureList" item="item" index="index" separator=",">
            (
            #{item.uuid},
            #{item.repoUuid},
            #{item.commitId},
            #{item.commitTime},
            #{item.filePath},
            #{item.diffCcn},
            #{item.ccn},
            #{item.addLine},
            #{item.deleteLine},
            #{item.totalLine},
            #{item.absoluteLine}
            )
        </foreach>
    </insert>

    <select id="sameFileMeasureOfOneCommit" resultType="int">
        select count(*) from issueTracker.file_measure
        where
        repo_id = #{repo_id}
        and commit_id = #{commit_id}
    </select>

    <select id="getCurrentFileInfoByRepoUuidList" resultType="java.util.Map">
        SELECT file_path,absolute_lines, repo_id,max(commit_time) as currentModifyTime   FROM issueTracker.file_measure
        <where>
            <trim prefixOverrides="and">
                <if test="repoUuidList != null and repoUuidList.size >0 ">
                    and repo_id in
                    <foreach collection="repoUuidList" separator="," open="(" close=")" item="repoUuid">
                        #{repoUuid}
                    </foreach>
                </if>

                <if test="until != null and until != '' ">
                    and <![CDATA[ commit_time <= #{until} ]]>
                </if>

                and absolute_lines >= 1000
            </trim>
        </where>
        GROUP BY
            file_path
        ORDER BY
            commit_time desc
    </select>

    <select id="getDeveloperDiffCcn" resultType="int">
        SELECT sum(f.diff_ccn)
        FROM issueTracker.file_measure AS f INNER JOIN issueTracker.commit_view AS c on c.commit_id = f.commit_id
        <where>
            <trim prefixOverrides="and">

                <if test="repoUuid != null and repoUuid != '' ">
                    and f.repo_id = #{repoUuid}
                </if>

                <if test="developer != null and developer != '' ">
                    and c.developer_unique_name = #{developer}
                </if>

                <if test="since != null and since != '' ">
                    and <![CDATA[ f.commit_time >= #{since} ]]>
                </if>

                <if test="until != null and until != '' ">
                    and <![CDATA[ f.commit_time <= #{until} ]]>
                </if>

            </trim>
        </where>

    </select>

    <select id="getFileMeasureMsgNumByRepo" resultType="int">
        SELECT IFNULL(count(uuid),0) FROM issueTracker.file_measure
        <where>
            <trim prefixOverrides="and">

                <if test="repoUuid != null and repoUuid != '' ">
                    and repo_id = #{repoUuid}
                </if>

            </trim>
        </where>
    </select>

    <delete id="deleteFileMeasureMsg">
        DELETE FROM issueTracker.file_measure
        WHERE repo_id = #{repoUuid}
        LIMIT 500
    </delete>

</mapper>