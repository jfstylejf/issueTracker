<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.fudan.measureservice.mapper.ProjectMapper">


    <resultMap id="developerLevel" type="DeveloperLevel">
        <id property="developerName" column="developer_unique_name" />
        <result property="efficiency" column="efficiency" />
        <result property="quality" column="quality" />
        <result property="contribution" column="contribution" />
        <result property="totalLevel" column="total_level" />
        <result property="involvedRepoCount" column="involved_repo_count" />
        <result property="dutyType" column="duty_type" />
    </resultMap>

    <insert id="insertDeveloperLevel" parameterType="DeveloperLevel">
        insert into issueTracker.developer_level (
            developer_unique_name,
            efficiency,
            contribution,
            quality,
            total_level,
            involved_repo_count,
            duty_type
        )
        values
        (
             #{developerName},
             #{efficiency},
             #{contribution},
             #{quality},
             #{totalLevel},
             #{involvedRepoCount},
             #{dutyType}
        )
        ON DUPLICATE KEY UPDATE
            efficiency = #{efficiency},
            contribution = #{contribution},
            quality = #{quality},
            total_level = #{totalLevel},
            involved_repo_count = #{involvedRepoCount},
            duty_type = #{dutyType}
    </insert>

    <select id="getDeveloperLevelList" resultMap="developerLevel">
        SELECT developer_unique_name, efficiency, quality, contribution, total_level, involved_repo_count, duty_type FROM issueTracker.developer_level
        <where>
            <if test="developerList!=null and developerList.size>0">
                developer_unique_name in
                <foreach collection="developerList" separator="," open="(" close=")" item="developer">
                    #{developer}
                </foreach>
            </if>
        </where>
    </select>

    <select id="getDeveloperList"  resultType="String">
        SELECT DISTINCT developer_unique_name FROM issueTracker.commit_view
        <where>
            <trim prefixOverrides="and">
                <if test="repoUuidList != null and repoUuidList.size > 0">
                    and repo_uuid in
                    <foreach collection="repoUuidList" separator="," open="(" close=")" item="repoUuid">
                        #{repoUuid}
                    </foreach>
                </if>

                <if test="since != null and since != '' ">
                    and <![CDATA[ commit_time >= #{since} ]]>
                </if>

                <if test="until != null and until != '' ">
                    and <![CDATA[ commit_time <= #{until} ]]>
                </if>
            </trim>
        </where>
    </select>

    <select id="getDeveloperRepoInfoList" resultType="java.util.HashMap">
        SELECT developer_unique_name,repo_uuid,SUBSTRING(min(commit_time),1,10) AS firstCommitDate FROM issueTracker.commit_view
        <where>
            <trim prefixOverrides="and">
                <if test="repoUuid != null and repoUuid !='' ">
                    and repo_uuid = #{repoUuid}
                </if>

                <if test="since != null and since != '' ">
                    and <![CDATA[ commit_time >= #{since} ]]>
                </if>

                <if test="until != null and until != '' ">
                    and <![CDATA[ commit_time <= #{until} ]]>
                </if>
            </trim>
        </where>
        Group By developer_unique_name
    </select>

    <select id="getDeveloperFirstCommitDate" resultType="java.util.HashMap" >
        SELECT developer_unique_name,SUBSTRING(min(commit_time),1,10) AS firstCommitDate FROM issueTracker.commit_view
        <where>
            <trim prefixOverrides="and">
                <if test="repoUuid != null and repoUuid !='' ">
                    and repo_uuid = #{repoUuid}
                </if>

                <if test="since != null and since != '' ">
                    and <![CDATA[ commit_time >= #{since} ]]>
                </if>

                <if test="until != null and until != '' ">
                    and <![CDATA[ commit_time <= #{until} ]]>
                </if>
                and developer_unique_name = #{developer}
            </trim>
        </where>
    </select>

    <select id="getDeveloperDutyTypeList" resultType="java.util.HashMap">
        SELECT distinct account_name,account_status FROM issueTracker.account
    </select>

    <select id="getDeveloperRepoList" parameterType="String" resultType="String">
        SELECT
        DISTINCT (repo_uuid)
        FROM
        issueTracker.commit_view
        <where>
            <trim prefixOverrides="and">
                <if test="developer != null and developer != '' ">
                    and developer_unique_name = #{developer}
                </if>

                <if test="since != null and since != '' ">
                    and <![CDATA[ commit_time >= #{since} ]]>
                </if>

                <if test="until != null and until != '' ">
                    and <![CDATA[ commit_time <= #{until} ]]>
                </if>
            </trim>
            and repo_uuid in (SELECT distinct repo_uuid FROM sub_repository)
        </where>

    </select>

    <select id="getProjectInfo" resultType="java.util.HashMap">
        SELECT distinct(p.repo_uuid),project_name FROM issueTracker.sub_repository as p inner join issueTracker.commit_view as c
        WHERE p.repo_uuid = c.repo_uuid
        AND c.developer_unique_name = #{developer}
    </select>

    <select id="getRepoName" resultType="String">
        SELECT repo_name  FROM issueTracker.sub_repository
        WHERE repo_uuid = #{repoUuid}
    </select>

    <select id="getProjectName" resultType="String">
        SELECT project_name FROM issueTracker.sub_repository
        WHERE repo_uuid = #{repoUuid}
    </select>

    <select id="getValidCommitMsg" resultType="java.util.HashMap">
        SELECT developer_unique_name,left(commit_time,10) as commit_time,commit_id,message
        from issueTracker.commit_view
        <where>
            <trim prefixOverrides="and">
                <if test="developer != null and developer != '' ">
                    and developer_unique_name = #{developer}
                </if>

                <if test="repoUuidList != null and repoUuidList.size >0 ">
                    and repo_uuid in
                    <foreach collection="repoUuidList" separator="," open="(" close=")" item="repoUuid">
                        #{repoUuid}
                    </foreach>
                </if>

                <if test="since != null and since != '' ">
                    and <![CDATA[ commit_time >= #{since} ]]>
                </if>

                <if test="until != null and until != '' ">
                    and <![CDATA[ commit_time <= #{until} ]]>
                </if>
                and message NOT LIKE '%Merge%'
            </trim>
        </where>
        ORDER By commit_time desc
    </select>

    <select id="getDeveloperRankByCommitCount" parameterType="String" resultType="java.util.HashMap">
        SELECT
            developer_unique_name AS developer_name,
            COUNT(uuid) AS counts
        FROM
            issueTracker.commit_view
        <where>
            <trim prefixOverrides="and">

                <if test="repoUuidList != null and repoUuidList.size >0 ">
                    and repo_uuid in
                    <foreach collection="repoUuidList" separator="," open="(" close=")" item="repoUuid">
                        #{repoUuid}
                    </foreach>
                </if>

                <if test="since != null and since != '' ">
                    and <![CDATA[ commit_time >= #{since} ]]>
                </if>

                <if test="until != null and until != '' ">
                    and <![CDATA[ commit_time <= #{until} ]]>
                </if>

            </trim>
        </where>
        GROUP BY
            developer_unique_name
        ORDER BY
            counts DESC

        LIMIT 3;
    </select>

    <select id="getDeveloperCommitCountsByDuration" resultType="int">
        select
        COUNT(uuid) as commit_counts
        from issueTracker.commit_view
        <where>
            <trim prefixOverrides="and">
                <if test="developer != null and developer != '' ">
                    and developer_unique_name = #{developer}
                </if>

                <if test="repoUuidList != null and repoUuidList.size >0 ">
                    and repo_uuid in
                    <foreach collection="repoUuidList" separator="," open="(" close=")" item="repoUuid">
                        #{repoUuid}
                    </foreach>
                </if>

                <if test="since != null and since != '' ">
                    and <![CDATA[ commit_time >= #{since} ]]>
                </if>

                <if test="until != null and until != '' ">
                    and <![CDATA[ commit_time <= #{until} ]]>
                </if>
            </trim>
        </where>
    </select>

    <select id="getProjectByAccountId" resultType="String">
        SELECT project_name
        FROM issueTracker.account_project AS p
        WHERE p.account_uuid = #{account_uuid} AND p.account_role = 'LEADER'
    </select>

    <delete id="deleteRepoMsg">
        DELETE FROM issueTracker.repo_measure
        WHERE repo_id in
        <foreach collection="repoUuidList" separator="," open="(" close=")" item="repoUuid">
            #{repoUuid}
        </foreach>
        LIMIT 5000
    </delete>

    <select id="getRepoLanguage" resultType="String">
        SELECT language FROM issueTracker.sub_repository
        WHERE repo_uuid = #{repoUuid}
    </select>

    <select id="getProjectNameById" resultType="java.util.HashMap">
        SELECT project_name, id FROM issueTracker.project
        <where>
            <if test="projectIdList != null and projectIdList.size >0">
                id in
                <foreach collection="projectIdList" separator="," open="(" close=")" item="projectId">
                    #{projectId}
                </foreach>
            </if>
        </where>
    </select>

</mapper>