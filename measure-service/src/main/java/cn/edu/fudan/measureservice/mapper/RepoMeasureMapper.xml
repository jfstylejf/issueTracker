<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.fudan.measureservice.mapper.RepoMeasureMapper">

    <resultMap id="repoMeasure" type="RepoMeasure">
        <id property="uuid" column="uuid"/>
        <result property="files" column="files"/>
        <result property="ncss" column="ncss"/>
        <result property="classes" column="classes"/>
        <result property="functions" column="functions"/>
        <result property="ccn" column="ccn"/>
        <result property="java_docs" column="java_docs"/>
        <result property="java_doc_lines" column="java_doc_lines"/>
        <result property="single_comment_lines" column="single_comment_lines"/>
        <result property="multi_comment_lines" column="multi_comment_lines"/>
        <result property="developer_name" column="developer_name"/>
        <result property="developer_email" column="developer_email"/>
        <result property="add_lines" column="add_lines"/>
        <result property="del_lines" column="del_lines"/>
        <result property="add_comment_lines" column="add_comment_lines"/>
        <result property="del_comment_lines" column="del_comment_lines"/>
        <result property="changed_files" column="changed_files"/>
        <result property="is_merge" column="is_merge"/>
        <result property="commit_message" column="commit_message"/>
        <result property="first_parent_commit_id" column="first_parent_commit_id"/>
        <result property="second_parent_commit_id" column="second_parent_commit_id"/>
        <result property="absoluteLines" column="absolute_lines"/>
        <result property="is_compliance" column="is_compliance"/>
    </resultMap>

    <resultMap id="repoMeasureWithDate" type="RepoMeasure">
        <id property="uuid" column="uuid"/>
        <result property="files" column="files"/>
        <result property="ncss" column="ncss"/>
        <result property="classes" column="classes"/>
        <result property="functions" column="functions"/>
        <result property="ccn" column="ccn"/>
        <result property="java_docs" column="java_docs"/>
        <result property="java_doc_lines" column="java_doc_lines"/>
        <result property="single_comment_lines" column="single_comment_lines"/>
        <result property="multi_comment_lines" column="multi_comment_lines"/>
        <result property="commit_id" column="commit_id"/>
        <result property="commit_time" column="commit_time"/>
        <result property="repo_id" column="repo_id"/>
        <result property="developer_name" column="developer_name"/>
        <result property="developer_email" column="developer_email"/>
        <result property="add_lines" column="add_lines"/>
        <result property="del_lines" column="del_lines"/>
        <result property="add_comment_lines" column="add_comment_lines"/>
        <result property="del_comment_lines" column="del_comment_lines"/>
        <result property="changed_files" column="changed_files"/>
        <result property="is_merge" column="is_merge"/>
        <result property="commit_message" column="commit_message"/>
        <result property="first_parent_commit_id" column="first_parent_commit_id"/>
        <result property="second_parent_commit_id" column="second_parent_commit_id"/>
    </resultMap>

<!--    getCommitBaseByCommit-->
    <resultMap id="commitBase" type="CommitBase">
        <result property="addLines" column="add_lines"/>
        <result property="delLines" column="del_lines"/>
        <collection property="authors" ofType="Developer">
            <result property="name" column="developer_name"/>
            <result property="email" column="developer_email"/>
        </collection>
    </resultMap>

    <!--    getCommitInfoDeveloperListByDuration-->
    <resultMap id="CommitInfoDeveloperListByDuration" type="CommitInfoDeveloper">
        <result property="author" column="developer_name"/>
        <result property="email" column="developer_email"/>
        <result property="commit_counts" column="commit_counts"/>
        <result property="add" column="sumAdd"/>
        <result property="del" column="sumDel"/>
        <result property="changed_files" column="sumChangedFiles"/>
    </resultMap>


    <resultMap id="Commit" type="Commit">
        <id property="uuid" column="uuid"/>
        <result property="commit_id" column="commit_id"/>
        <result property="message" column="message"/>
        <result property="developer" column="developer"/>
        <result property="commit_time" column="commit_time"/>
        <result property="repo_id" column="repo_id"/>
        <result property="developer_email" column="developer_email"/>
        <result property="self_index" column="self_index"/>
    </resultMap>


    <resultMap id="repoTagMetric" type="RepoTagMetric">
        <result property="tag" column="tag"/>
        <result property="repoUuid" column="repo_uuid"/>
        <result property="updateTime" column="update_time"/>
        <result property="updater" column="updater"/>
        <result property="bestMax" column="best_max"/>
        <result property="bestMin" column="best_min"/>
        <result property="betterMax" column="better_max"/>
        <result property="betterMin" column="better_min"/>
        <result property="normalMax" column="normal_max"/>
        <result property="normalMin" column="normal_min"/>
        <result property="worseMax" column="worse_max"/>
        <result property="worseMin" column="worse_min"/>
        <result property="worstMax" column="worst_max"/>
        <result property="worstMin" column="worst_min"/>
    </resultMap>

    <insert id="insertOneRepoMeasure" >
        insert into issueTracker.repo_measure
            (
               uuid,
               files,
               ncss,
               classes,
               functions,
               ccn,
               java_docs,
               java_doc_lines,
               single_comment_lines,
               multi_comment_lines,
               commit_id,
               commit_time,
               repo_id,
               developer_name,
               developer_email,
               add_lines,
               del_lines,
               add_comment_lines,
               del_comment_lines,
               changed_files,
               is_merge,
               commit_message,
               first_parent_commit_id,
               second_parent_commit_id,
               absolute_lines,
               is_compliance
            )
        values
           (
              #{uuid},
              #{files},
              #{ncss},
              #{classes},
              #{functions},
              #{ccn},
              #{java_docs},
              #{java_doc_lines},
              #{single_comment_lines},
              #{multi_comment_lines},
              #{commit_id},
              #{commit_time},
              #{repo_id},
              #{developer_name},
              #{developer_email},
              #{add_lines},
              #{del_lines},
              #{add_comment_lines},
              #{del_comment_lines},
              #{changed_files},
              #{is_merge},
              #{commit_message},
              #{first_parent_commit_id},
              #{second_parent_commit_id},
              #{absoluteLines},
              #{is_compliance}
           )
    </insert>

    <select id="containCommitIdOrNot" resultType="int">
        select count(uuid) from issueTracker.repo_measure
        where  commit_id = #{commit_id}
    </select>

    <select id="getRepoMeasureByCommit" resultMap="repoMeasure">
        select
            *
        from repo_measure where repo_id = #{repo_id} and commit_id = #{commit_id}
    </select>

    <select id="getCommitBaseInformation" resultMap="commitBase">
        select
            developer_name,developer_email,add_lines,del_lines
        from repo_measure where repo_id = #{repo_id} and commit_id = #{commit_id}
    </select>

    <select id="getCommitInfoDeveloperListByDuration" resultMap="CommitInfoDeveloperListByDuration">
        select
            developer_name,developer_email,SUM(add_lines) as sumAdd, SUM(del_lines) as sumDel, COUNT(*) as commit_counts, SUM(changed_files) as sumChangedFiles
        from repo_measure
        where
         repo_id = #{repo_id} and DATE(commit_time) BETWEEN #{since} AND #{until}
        <if test="developer_name != null and developer_name != ''" >
            and developer_name = #{developer_name}
        </if>
        GROUP BY developer_name
        order by developer_name collate utf8mb4_bin
    </select>

    <select id="getStartDateOfRepo" resultType="String">
        select commit_time from repo_measure where repo_id = #{repo_id} ORDER BY commit_time LIMIT 1;
    </select>

    <select id="getAddLinesByDuration" resultType="Integer">
        select IFNULL(SUM(add_lines),0) from repo_measure where repo_id = #{repo_id} and DATE(commit_time) BETWEEN #{since} AND #{until}
        <if test="developer_name != null and developer_name != ''" >
            and developer_name = #{developer_name}
        </if>
    </select>

    <select id="getDelLinesByDuration" resultType="Integer">
        select IFNULL(SUM(del_lines),0) from repo_measure where repo_id = #{repo_id} and DATE(commit_time) BETWEEN #{since} AND #{until}
        <if test="developer_name != null and developer_name != ''" >
            and developer_name = #{developer_name}
        </if>
    </select>

    <select id="getCommitCountsByDuration" resultType="int">
        select
             COUNT(*) as commit_counts
        from issueTracker.commit_view
        <where>
            <trim prefixOverrides="and">
                <if test="developer_name != null and developer_name != '' ">
                    and developer_unique_name = #{developer_name}
                </if>

                <if test="repo_id != null and repo_id != '' ">
                    and repo_uuid = #{repo_id}
                </if>

                <if test="since != null and since != '' ">
                    and <![CDATA[ commit_time >= #{since} ]]>
                </if>

                <if test="until != null and until != '' ">
                    and <![CDATA[ commit_time <= #{until} ]]>
                </if>
            </trim>
        </where>
    </select>


    <select id="getDeveloperValidCommitCount" resultType="int">
        SELECT count(*) FROM issueTracker.commit_view
        <where>
            <trim prefixOverrides="and">
                <if test="developer_name != null and developer_name != '' ">
                    and developer_unique_name = #{developer_name}
                </if>

                <if test="repoUuid != null and repoUuid != '' ">
                    and repo_uuid = #{repoUuid}
                </if>

                <if test="since != null and since != '' ">
                    and <![CDATA[ commit_time >= #{since} ]]>
                </if>

                <if test="until != null and until != '' ">
                    and <![CDATA[ commit_time <= #{until} ]]>
                </if>
                and message NOT LIKE '%Merge%'
            </trim>
        </where>
    </select>

    <select id="getJiraCountByCondition" resultType="int">
        select
        COUNT(*)
        from jira_history
        <where>
            <trim prefixOverrides="and">
                <if test="developer_name != null and developer_name != '' ">
                    and unique_name = #{developer_name}
                </if>

                <if test="repoUuidList != null and repoUuidList.size >0 ">
                    and repo_id in
                    <foreach collection="repoUuidList" separator="," open="(" close=")" item="repoUuid">
                        #{repoUuid}
                    </foreach>
                </if>

                <if test="since != null and since != '' ">
                    and <![CDATA[ commit_time >= #{since} ]]>
                </if>

                <if test="until != null and until != '' ">
                    and <![CDATA[ commit_time <= #{until} ]]>
                </if>
            </trim>
        </where>
    </select>

    <select id="getChangedFilesByDuration" resultType="int">
        select
        IFNULL(SUM(changed_files),0)
        from repo_measure where repo_id = #{repo_id} and DATE(commit_time) BETWEEN #{since} AND #{until}
        <if test="developer_name != null and developer_name != ''" >
            and developer_name = #{developer_name}
        </if>
    </select>

    <select id="getLatestMeasureData" resultMap="repoMeasure">
        select
            *
        from
            repo_measure
        where
            repo_id = #{repo_id}
        order by commit_time desc
        limit 1
    </select>

    <select id="getFirstMeasureDataAfterDuration" resultMap="repoMeasure">
         select
            *
        from
            repo_measure
        where
            repo_id = #{repo_id}   and  commit_time  &lt; #{time_line}
        order by commit_time desc
        limit 1
    </select>

    <select id="getRepoMeasureBetween" resultMap="repoMeasureWithDate">
        select * from repo_measure
        where repo_id = #{repo_id}
        <if test="since != null and since != '' ">
            and <![CDATA[ commit_time >= #{since} ]]>
        </if>
        and commit_time &lt; #{until}
        order by commit_time;
    </select>

    <delete id="delRepoMeasureByrepoUuid" parameterType="String">
        delete from repo_measure
        where repo_id = #{repo_id} ;
    </delete>

    <delete id="delFileMeasureByrepoUuid" parameterType="String">
        delete from file_measure
        where repo_id = #{repo_id} ;
    </delete>

    <select id="getRepoMeasureByDeveloperAndrepoUuid"  resultMap="repoMeasureWithDate">
        select
            *
        from
            repo_measure
        <where>
            <trim prefixOverrides="and">
                <if test="developer_name != null and developer_name != '' ">
                    and developer_name = #{developer_name}
                </if>

                <if test="repo_id != null and repo_id != '' ">
                    and repo_id = #{repo_id}
                </if>

                <if test="since != null and since != '' ">
                    and <![CDATA[ commit_time >= #{since} ]]>
                </if>

                <if test="until != null and until != '' ">
                    and <![CDATA[ commit_time <= #{until} ]]>
                </if>
            </trim>
        </where>
        group by commit_id
        order by commit_time desc
    </select>

    <select id="getCommits" parameterType="String" resultMap="Commit">
        select * from commit where repo_id= #{repo_id} order by commit_time desc limit 0,58;
    </select>


    <select id="getRepoLOCByDuration" resultType="int">
        select
        IFNULL(SUM( add_lines ) + SUM( del_lines ),0)
        from repo_measure where repo_id = #{repo_id} and DATE(commit_time) BETWEEN #{since} AND #{until}
        <if test="developer_name != null and developer_name != ''" >
            and developer_name = #{developer_name}
        </if>
    </select>

    <select id="getDeveloperListByrepoUuidList" resultType="java.util.HashMap">
        SELECT
            developer_name
        FROM
            repo_measure
        <where>
            <trim prefixOverrides="and">
                <if test="repoUuidList != null and repoUuidList.size > 0">
                    and repo_id in
                    <foreach collection="repoUuidList" separator="," open="(" close=")" item="repo_id">
                        #{repo_id}
                    </foreach>
                </if>
            </trim>
        </where>
        GROUP BY
            developer_name
        ORDER BY
            developer_name
    </select>

    <select id="getDeveloperDutyTypeListByrepoUuid" parameterType="String" resultType="java.util.HashMap">
        SELECT DISTINCT a.account_name as accountName , a.account_status
        FROM issueTracker.account as a
        WHERE
        a.account_name IN
        (SELECT DISTINCT developer_unique_name FROM issueTracker.commit_view
        <where>
            <if test="repoUuidList != null and repoUuidList.size > 0">
               and repo_uuid in
                <foreach collection="repoUuidList" separator="," open="(" close=")" item="repo_id">
                    #{repo_id}
                </foreach>
            </if>
        </where>
        )
    </select>

    <select id="getLastCommitId" parameterType="String" resultType="String">
        SELECT
            first_parent_commit_id
        FROM
            repo_measure
        WHERE
            commit_id = #{commit_id}
    </select>

    <select id="getLastScannedCommitId" parameterType="String" resultType="String">
        SELECT
            commit_id
        FROM
            issueTracker.repo_measure
        WHERE
            repo_id = #{repo_id}
        ORDER BY
            commit_time DESC
        LIMIT 1;
    </select>


    <select id="getLOCByCondition" parameterType="String" resultType="int">
        SELECT
            IFNULL(SUM( add_lines ) + SUM( del_lines ),0)
        FROM
            repo_measure
        <where>
            <trim prefixOverrides="and">
                <if test="developer_name != null and developer_name != '' ">
                    and developer_name = #{developer_name}
                </if>

                <if test="repo_id != null and repo_id != '' ">
                    and repo_id = #{repo_id}
                </if>

                <if test="since != null and since != '' ">
                    and <![CDATA[ commit_time >= #{since} ]]>
                </if>

                <if test="until != null and until != '' ">
                    and <![CDATA[ commit_time <= #{until} ]]>
                </if>
            </trim>
        </where>
    </select>


    <select id="getRepoListByDeveloper" parameterType="String" resultType="String">
        SELECT
            DISTINCT (repo_uuid)
        FROM
            issueTracker.commit_view
        <where>
            <trim prefixOverrides="and">
                <if test="developer_name != null and developer_name != '' ">
                    and developer_unique_name = #{developer_name}
                </if>

                <if test="since != null and since != '' ">
                    and <![CDATA[ commit_time >= #{since} ]]>
                </if>

                <if test="until != null and until != '' ">
                    and <![CDATA[ commit_time <= #{until} ]]>
                </if>
            </trim>
            and repo_uuid in (SELECT distinct repo_uuid FROM sub_repository)
        </where>

    </select>


    <select id="getLastCommitDateOfOneRepo" parameterType="String" resultType="String">
        select commit_date from scan_result
        <where>
            <trim prefixOverrides="and">
                <if test="repo_id != null and repo_id != '' ">
                    and repo_id = #{repo_id}
                </if>

                <if test="developer != null and developer != '' ">
                    and developer = #{developer}
                </if>
            </trim>
        </where>
        order by commit_date desc
        limit 1
    </select>

    <select id="getCommitMsgByCondition" parameterType="String" resultType="java.util.HashMap">
        SELECT
        developer_unique_name,repo_uuid,commit_id,commit_time,message
        FROM
        issueTracker.commit_view
        <where>
            <trim prefixOverrides="and">
                <if test="developer_name != null and developer_name != '' ">
                    and developer_unique_name = #{developer_name}
                </if>

                <if test="repo_id != null and repo_id != '' ">
                    and repo_uuid = #{repo_id}
                </if>

                <if test="since != null and since != '' ">
                    and <![CDATA[ commit_time >= #{since} ]]>
                </if>

                <if test="until != null and until != '' ">
                    and <![CDATA[ commit_time <= #{until} ]]>
                </if>
            </trim>
        </where>
        ORDER BY commit_time DESC
    </select>


    <select id="getRepoAge"  resultType="int">
        select IFNULL( MAX( DATEDIFF(now(),commit_time) ), 0 ) as repoAge
        FROM
        issueTracker.repo_measure
        <where>
            <trim prefixOverrides="and">
                <if test="repo_id != null and repo_id != '' ">
                    and repo_id = #{repo_id}
                </if>
            </trim>
        </where>
        ORDER BY repoAge desc
        LIMIT 1
    </select>

    <select id="getDeveloperType" resultType="String">
        SELECT
            account_role
        FROM
            issueTracker.account_project
        WHERE
	        account_name = #{developer}
    </select>

    <select id="getRepoMeasureMsgNumByRepo" resultType="int">
        SELECT IFNULL(count(uuid),0) FROM issueTracker.repo_measure
        <where>
            <trim prefixOverrides="and">

                <if test="repoUuid != null and repoUuid != '' ">
                    and repo_id = #{repoUuid}
                </if>

            </trim>
        </where>
    </select>

    <delete id="deleteRepoMeasureMsg">
        DELETE FROM issueTracker.repo_measure
        WHERE repo_id = #{repoUuid}
        LIMIT 500
    </delete>

    <select id="getProjectValidCommitMsg" resultType="java.util.HashMap">
        SELECT repo_id,developer_name AS developer,left(commit_time,10) as commit_time,commit_id,commit_message AS message,is_compliance
        from issueTracker.repo_measure
        <where>
            <trim prefixOverrides="and">
                <if test="developer != null and developer != ''">
                    and developer_name = #{developer}
                </if>

                <if test="repoUuidList != null and repoUuidList.size >0 ">
                    and repo_id in
                    <foreach collection="repoUuidList" separator="," open="(" close=")" item="repoUuid">
                        #{repoUuid}
                    </foreach>
                </if>

                <if test="since != null and since != '' ">
                    and <![CDATA[ commit_time >= #{since} ]]>
                </if>

                <if test="until != null and until != '' ">
                    and <![CDATA[ commit_time <= #{until} ]]>
                </if>
                and is_merge = 0
            </trim>
        </where>
        ORDER By commit_time desc
    </select>

    <select id="getProjectValidJiraCommitMsg" resultType="java.util.HashMap">
        SELECT repo_id,developer_name AS developer,left(commit_time,10) as commit_time,commit_id,commit_message AS message
        from issueTracker.repo_measure
        <where>
            <trim prefixOverrides="and">
                <if test="developer != null and developer != ''">
                    and developer_name = #{developer}
                </if>

                <if test="repoUuidList != null and repoUuidList.size >0 ">
                    and repo_id in
                    <foreach collection="repoUuidList" separator="," open="(" close=")" item="repoUuid">
                        #{repoUuid}
                    </foreach>
                </if>

                <if test="since != null and since != '' ">
                    and <![CDATA[ commit_time >= #{since} ]]>
                </if>

                <if test="until != null and until != '' ">
                    and <![CDATA[ commit_time <= #{until} ]]>
                </if>
                and is_compliance = 1
                and is_merge = 0
            </trim>
        </where>
        ORDER By commit_time desc
    </select>

    <select id="getProjectValidCommitMsgWithPage" resultType="java.util.HashMap" >
        SELECT repo_id,developer_name AS developer,left(commit_time,10) as commit_time,commit_id,commit_message AS message, is_compliance
        from issueTracker.repo_measure
        <where>
            <trim prefixOverrides="and">
                <if test="developer != null and developer != ''">
                    and developer_name = #{developer}
                </if>

                <if test="repoUuidList != null and repoUuidList.size >0 ">
                    and repo_id in
                    <foreach collection="repoUuidList" separator="," open="(" close=")" item="repoUuid">
                        #{repoUuid}
                    </foreach>
                </if>

                <if test="since != null and since != '' ">
                    and <![CDATA[ commit_time >= #{since} ]]>
                </if>

                <if test="until != null and until != '' ">
                    and <![CDATA[ commit_time <= #{until} ]]>
                </if>
                and is_merge = 0
            </trim>
        </where>
        ORDER By commit_time desc
        limit ${beginIndex}, ${size}
    </select>

    <select id="getProjectValidJiraCommitMsgWithPage" resultType="java.util.HashMap">
        SELECT repo_id,developer_name AS developer,left(commit_time,10) as commit_time,commit_id,commit_message AS message,is_compliance
        from issueTracker.repo_measure
        <where>
            <trim prefixOverrides="and">
                <if test="developer != null and developer != ''">
                    and developer_name = #{developer}
                </if>

                <if test="repoUuidList != null and repoUuidList.size >0 ">
                    and repo_id in
                    <foreach collection="repoUuidList" separator="," open="(" close=")" item="repoUuid">
                        #{repoUuid}
                    </foreach>
                </if>

                <if test="since != null and since != '' ">
                    and <![CDATA[ commit_time >= #{since} ]]>
                </if>

                <if test="until != null and until != '' ">
                    and <![CDATA[ commit_time <= #{until} ]]>
                </if>
                and is_compliance = 1
                and is_merge = 0
            </trim>
        </where>
        ORDER By commit_time desc
        limit ${beginIndex}, ${size}
    </select>

    <select id="getProjectValidNotJiraCommitMsgWithPage" resultType="java.util.HashMap">
        SELECT repo_id,developer_name AS developer,left(commit_time,10) as commit_time,commit_id,commit_message AS message,is_compliance
        from issueTracker.repo_measure
        <where>
            <trim prefixOverrides="and">
                <if test="developer != null and developer != ''">
                    and developer_name = #{developer}
                </if>

                <if test="repoUuidList != null and repoUuidList.size >0 ">
                    and repo_id in
                    <foreach collection="repoUuidList" separator="," open="(" close=")" item="repoUuid">
                        #{repoUuid}
                    </foreach>
                </if>

                <if test="since != null and since != '' ">
                    and <![CDATA[ commit_time >= #{since} ]]>
                </if>

                <if test="until != null and until != '' ">
                    and <![CDATA[ commit_time <= #{until} ]]>
                </if>
                and is_compliance = 0
                and is_merge = 0
            </trim>
        </where>
        ORDER By commit_time desc
        limit ${beginIndex}, ${size}
    </select>

    <select id="getRepoTagMetricList" resultMap="repoTagMetric">
        SELECT  tag, repo_uuid, update_time, updater, best_max, best_min, better_max, better_min, normal_max, normal_min, worse_max, worse_min, worst_max, worst_min FROM issueTracker.repo_metric
        <where>
            <if test="repoUuid != null and repoUuid != ''">
                 repo_uuid = #{repoUuid}
            </if>

            <if test="repoUuid == null or repoUuid == ''">
                 repo_uuid is null
            </if>
        </where>
        GROUP BY tag
    </select>

    <select id="getRepoTagMetric" resultMap="repoTagMetric">
        SELECT  tag, repo_uuid, update_time, updater, best_max, best_min, better_max, better_min, normal_max, normal_min, worse_max, worse_min, worst_max, worst_min FROM issueTracker.repo_metric
        WHERE
        tag = #{tag}
            <if test="repoUuid != null and repoUuid != ''">
                and repo_uuid = #{repoUuid}
            </if>

            <if test="repoUuid == null or repoUuid == ''">
                and repo_uuid is null
            </if>
    </select>

    <insert id="insertRepoTagMetric" parameterType="cn.edu.fudan.measureservice.domain.metric.RepoTagMetric">
        INSERT INTO issueTracker.repo_metric
        (
         repo_uuid,
         tag,
         update_time,
         updater,
         best_max,
         best_min,
         better_max,
         better_min,
         normal_max,
         normal_min,
         worse_max,
         worse_min,
         worst_max,
         worst_min
        )
        VALUES
        (
         #{repoUuid},
         #{tag},
         #{updateTime},
         #{updater},
         #{bestMax},
         #{bestMin},
         #{betterMax},
         #{betterMin},
         #{normalMax},
         #{normalMin},
         #{worseMax},
         #{worseMin},
         #{worstMax},
         #{worstMin}
        )
    </insert>

    <update id="updateRepoTagMetric" parameterType="RepoTagMetric" >
        UPDATE issueTracker.repo_metric
        SET
            update_time = #{updateTime},
            updater = #{updater},
            best_max = #{bestMax},
            best_min = #{bestMin},
            better_max = #{betterMax},
            better_min = #{betterMin},
            normal_max = #{normalMax},
            normal_min = #{normalMin},
            worse_max = #{worseMax},
            worse_min = #{worseMin},
            worst_max = #{worstMax},
            worst_min = #{worstMin}
        WHERE
              tag = #{tag} and repo_uuid = #{repoUuid}
    </update>

    <select id="containsRepoTagMetricOrNot" resultType="int">
        SELECT count(id) FROM issueTracker.repo_metric
        WHERE tag = #{tag}
        AND repo_uuid = #{repoUuid}
    </select>

    <select id="getRepoStartCommit" resultType="String">
        SELECT start_commit FROM issueTracker.scan
        WHERE repo_uuid = #{repoUuid}
    </select>

</mapper>