<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.fudan.measureservice.mapper.RepoMeasureMapper">

    <resultMap id="repoMeasure" type="RepoMeasure">
        <id property="uuid" column="uuid"/>
        <result property="files" column="files"/>
        <result property="ncss" column="ncss"/>
        <result property="classes" column="classes"/>
        <result property="functions" column="functions"/>
        <result property="ccn" column="ccn"/>
        <result property="java_docs" column="java_docs"/>
        <result property="java_doc_lines" column="java_doc_lines"/>
        <result property="single_comment_lines" column="single_comment_lines"/>
        <result property="multi_comment_lines" column="multi_comment_lines"/>
        <result property="developer_name" column="developer_name"/>
        <result property="developer_email" column="developer_email"/>
        <result property="add_lines" column="add_lines"/>
        <result property="del_lines" column="del_lines"/>
        <result property="add_comment_lines" column="add_comment_lines"/>
        <result property="del_comment_lines" column="del_comment_lines"/>
        <result property="changed_files" column="changed_files"/>
        <result property="is_merge" column="is_merge"/>
        <result property="commit_message" column="commit_message"/>
        <result property="first_parent_commit_id" column="first_parent_commit_id"/>
        <result property="second_parent_commit_id" column="second_parent_commit_id"/>
    </resultMap>

    <resultMap id="repoMeasureWithDate" type="RepoMeasure">
        <id property="uuid" column="uuid"/>
        <result property="files" column="files"/>
        <result property="ncss" column="ncss"/>
        <result property="classes" column="classes"/>
        <result property="functions" column="functions"/>
        <result property="ccn" column="ccn"/>
        <result property="java_docs" column="java_docs"/>
        <result property="java_doc_lines" column="java_doc_lines"/>
        <result property="single_comment_lines" column="single_comment_lines"/>
        <result property="multi_comment_lines" column="multi_comment_lines"/>
        <result property="commit_id" column="commit_id"/>
        <result property="commit_time" column="commit_time"/>
        <result property="repo_id" column="repo_id"/>
        <result property="developer_name" column="developer_name"/>
        <result property="developer_email" column="developer_email"/>
        <result property="add_lines" column="add_lines"/>
        <result property="del_lines" column="del_lines"/>
        <result property="add_comment_lines" column="add_comment_lines"/>
        <result property="del_comment_lines" column="del_comment_lines"/>
        <result property="changed_files" column="changed_files"/>
        <result property="is_merge" column="is_merge"/>
        <result property="commit_message" column="commit_message"/>
        <result property="first_parent_commit_id" column="first_parent_commit_id"/>
        <result property="second_parent_commit_id" column="second_parent_commit_id"/>
    </resultMap>

<!--    getCommitBaseByCommit-->
    <resultMap id="commitBase" type="CommitBase">
        <result property="addLines" column="add_lines"/>
        <result property="delLines" column="del_lines"/>
        <collection property="authors" ofType="Developer">
            <result property="name" column="developer_name"/>
            <result property="email" column="developer_email"/>
        </collection>
    </resultMap>

    <!--    getCommitInfoDeveloperListByDuration-->
    <resultMap id="CommitInfoDeveloperListByDuration" type="CommitInfoDeveloper">
        <result property="author" column="developer_name"/>
        <result property="email" column="developer_email"/>
        <result property="commit_counts" column="commit_counts"/>
        <result property="add" column="sumAdd"/>
        <result property="del" column="sumDel"/>
        <result property="changed_files" column="sumChangedFiles"/>
    </resultMap>


    <resultMap id="Commit" type="Commit">
        <id property="uuid" column="uuid"/>
        <result property="commit_id" column="commit_id"/>
        <result property="message" column="message"/>
        <result property="developer" column="developer"/>
        <result property="commit_time" column="commit_time"/>
        <result property="repo_id" column="repo_id"/>
        <result property="developer_email" column="developer_email"/>
        <result property="self_index" column="self_index"/>
    </resultMap>

    <insert id="insertOneRepoMeasure" >
        insert into repo_measure
            (
               uuid,
               files,
               ncss,
               classes,
               functions,
               ccn,
               java_docs,
               java_doc_lines,
               single_comment_lines,
               multi_comment_lines,
               commit_id,
               commit_time,
               repo_id,
               developer_name,
               developer_email,
               add_lines,
               del_lines,
               add_comment_lines,
               del_comment_lines,
               changed_files,
               is_merge,
               commit_message,
               first_parent_commit_id,
               second_parent_commit_id
            )
        values
           (
              #{uuid},
              #{files},
              #{ncss},
              #{classes},
              #{functions},
              #{ccn},
              #{java_docs},
              #{java_doc_lines},
              #{single_comment_lines},
              #{multi_comment_lines},
              #{commit_id},
              #{commit_time},
              #{repo_id},
              #{developer_name},
              #{developer_email},
              #{add_lines},
              #{del_lines},
              #{add_comment_lines},
              #{del_comment_lines},
              #{changed_files},
              #{is_merge},
              #{commit_message},
              #{first_parent_commit_id},
              #{second_parent_commit_id}

           )
    </insert>

    <select id="sameMeasureOfOneCommit" resultType="int">
        select count(*) from repo_measure where repo_id = #{repo_id} and commit_id = #{commit_id}
    </select>

    <select id="getRepoMeasureByCommit" resultMap="repoMeasure">
        select
            *
        from repo_measure where repo_id = #{repo_id} and commit_id = #{commit_id}
    </select>

    <select id="getCommitBaseInformation" resultMap="commitBase">
        select
            developer_name,developer_email,add_lines,del_lines
        from repo_measure where repo_id = #{repo_id} and commit_id = #{commit_id}
    </select>

    <select id="getCommitInfoDeveloperListByDuration" resultMap="CommitInfoDeveloperListByDuration">
        select
            developer_name,developer_email,SUM(add_lines) as sumAdd, SUM(del_lines) as sumDel, COUNT(*) as commit_counts, SUM(changed_files) as sumChangedFiles
        from repo_measure
        where
         repo_id = #{repo_id} and DATE(commit_time) BETWEEN #{since} AND #{until}
        <if test="developer_name != null and developer_name != ''" >
            and developer_name = #{developer_name}
        </if>
        GROUP BY developer_name
        order by developer_name collate utf8mb4_bin
    </select>

    <select id="getStartDateOfRepo" resultType="String">
        select commit_time from repo_measure where repo_id = #{repo_id} ORDER BY commit_time LIMIT 1;
    </select>

    <select id="getAddLinesByDuration" resultType="Integer">
        select IFNULL(SUM(add_lines),0) from repo_measure where repo_id = #{repo_id} and DATE(commit_time) BETWEEN #{since} AND #{until}
        <if test="developer_name != null and developer_name != ''" >
            and developer_name = #{developer_name}
        </if>
    </select>

    <select id="getDelLinesByDuration" resultType="Integer">
        select IFNULL(SUM(del_lines),0) from repo_measure where repo_id = #{repo_id} and DATE(commit_time) BETWEEN #{since} AND #{until}
        <if test="developer_name != null and developer_name != ''" >
            and developer_name = #{developer_name}
        </if>
    </select>

    <select id="getCommitCountsByDuration" resultType="int">
        select
             COUNT(*) as commit_counts
        from repo_measure
        <where>
            <trim prefixOverrides="and">
                <if test="developer_name != null and developer_name != '' ">
                    and developer_name = #{developer_name}
                </if>

                <if test="repo_id != null and repo_id != '' ">
                    and repo_id = #{repo_id}
                </if>

                <if test="since != null and since != '' ">
                    and <![CDATA[ commit_time >= #{since} ]]>
                </if>

                <if test="until != null and until != '' ">
                    and <![CDATA[ commit_time <= #{until} ]]>
                </if>
            </trim>
        </where>
    </select>

    <select id="getValidCommitCountsByAllRepo" resultType="int">
        select
        COUNT(*) as commit_counts
        from commit_view
        <where>
            <trim prefixOverrides="and">
                <if test="developer_name != null and developer_name != '' ">
                    and developer_unique_name = #{developer_name}
                </if>

                <if test="repoUuidList != null and repoUuidList.size >0 ">
                    and repo_id in
                    <foreach collection="repoUuidList" separator="," open="(" close=")" item="repoUuid">
                        #{repoUuid}
                    </foreach>
                </if>

                <if test="since != null and since != '' ">
                    and <![CDATA[ commit_time >= #{since} ]]>
                </if>

                <if test="until != null and until != '' ">
                    and <![CDATA[ commit_time <= #{until} ]]>
                </if>
                and message NOT LIKE '%Merge%'
            </trim>
        </where>
    </select>

    <select id="getInvalidCommitMsg" resultType="java.util.HashMap">
        SELECT developer_unique_name,left(commit_time,10) as commit_time,commit_id,message FROM commit_view
        WHERE commit_id in (
            select commit_id  from commit_view
            <where>
                <trim prefixOverrides="and">
                    <if test="developer_name != null and developer_name != '' ">
                        and developer_unique_name = #{developer_name}
                    </if>

                    <if test="repoUuidList != null and repoUuidList.size >0 ">
                        and repo_id in
                        <foreach collection="repoUuidList" separator="," open="(" close=")" item="repoUuid">
                            #{repoUuid}
                        </foreach>
                    </if>

                    <if test="since != null and since != '' ">
                        and <![CDATA[ commit_time >= #{since} ]]>
                    </if>

                    <if test="until != null and until != '' ">
                        and <![CDATA[ commit_time <= #{until} ]]>
                    </if>
                </trim>
            </where>
            and commit_id not in (
                select commit_id  from jira_history
                <where>
                    <trim prefixOverrides="and">
                        <if test="developer_name != null and developer_name != '' ">
                            and unique_name = #{developer_name}
                        </if>

                        <if test="repoUuidList != null and repoUuidList.size >0 ">
                            and repo_id in
                            <foreach collection="repoUuidList" separator="," open="(" close=")" item="repoUuid">
                                #{repoUuid}
                            </foreach>
                        </if>

                        <if test="since != null and since != '' ">
                            and <![CDATA[ commit_time >= #{since} ]]>
                        </if>

                        <if test="until != null and until != '' ">
                            and <![CDATA[ commit_time <= #{until} ]]>
                        </if>
                    </trim>
                </where>
            )
        )
        and message not like '%Merge%'
        ORDER BY commit_time DESC
    </select>

    <select id="getDeveloperValidCommitCount" resultType="int">
        SELECT count(*) FROM commit_view
        <where>
            <trim prefixOverrides="and">
                <if test="developer_name != null and developer_name != '' ">
                    and developer_unique_name = #{developer_name}
                </if>

                <if test="repoUuid != null and repoUuid != '' ">
                    and repo_id = #{repoUuid}
                </if>

                <if test="since != null and since != '' ">
                    and <![CDATA[ commit_time >= #{since} ]]>
                </if>

                <if test="until != null and until != '' ">
                    and <![CDATA[ commit_time <= #{until} ]]>
                </if>
                and message NOT LIKE '%Merge%'
            </trim>
        </where>
    </select>

    <select id="getJiraCountByCondition" resultType="int">
        select
        COUNT(*)
        from jira_history
        <where>
            <trim prefixOverrides="and">
                <if test="developer_name != null and developer_name != '' ">
                    and unique_name = #{developer_name}
                </if>

                <if test="repoUuidList != null and repoUuidList.size >0 ">
                    and repo_id in
                    <foreach collection="repoUuidList" separator="," open="(" close=")" item="repoUuid">
                        #{repoUuid}
                    </foreach>
                </if>

                <if test="since != null and since != '' ">
                    and <![CDATA[ commit_time >= #{since} ]]>
                </if>

                <if test="until != null and until != '' ">
                    and <![CDATA[ commit_time <= #{until} ]]>
                </if>
            </trim>
        </where>
    </select>

    <select id="getChangedFilesByDuration" resultType="int">
        select
        IFNULL(SUM(changed_files),0)
        from repo_measure where repo_id = #{repo_id} and DATE(commit_time) BETWEEN #{since} AND #{until}
        <if test="developer_name != null and developer_name != ''" >
            and developer_name = #{developer_name}
        </if>
    </select>

    <select id="getLatestMeasureData" resultMap="repoMeasure">
        select
            *
        from
            repo_measure
        where
            repo_id = #{repo_id}
        order by commit_time desc
        limit 1
    </select>

    <select id="getFirstMeasureDataAfterDuration" resultMap="repoMeasure">
         select
            *
        from
            repo_measure
        where
            repo_id = #{repo_id}   and  commit_time  &lt; #{time_line}
        order by commit_time desc
        limit 1
    </select>

    <select id="getRepoMeasureBetween" resultMap="repoMeasureWithDate">
        select * from repo_measure
        where repo_id = #{repo_id}
        <if test="since != null and since != '' ">
            and <![CDATA[ commit_time >= #{since} ]]>
        </if>
        and commit_time &lt; #{until}
        order by commit_time;
    </select>

    <delete id="delRepoMeasureByRepoId" parameterType="String">
        delete from repo_measure
        where repo_id = #{repo_id} ;
    </delete>

    <delete id="delFileMeasureByRepoId" parameterType="String">
        delete from file_measure
        where repo_id = #{repo_id} ;
    </delete>

    <select id="getRepoMeasureByDeveloperAndRepoId"  resultMap="repoMeasureWithDate">
        select
            *
        from
            repo_measure
        <where>
            <trim prefixOverrides="and">
                <if test="developer_name != null and developer_name != '' ">
                    and developer_name = #{developer_name}
                </if>

                <if test="repo_id != null and repo_id != '' ">
                    and repo_id = #{repo_id}
                </if>

                <if test="since != null and since != '' ">
                    and <![CDATA[ commit_time >= #{since} ]]>
                </if>

                <if test="until != null and until != '' ">
                    and <![CDATA[ commit_time <= #{until} ]]>
                </if>
            </trim>
        </where>
        group by commit_id
        order by commit_time desc
        <if test="counts != 0 ">
            limit #{counts}
        </if>
    </select>

    <select id="getCommits" parameterType="String" resultMap="Commit">
        select * from commit where repo_id= #{repo_id} order by commit_time desc limit 0,58;
    </select>

    <select id="getDeveloperRankByCommitCount" parameterType="String" resultType="java.util.HashMap">
        SELECT
            developer_name,
            COUNT(*) AS `counts`
        FROM
            repo_measure
        WHERE
            repo_id = #{repo_id}
            and
            DATE(commit_time) BETWEEN #{since} AND #{until}
        GROUP BY
            developer_name
        ORDER BY
            COUNT(*) DESC
        LIMIT 5;
    </select>

    <select id="getDeveloperRankByLoc" parameterType="String" resultType="java.util.HashMap">
        SELECT
            developer_name,
            SUM( add_lines ) + SUM( del_lines ) AS counts
        FROM
            repo_measure
        WHERE
            repo_id = #{repo_id}
            and
            DATE(commit_time) BETWEEN #{since} AND #{until}
        GROUP BY
            developer_name
        ORDER BY
            counts DESC
        LIMIT 5;
    </select>

    <select id="getRepoLOCByDuration" resultType="int">
        select
        IFNULL(SUM( add_lines ) + SUM( del_lines ),0)
        from repo_measure where repo_id = #{repo_id} and DATE(commit_time) BETWEEN #{since} AND #{until}
        <if test="developer_name != null and developer_name != ''" >
            and developer_name = #{developer_name}
        </if>
    </select>

    <select id="getDeveloperListByRepoIdList" resultType="java.util.HashMap">
        SELECT
            developer_name
        FROM
            repo_measure
        <where>
            <trim prefixOverrides="and">
                <if test="repoIdList != null and repoIdList.size > 0">
                    and repo_id in
                    <foreach collection="repoIdList" separator="," open="(" close=")" item="repo_id">
                        #{repo_id}
                    </foreach>
                </if>
            </trim>
        </where>
        GROUP BY
            developer_name
        ORDER BY
            developer_name
    </select>

    <select id="getDeveloperDutyTypeListByRepoId" parameterType="String" resultType="java.util.HashMap">
        SELECT DISTINCT a.name , a.account_status
        FROM account as a
        WHERE
        a.name IN
        (SELECT DISTINCT developer_unique_name FROM commit_view
        <where>
            <if test="repoIdList != null and repoIdList.size > 0">
               and repo_id in
                <foreach collection="repoIdList" separator="," open="(" close=")" item="repo_id">
                    #{repo_id}
                </foreach>
            </if>
        </where>
        )
    </select>

    <select id="getLastCommitId" parameterType="String" resultType="String">
        SELECT
            first_parent_commit_id
        FROM
            repo_measure
        WHERE
            commit_id = #{commit_id}
    </select>

    <select id="getLastScannedCommitId" parameterType="String" resultType="String">
        SELECT
            commit_id
        FROM
            repo_measure
        WHERE
            repo_id = #{repo_id}
        ORDER BY
            commit_time DESC
        LIMIT 1;
    </select>


    <select id="getLOCByCondition" parameterType="String" resultType="int">
        SELECT
            IFNULL(SUM( add_lines ) + SUM( del_lines ),0)
        FROM
            repo_measure
        <where>
            <trim prefixOverrides="and">
                <if test="developer_name != null and developer_name != '' ">
                    and developer_name = #{developer_name}
                </if>

                <if test="repo_id != null and repo_id != '' ">
                    and repo_id = #{repo_id}
                </if>

                <if test="since != null and since != '' ">
                    and <![CDATA[ commit_time >= #{since} ]]>
                </if>

                <if test="until != null and until != '' ">
                    and <![CDATA[ commit_time <= #{until} ]]>
                </if>
            </trim>
        </where>
    </select>

    <select id="getCommitDays" parameterType="String" resultType="java.util.HashMap">
        SELECT
        DATE_FORMAT(commit_time,'%Y%m%d') commitDays
        FROM
        repo_measure
        <where>
            <trim prefixOverrides="and">
                <if test="developer_name != null and developer_name != '' ">
                    and developer_name = #{developer_name}
                </if>

                <if test="repo_id != null and repo_id != '' ">
                    and repo_id = #{repo_id}
                </if>

                <if test="since != null and since != '' ">
                    and <![CDATA[ commit_time >= #{since} ]]>
                </if>

                <if test="until != null and until != '' ">
                    and <![CDATA[ commit_time <= #{until} ]]>
                </if>
            </trim>
        </where>
        group by commitDays
    </select>

    <select id="getRepoListByDeveloper" parameterType="String" resultType="String">
        SELECT
            DISTINCT (repo_id)
        FROM
            commit_view
        <where>
            <trim prefixOverrides="and">
                <if test="developer_name != null and developer_name != '' ">
                    and developer_unique_name = #{developer_name}
                </if>

                <if test="since != null and since != '' ">
                    and <![CDATA[ commit_time >= #{since} ]]>
                </if>

                <if test="until != null and until != '' ">
                    and <![CDATA[ commit_time <= #{until} ]]>
                </if>
            </trim>
        </where>

    </select>

    <select id="getFirstCommitDateByCondition" resultType="String">
        select commit_time from commit_view
        <where>
            <trim prefixOverrides="and">
                <if test="repoIdList != null and repoIdList.size > 0">
                    and repo_id in
                    <foreach collection="repoIdList" separator="," open="(" close=")" item="repo_id">
                        #{repo_id}
                    </foreach>
                </if>

                <if test="developer != null and developer != '' ">
                    and developer_unique_name = #{developer}
                </if>
            </trim>
        </where>
        order by commit_time
        limit 1
    </select>

    <select id="getLastCommitDateOfOneRepo" parameterType="String" resultType="String">
        select commit_date from scan_result
        <where>
            <trim prefixOverrides="and">
                <if test="repo_id != null and repo_id != '' ">
                    and repo_id = #{repo_id}
                </if>

                <if test="developer != null and developer != '' ">
                    and developer = #{developer}
                </if>
            </trim>
        </where>
        order by commit_date desc
        limit 1
    </select>

    <select id="getCommitMsgByCondition" parameterType="String" resultType="java.util.HashMap">
        SELECT
        developer_unique_name,repo_id,commit_id,commit_time,message
        FROM
        commit_view
        <where>
            <trim prefixOverrides="and">
                <if test="developer_name != null and developer_name != '' ">
                    and developer_unique_name = #{developer_name}
                </if>

                <if test="repo_id != null and repo_id != '' ">
                    and repo_id = #{repo_id}
                </if>

                <if test="since != null and since != '' ">
                    and <![CDATA[ commit_time >= #{since} ]]>
                </if>

                <if test="until != null and until != '' ">
                    and <![CDATA[ commit_time <= #{until} ]]>
                </if>
            </trim>
        </where>
        ORDER BY commit_time DESC
    </select>

    <select id="getWorkLoadByCondition"  resultType="java.util.HashMap">
        SELECT
        IFNULL(sum(add_lines),0) as addLines, IFNULL(sum(del_lines),0) as delLines, count(*) as commitCount, IFNULL(sum(changed_files),0) as changedFiles
        FROM
        repo_measure
        <where>
            <trim prefixOverrides="and">
                <if test="developer_name != null and developer_name != '' ">
                    and developer_name = #{developer_name}
                </if>

                <if test="repoIdList != null and repoIdList.size > 0">
                    and repo_id in
                    <foreach collection="repoIdList" separator="," open="(" close=")" item="repo_id">
                        #{repo_id}
                    </foreach>
                </if>

                <if test="since != null and since != '' ">
                    and <![CDATA[ commit_time >= #{since} ]]>
                </if>

                <if test="until != null and until != '' ">
                    and <![CDATA[ commit_time <= #{until} ]]>
                </if>
            </trim>
        </where>
    </select>


    <select id="getRepoAge"  resultType="int">
        select IFNULL( MAX( DATEDIFF(now(),commit_time) ), 0 ) as repoAge
        FROM
        repo_measure
        <where>
            <trim prefixOverrides="and">
                <if test="repo_id != null and repo_id != '' ">
                    and repo_id = #{repo_id}
                </if>
            </trim>
        </where>
        ORDER BY repoAge desc
        LIMIT 1
    </select>

    <select id="getDeveloperType" resultType="String">
        SELECT
            account_role
        FROM
            account
        WHERE
	        name = #{developer}
    </select>

    <select id="getDeveloperList" resultType="String">
        SELECT
            distinct developer_unique_name
        FROM
            commit_view
        <where>
            <trim prefixOverrides="and">
                <if test="repoUuidList != null and repoUuidList.size > 0">
                    and repo_id in
                    <foreach collection="repoUuidList" separator="," open="(" close=")" item="repoUuid">
                        #{repoUuid}
                    </foreach>
                 </if>
                <if test="since != null and since != '' ">
                    and <![CDATA[ commit_time >= #{since} ]]>
                </if>

                <if test="until != null and until != '' ">
                    and <![CDATA[ commit_time <= #{until} ]]>
                </if>
            </trim>
        </where>
    </select>

    <select id="getJiraCount" parameterType="String" resultType="int">
        SELECT
        count(*)
        FROM
        jira_history
        <where>
            <trim prefixOverrides="and">
                <if test="developer != null and developer != '' ">
                    and unique_name = #{developer}
                </if>

                <if test="repoUuid != null and repoUuid != '' ">
                    and repo_id = #{repoUuid}
                </if>

                <if test="since != null and since != '' ">
                    and <![CDATA[ commit_time >= #{since} ]]>
                </if>

                <if test="until != null and until != '' ">
                    and <![CDATA[ commit_time <= #{until} ]]>
                </if>

            </trim>
        </where>
    </select>

</mapper>