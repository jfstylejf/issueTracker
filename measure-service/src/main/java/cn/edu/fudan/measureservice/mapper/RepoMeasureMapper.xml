<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.fudan.measureservice.mapper.RepoMeasureMapper">

    <resultMap id="repoMeasure" type="RepoMeasure">
        <result property="files" column="files"/>
        <result property="ncss" column="ncss"/>
        <result property="classes" column="classes"/>
        <result property="functions" column="functions"/>
        <result property="ccn" column="ccn"/>
        <result property="java_docs" column="java_docs"/>
        <result property="java_doc_lines" column="java_doc_lines"/>
        <result property="single_comment_lines" column="single_comment_lines"/>
        <result property="multi_comment_lines" column="multi_comment_lines"/>
        <result property="developer_name" column="developer_name"/>
        <result property="developer_email" column="developer_email"/>
        <result property="add_lines" column="add_lines"/>
        <result property="del_lines" column="del_lines"/>
    </resultMap>

    <resultMap id="repoMeasureWithDate" type="RepoMeasure">
        <id property="uuid" column="uuid"/>
        <result property="files" column="files"/>
        <result property="ncss" column="ncss"/>
        <result property="classes" column="classes"/>
        <result property="functions" column="functions"/>
        <result property="ccn" column="ccn"/>
        <result property="java_docs" column="java_docs"/>
        <result property="java_doc_lines" column="java_doc_lines"/>
        <result property="single_comment_lines" column="single_comment_lines"/>
        <result property="multi_comment_lines" column="multi_comment_lines"/>
        <result property="commit_id" column="commit_id"/>
        <result property="commit_time" column="commit_time"/>
        <result property="repo_id" column="repo_id"/>
        <result property="developer_name" column="developer_name"/>
        <result property="developer_email" column="developer_email"/>
        <result property="add_lines" column="add_lines"/>
        <result property="del_lines" column="del_lines"/>
    </resultMap>

<!--    getCommitBaseByCommit-->
    <resultMap id="commitBase" type="CommitBase">
        <result property="addLines" column="add_lines"/>
        <result property="delLines" column="del_lines"/>
        <collection property="authors" ofType="Developer">
            <result property="name" column="developer_name"/>
            <result property="email" column="developer_email"/>
        </collection>
    </resultMap>

    <!--    getCommitInfoDeveloperListByDuration-->
    <resultMap id="CommitInfoDeveloperListByDuration" type="CommitInfoDeveloper">
        <result property="author" column="developer_name"/>
        <result property="email" column="developer_email"/>
        <result property="commit_counts" column="commit_counts"/>
        <result property="add" column="sumAdd"/>
        <result property="del" column="sumDel"/>
    </resultMap>


    <resultMap id="Commit" type="Commit">
        <id property="uuid" column="uuid"/>
        <result property="commit_id" column="commit_id"/>
        <result property="message" column="message"/>
        <result property="developer" column="developer"/>
        <result property="commit_time" column="commit_time"/>
        <result property="repo_id" column="repo_id"/>
        <result property="developer_email" column="developer_email"/>
        <result property="self_index" column="self_index"/>
    </resultMap>

    <insert id="insertOneRepoMeasure" >
        insert into repo_measure
            (
               uuid,
               files,
               ncss,
               classes,
               functions,
               ccn,
               java_docs,
               java_doc_lines,
               single_comment_lines,
               multi_comment_lines,
               commit_id,
               commit_time,
               repo_id,
               developer_name,
               developer_email,
               add_lines,
               del_lines,
               changed_files,
               is_merge
            )
        values
           (
              #{uuid},
              #{files},
              #{ncss},
              #{classes},
              #{functions},
              #{ccn},
              #{java_docs},
              #{java_doc_lines},
              #{single_comment_lines},
              #{multi_comment_lines},
              #{commit_id},
              #{commit_time},
              #{repo_id},
              #{developer_name},
              #{developer_email},
              #{add_lines},
              #{del_lines},
              #{changed_files},
              #{is_merge}
           )
    </insert>

    <select id="sameMeasureOfOneCommit" resultType="int">
        select count(*) from repo_measure where repo_id = #{repo_id} and commit_id = #{commit_id}
    </select>

    <select id="getRepoMeasureByCommit" resultMap="repoMeasure">
        select
            files,ncss,classes,functions,ccn,java_docs,java_doc_lines,single_comment_lines,multi_comment_lines,developer_name,developer_email,add_lines,del_lines
        from repo_measure where repo_id = #{repo_id} and commit_id = #{commit_id}
    </select>

    <select id="getCommitBaseInformation" resultMap="commitBase">
        select
            developer_name,developer_email,add_lines,del_lines
        from repo_measure where repo_id = #{repo_id} and commit_id = #{commit_id}
    </select>

    <select id="getCommitInfoDeveloperListByDuration" resultMap="CommitInfoDeveloperListByDuration">
        select
            developer_name,developer_email,SUM(add_lines) as sumAdd, SUM(del_lines) as sumDel, COUNT(*) as commit_counts
        from repo_measure
        where
         repo_id = #{repo_id} and DATE(commit_time) BETWEEN #{since} AND #{until}
        <if test="developer_name != null and developer_name != ''" >
            and developer_name = #{developer_name}
        </if>
        GROUP BY developer_name
        order by developer_name collate utf8mb4_bin
    </select>

    <select id="getStartDateOfRepo" resultType="String">
        select commit_time from repo_measure where repo_id = #{repo_id} ORDER BY commit_time LIMIT 1;
    </select>

    <select id="getAddLinesByDuration" resultType="Integer">
        select IFNULL(SUM(add_lines),0) from repo_measure where repo_id = #{repo_id} and DATE(commit_time) BETWEEN #{since} AND #{until};
    </select>

    <select id="getDelLinesByDuration" resultType="Integer">
        select IFNULL(SUM(del_lines),0) from repo_measure where repo_id = #{repo_id} and DATE(commit_time) BETWEEN #{since} AND #{until};
    </select>

    <select id="getCommitCountsByDuration" resultType="int">
        select
             COUNT(*) as commit_counts
        from repo_measure where repo_id = #{repo_id} and DATE(commit_time) BETWEEN #{since} AND #{until}
        <if test="developer_name != null and developer_name != ''" >
            and developer_name = #{developer_name}
        </if>
    </select>

    <select id="getLatestMeasureData" resultMap="repoMeasure">
        select
            files,ncss,classes,functions,ccn,java_docs,java_doc_lines,single_comment_lines,multi_comment_lines,developer_name,developer_email,add_lines,del_lines
        from
            repo_measure
        where
            repo_id = #{repo_id}
        order by commit_time desc
        limit 1
    </select>

    <select id="getFirstMeasureDataAfterDuration" resultMap="repoMeasure">
         select
            files,ncss,classes,functions,ccn,java_docs,java_doc_lines,single_comment_lines,multi_comment_lines,developer_name,developer_email,add_lines,del_lines
        from
            repo_measure
        where
            repo_id = #{repo_id}   and  commit_time  &lt; #{time_line}
        order by commit_time desc
        limit 1
    </select>

    <select id="getRepoMeasureBetween" resultMap="repoMeasureWithDate">
        select * from repo_measure
        where repo_id = #{repo_id}
        <if test="since != null and since != '' ">
            and <![CDATA[ commit_time >= #{since} ]]>
        </if>
        and commit_time &lt; #{until}
        order by commit_time;
    </select>

    <delete id="delRepoMeasureByRepoId" parameterType="String">
        delete from repo_measure
        where repo_id = #{repo_id} ;
    </delete>


    <select id="getRepoMeasureByDeveloperAndRepoId"  resultMap="repoMeasureWithDate">
        select
            uuid,files,ncss,classes,functions,ccn,java_docs,java_doc_lines,single_comment_lines,multi_comment_lines,commit_id,commit_time,repo_id,developer_name,developer_email,add_lines,del_lines
        from
            repo_measure
        <where>
            <trim prefixOverrides="and">
                <if test="developer_name != null and developer_name != '' ">
                    and developer_name = #{developer_name}
                </if>

                <if test="repo_id != null and repo_id != '' ">
                    and repo_id = #{repo_id}
                </if>

                <if test="since != null and since != '' ">
                    and <![CDATA[ commit_time >= #{since} ]]>
                </if>

                <if test="until != null and until != '' ">
                    and <![CDATA[ commit_time <= #{until} ]]>
                </if>
            </trim>
        </where>
        group by commit_id
        order by commit_time desc
        <if test="counts != 0 ">
            limit #{counts}
        </if>
    </select>

    <select id="getCommits" parameterType="String" resultMap="Commit">
        select * from commit where repo_id= #{repo_id} order by commit_time desc limit 0,58;
    </select>
</mapper>