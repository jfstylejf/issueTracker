openapi: 3.0.0
info:
  description: ""
  version: "1.0.0"
  title: "issueTracker"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "pyu17@fudan.edu.cn"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

servers:
- url: http://10.141.221.85:8000
  description: 接口测试地址


tags:
- name: "缺陷度量接口"
- name: "issue接口"
- name: "RawIssue接口"


paths:

  #  以下是缺陷度量接口，对应IssueMeasurementController
  /measurement/code-quality:
    get:
      tags:
      - "缺陷度量接口"
      summary: "获取缺陷质量统计结果"
      description: "根据参数获取缺陷质量统计结果，其中repoId 是必填参数，其他都是可选参数。"
      operationId: "getCodeQuality"
      parameters:
      - in: "query"
        name: "repoId"
        description: "repo的唯一ID"
        required: true
        schema:
          type: "string"
          example: "aa41c6ae-6fd0-11e9-b723-0f92b2ad63bf"
      - in: "query"
        name: "developer"
        description: "开发者名字"
        required: false
        schema:
          type: "string"
          example: "xiaomi"
      - in: "query"
        name: "timeGranularity"
        description: "时间粒度 "
        required: false
        schema:
          type: "string"
          enum: ["day","week","month"]
      - in: "query"
        name: "since"
        description: "从什么时候开始统计"
        required: false
        schema:
          type: "string"
          example: "2019-06-08"
      - in: "query"
        name: "until"
        description: "统计到什么时候结束"
        required: false
        schema:
          type: "string"
          example: "2019-06-09"
      - in: "query"
        name: "tool"
        description: "统计何种工具的数据结果"
        required: false
        schema:
          type: "string"
          example: "bug"
      - in: "query"
        name: "page"
        description: "显示按时间段统计代码缺陷质量的第几页数据"
        required: false
        schema:
          type: "integer"
      - in: "query"
        name: "ps"
        description: "显示一页缺陷质量数据的条数"
        required: false
        schema:
          type: "integer"

      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeQualityResponse'
        400:
          description: "failed"

  /measurement/remainingIssue/{repoId}/{commit}:
    get:
      tags:
      - "缺陷度量接口"
      summary: "获取静态问题数"
      description: "根据repo与commit的唯一ID获取静态问题数"
      operationId: "getNumberOfRemainingIssue"
      parameters:
      - in: "path"
        name: "repoId"
        description: "repo的唯一ID"
        required: true
        schema:
          type: "string"
          example: "aa41c6ae-6fd0-11e9-b723-0f92b2ad63bf"
      - in: "path"
        name: "commit"
        description: "commit的唯一ID"
        required: true
        schema:
          type: "string"
          example: "18c74e4ad86de23c41ea57abc1e88ebed3140fe3"
      - in: "query"
        name: "spaceType"
        description: "检索范围，目前固定为'project' "
        required: true
        schema:
          type: "string"
          example: "project"
      responses:
        '200':
          description: "successful operation"
          content:
            text/plain:
              schema:
                type: "integer"
            application/json:
              schema:
                type: "integer"
        400:
          description: "failed"

  /measurement/newIssue/{repoId}/{commit}:
    get:
      tags:
      - "缺陷度量接口"
      summary: "获取新增问题数-快照"
      description: "根据repo与commit的唯一ID获取新增问题数"
      operationId: "getNumberOfNewIssueByCommit"
      parameters:
      - in: "path"
        name: "repoId"
        description: "repo的唯一ID"
        required: true
        schema:
          type: "string"
          example: "aa41c6ae-6fd0-11e9-b723-0f92b2ad63bf"
      - in: "path"
        name: "commit"
        description: "commit的唯一ID"
        required: true
        schema:
          type: "string"
          example: "18c74e4ad86de23c41ea57abc1e88ebed3140fe3"
      - in: "query"
        name: "spaceType"
        description: "检索范围，目前固定为'project' "
        required: true
        schema:
          type: "string"
          example: "project"
      - in: "query"
        name: "category"
        description: "工具选择，findbugs则选择'bug' "
        required: true
        schema:
          type: "string"
          example: "bug"
      responses:
        200:
          description: "successful operation"
          content:
            text/plain:
              schema:
                type: "integer"
            application/json:
              schema:
                type: "integer"
        400:
          description: "failed"

  /measurement/newIssue:
    get:
      tags:
      - "缺陷度量接口"
      summary: "获取新增问题数-指定时段"
      description: "根据repo与commit的唯一ID获取新增问题数-指定时段"
      operationId: "getNumberOfNewIssue"
      parameters:
      - in: "query"
        name: "duration"
        description: "指定的时间段"
        required: true
        schema:
          type: "string"
          example: "2017.09.09-2019.09.09"
      - in: "query"
        name: "spaceType"
        description: "检索范围，目前固定为'project' "
        required: true
        schema:
          type: "string"
          example: "project"
      - in: "query"
        name: "detail"
        description: "repo的唯一ID"
        required: true
        schema:
          type: "string"
          example: "aa41c6ae-6fd0-11e9-b723-0f92b2ad63bf"
      responses:
        200:
          description: "successful operation"
          content:
            text/plain:
              schema:
                type: "integer"
            application/json:
              schema:
                type: "integer"
        400:
          description: "failed"

  /measurement/eliminateIssue/{repoId}/{commit}:
    get:
      tags:
      - "缺陷度量接口"
      summary: "获取解决问题数-快照"
      description: "根据repo与commit的唯一ID获取解决问题数"
      operationId: "getNumberOfEliminateIssueByCommit"
      parameters:
      - in: "path"
        name: "repoId"
        description: "repo的唯一ID"
        required: true
        schema:
          type: "string"
          example: "aa41c6ae-6fd0-11e9-b723-0f92b2ad63bf"
      - in: "path"
        name: "commit"
        description: "commit的唯一ID"
        required: true
        schema:
          type: "string"
          example: "18c74e4ad86de23c41ea57abc1e88ebed3140fe3"
      - in: "query"
        name: "spaceType"
        description: "检索范围，目前固定为'project' "
        required: true
        schema:
          type: "string"
          example: "project"
      - in: "query"
        name: "category"
        description: "工具选择，findbugs则选择'bug' "
        required: true
        schema:
          type: "string"
          example: "bug"
      responses:
        200:
          description: "successful operation"
          content:
            text/plain:
              schema:
                type: "integer"
            application/json:
              schema:
                type: "integer"
        400:
          description: "failed"

  /measurement/eliminateIssue:
    get:
      tags:
      - "缺陷度量接口"
      summary: "获取消除问题数-指定时段"
      description: "根据repo与commit的唯一ID获取消除问题数-指定时段"
      operationId: "getNumberOfEliminateIssue"
      parameters:
      - in: "query"
        name: "duration"
        description: "指定的时间段"
        required: true
        schema:
          type: "string"
          example: "2017.09.09-2019.09.09"
      - in: "query"
        name: "spaceType"
        description: "检索范围，目前固定为'project' "
        required: true
        schema:
          type: "string"
          example: "project"
      - in: "query"
        name: "detail"
        description: "repo的唯一ID"
        required: true
        schema:
          type: "string"
          example: "aa41c6ae-6fd0-11e9-b723-0f92b2ad63bf"
      responses:
        200:
          description: "successful operation"
          content:
            text/plain:
              schema:
                type: "integer"
            application/json:
              schema:
                type: "integer"
        400:
          description: "failed"

  /measurement/issue/commit:
    get:
      tags:
      - "缺陷度量接口"
      summary: "获取每次commit下的问题数-指定时段"
      description: "根据repo唯一ID获取一段时间内每次commit下的各种问题数-指定时段"
      operationId: "getIssueCountEachCommit"
      parameters:
      - in: "query"
        name: "since"
        description: "指定的时间段开始时间"
        required: true
        schema:
          type: "string"
          example: "2017.09.09"
      - in: "query"
        name: "until"
        description: "指定的时间段截止时间"
        required: true
        schema:
          type: "string"
          example: "2019.09.09"
      - in: "query"
        name: "category"
        description: "工具选择，findbugs则选择'bug' "
        required: true
        schema:
          type: "string"
          example: "bug"
      - in: "query"
        name: "repo_id"
        description: "repo的唯一ID"
        required: true
        schema:
          type: "string"
          example: "aa41c6ae-6fd0-11e9-b723-0f92b2ad63bf"
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueCountResponse'
        400:
          description: "failed"

  /measurement/issue/repository:
    get:
      tags:
      - "缺陷度量接口"
      summary: "获取repo某段时间内的问题数-指定时段"
      description: "根据repo唯一ID获取该repo一段时间内的新增与消除问题数-指定时段"
      operationId: "getIssueCountMeasureByRepo"
      parameters:
      - in: "query"
        name: "since"
        description: "指定的时间段开始时间"
        required: true
        schema:
          type: "string"
          example: "2017.09.09"
      - in: "query"
        name: "until"
        description: "指定的时间段截止时间"
        required: true
        schema:
          type: "string"
          example: "2019.09.09"
      - in: "query"
        name: "category"
        description: "工具选择，findbugs则选择'bug' "
        required: true
        schema:
          type: "string"
          example: "bug"
      - in: "query"
        name: "repo_id"
        description: "repo的唯一ID"
        required: true
        schema:
          type: "string"
          example: "aa41c6ae-6fd0-11e9-b723-0f92b2ad63bf"
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueCountByRepoResponse'
        400:
          description: "failed"

  /measurement/issue/developer:
    get:
      tags:
      - "缺陷度量接口"
      summary: "获取repo某段时间内所有开发者对应的问题数-指定时段"
      description: "获取repo某段时间内所有开发者对应的问题数-指定时段"
      operationId: "getIssueCountMeasureByDeveloper"
      parameters:
      - in: "query"
        name: "since"
        description: "指定的时间段开始时间"
        required: true
        schema:
          type: "string"
          example: "2017.09.09"
      - in: "query"
        name: "until"
        description: "指定的时间段截止时间"
        required: true
        schema:
          type: "string"
          example: "2019.09.09"
      - in: "query"
        name: "category"
        description: "工具选择，findbugs则选择'bug' "
        required: true
        schema:
          type: "string"
          example: "bug"
      - in: "query"
        name: "repo_id"
        description: "repo的唯一ID"
        required: true
        schema:
          type: "string"
          example: "aa41c6ae-6fd0-11e9-b723-0f92b2ad63bf"
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueCountByDeveloperResponse'
        400:
          description: "failed"

  /measurement/rankOfFileBaseIssueQuantity/{repoId}:
    get:
      tags:
      - "缺陷度量接口"
      summary: "问题最多的文件排名"
      description: "问题最多的文件排名"
      operationId: "getRankOfFileBaseIssueQuantity"
      parameters:
      - in: "path"
        name: "repoId"
        description: "repo的唯一ID"
        required: true
        schema:
          type: "string"
          example: "aa41c6ae-6fd0-11e9-b723-0f92b2ad63bf"
      - in: "query"
        name: "commitId"
        description: "commit的唯一ID"
        required: true
        schema:
          type: "string"
          example: "18c74e4ad86de23c41ea57abc1e88ebed3140fe3"
      responses:
        '200':
          description: "successful operation"
          content:
            text/plain:
              schema:
                type: "object"
                format: Map[string, string]
            application/json:
              schema:
                type: "object"
                format: Map[string, string]
        400:
          description: "failed"

  /measurement/rankOfFileBaseDensity/{repoId}:
    get:
      tags:
      - "缺陷度量接口"
      summary: "问题密度最大的文件排名"
      description: "问题密度最大的文件排名"
      operationId: "getRankOfFileBaseDensity"
      parameters:
      - in: "path"
        name: "repoId"
        description: "repo的唯一ID"
        required: true
        schema:
          type: "string"
          example: "aa41c6ae-6fd0-11e9-b723-0f92b2ad63bf"
      - in: "query"
        name: "commitId"
        description: "commit的唯一ID"
        required: true
        schema:
          type: "string"
          example: "18c74e4ad86de23c41ea57abc1e88ebed3140fe3"
      responses:
        '200':
          description: "successful operation"
          content:
            text/plain:
              schema:
                type: "object"
                format: Map[string, string]
            application/json:
              schema:
                type: "object"
                format: Map[string, string]
        400:
          description: "failed"

  /measurement/rankOfDeveloper/{repoId}:
    get:
      tags:
      - "缺陷度量接口"
      summary: "问题密度最大的开发者排名"
      description: "问题密度最大的开发者排名"
      operationId: "getRankOfDeveloper"
      parameters:
      - in: "path"
        name: "repoId"
        description: "repo的唯一ID"
        required: true
        schema:
          type: "string"
          example: "aa41c6ae-6fd0-11e9-b723-0f92b2ad63bf"
      - in: "query"
        name: "since"
        description: "从什么时候开始统计"
        required: true
        schema:
          type: "string"
          example: "2019-06-08"
      - in: "query"
        name: "until"
        description: "统计到什么时候结束"
        required: true
        schema:
          type: "string"
          example: "2019-06-09"
      responses:
        '200':
          description: "successful operation"
          content:
            text/plain:
              schema:
                type: "object"
                format: Map[string, integer]
            application/json:
              schema:
                type: "object"
                format: Map[string, integer]
        400:
          description: "failed"

  /measurement/rankOfRepoBaseDensity:
    get:
      tags:
      - "缺陷度量接口"
      summary: "问题密度最大（小）的项目排名"
      description: "问题密度最大（小）的项目排名"
      operationId: "getRankOfRepoBaseDensity"
      parameters:
      - in: "header"
        name: "token"
        description: "用户token，用于验证用户"
        required: true
        schema:
          type: "string"
      responses:
        '200':
          description: "successful operation"
          content:
            text/plain:
              schema:
                type: "object"
                format: Map[string, integer]
            application/json:
              schema:
                type: "object"
                format: Map[string, integer]
        400:
          description: "failed"

  /measurement/issueTypeCounts:
    get:
      tags:
      - "缺陷度量接口"
      summary: "现有静态问题按类型统计数"
      description: "根据repo与commit的唯一ID获取静态问题类型统计数"
      operationId: "getIssueTypeCountsByCategoryAndRepoId"
      parameters:
      - in: "query"
        name: "repoId"
        description: "repo的唯一ID"
        required: true
        schema:
          type: "string"
          example: "aa41c6ae-6fd0-11e9-b723-0f92b2ad63bf"
      - in: "query"
        name: "category"
        description: "工具选择，findbugs则选择'bug' "
        required: true
        schema:
          type: "string"
          example: "bug"
      - in: "query"
        name: "commitId"
        description: "commit的唯一ID"
        required: false
        schema:
          type: "string"
          example: "18c74e4ad86de23c41ea57abc1e88ebed3140fe3"
      responses:
        200:
          description: "successful operation"
          content:
            text/plain:
              schema:
                type: "object"
                format: Map[string, Integer]
              examples:
                IssueTypeCountsExample:
                  value:
                    UI_INHERITANCE_UNSAFE_GETRESOURCE: 1
                    UC_USELESS_OBJECT: 2
                    DM_DEFAULT_ENCODING:  4
            application/json:
              schema:
                type: "object"
                format: Map[string, Integer]
              examples:
                IssueTypeCountsExample:
                  value:
                    UI_INHERITANCE_UNSAFE_GETRESOURCE: 1
                    UC_USELESS_OBJECT: 2
                    DM_DEFAULT_ENCODING:  4

        400:
          description: "failed"

  /cloneRateInfo:
    get:
      tags:
      - "缺陷度量接口"
      summary: "获取代码重复行数"
      description: "根据repo获取一段时间内的每次commit版本下的代码重复行数"
      operationId: "getCloneRate"
      parameters:
      - in: "query"
        name: "repo_id"
        description: "repo的唯一ID"
        required: true
        schema:
          type: "string"
          example: "aa41c6ae-6fd0-11e9-b723-0f92b2ad63bf"
      - in: "query"
        name: "since"
        description: "从什么时候开始统计"
        required: true
        schema:
          type: "string"
          example: "2019-02-08"
      - in: "query"
        name: "until"
        description: "统计到什么时候结束"
        required: true
        schema:
          type: "string"
          example: "2019-06-09"
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloneLinesList'
        400:
          description: "failed"

  /latestCloneLines:
    get:
      tags:
      - "缺陷度量接口"
      summary: "获取repo最新commit版本的代码重复行数"
      description: "获取repo最新commit版本的代码重复行数"
      operationId: "getLatestScannedCommitCloneLines"
      parameters:
      - in: "query"
        name: "repo_id"
        description: "repo的唯一ID"
        required: true
        schema:
          type: "string"
          example: "aa41c6ae-6fd0-11e9-b723-0f92b2ad63bf"
      responses:
        '200':
          description: "successful operation"
          content:
            text/plain:
              schema:
                type: "integer"
            application/json:
              schema:
                type: "integer"
        400:
          description: "failed"


  #  以下是issue接口，对应IssueController
  /issue:
    get:
      tags:
      - "issue接口"
      summary: "获取issueList"
      description: "根据project的ID获取issueList"
      operationId: "getIssues"
      parameters:
      - in: "query"
        name: "project_id"
        description: "project的ID"
        required: true
        schema:
          type: "string"
      - in: "query"
        name: "page"
        required: true
        schema:
          type: "integer"
      - in: "query"
        name: "size"
        required: true
        schema:
          type: "integer"
      - in: "query"
        name: "category"
        required: true
        schema:
          type: "string"
      responses:
        '200':
          description: "successful operation"
          content:
            text/plain:
              schema:
                type: "object"
                format: Map[string, object]
            application/json:
              schema:
                type: "object"
                format: Map[string, object]
        400:
          description: "failed"

  /issue/one-issue:
    get:
      tags:
      - "issue接口"
      summary: "获取issue"
      description: "根据issue的ID获取issue"
      operationId: "getSpecificIssue"
      parameters:
      - in: "query"
        name: "issue_id"
        description: "issue的ID"
        required: true
        schema:
          type: "string"
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
        400:
          description: "failed"

  /issue/issue-types:
    get:
      tags:
      - "issue接口"
      summary: "获取issue的types"
      description: "根据category获取issue-types"
      operationId: "getExistIssueTypes"
      parameters:
      - in: "query"
        name: "category"
        description: "工具类型，默认是bug"
        required: true
        schema:
          type: "string"
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueTypes'
        400:
          description: "failed"

  /issue/filter:
    post:
      tags:
      - "issue接口"
      summary: "filter of issues"
      operationId: "filterIssues"
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueFilterRequestParam'
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  totalPage:
                    type: "integer"
                    format: "int32"
                  totalCount:
                    type: "integer"
                    format: "int32"
                  issueList:
                    items:
                      $ref: '#/components/schemas/IssueList'
        400:
          description: "failed"

  /issue/dashboard:
    get:
      tags:
      - "issue接口"
      summary: "get dashboard info "
      operationId: "getDashBoardInfo"
      parameters:
      - in: "header"
        name: "token"
        description: "get userToken from Header"
        required: true
        schema:
          type: "string"
      - in: "query"
        name: "duration"
        required: true
        schema:
          type: "string"
      - in: "query"
        name: "project_id"
        required: false
        schema:
          type: "string"
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  newIssueCount:
                    type: "integer"
                    format: "int32"
                  eliminatedIssueCount:
                    type: "integer"
                    format: "int32"
                  remainingIssueCount:
                    type: "integer"
                    format: "int32"
        400:
          description: "failed"

  /issue/project-statistical-info:
    get:
      tags:
      - "issue接口"
      summary: "get Avg Eliminated Time And Max Alive Time"
      operationId: "getAvgEliminatedTimeAndMaxAliveTime"
      parameters:
      - in: "query"
        name: "project_id"
        required: true
        schema:
          type: "string"
      - in: "query"
        name: "category"
        required: false
        schema:
          type: "string"
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueStatisticInfo'

        400:
          description: "failed"

  /issue/statistical-results:
    get:
      tags:
      - "issue接口"
      summary: "get Statistical Results"
      operationId: "getStatisticalResults"
      parameters:
      - in: "header"
        name: "token"
        description: "get userToken from Header"
        required: true
        schema:
          type: "string"
      - in: "query"
        name: "month"
        required: true
        schema:
          type: "integer"
      - in: "query"
        name: "project_id"
        required: false
        schema:
          type: "string"
      - in: "query"
        name: "category"
        required: false
        schema:
          type: "string"
      responses:
        '200':
          description: "successful operation"
          content:
            text/plain:
              schema:
                type: "object"
                format: Map[string, object]
            application/json:
              schema:
                type: "object"
                format: Map[string, object]
        400:
          description: "failed"

  /issue/statistical-results-fix:
    get:
      tags:
      - "issue接口"
      summary: "get New Trend"
      operationId: "getNewTrend"
      parameters:
      - in: "header"
        name: "token"
        description: "get userToken from Header"
        required: true
        schema:
          type: "string"
      - in: "query"
        name: "month"
        required: true
        schema:
          type: "integer"
      - in: "query"
        name: "project_id"
        required: false
        schema:
          type: "string"
      - in: "query"
        name: "category"
        required: false
        schema:
          type: "string"
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/IssueCount"
        400:
          description: "failed"

  /issue/specific-issues:
    post:
      tags:
      - "issue接口"
      summary: "get Specific Issues"
      operationId: "getSpecificIssues"
      requestBody:
        description: ""
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueParam'
      parameters:
      - in: "header"
        name: "token"
        description: "用户token"
        required: true
        schema:
          type: "string"
      responses:
        '200':
          description: "successful operation"
          content:
            text/plain:
              schema:
                type: "object"
                format: Map[string, object]
            application/json:
              schema:
                type: "object"
                format: Map[string, object]
        400:
          description: "failed"

  /issue/priority/{issue-id}:
    put:
      tags:
      - "issue接口"
      summary: "update Priority"
      operationId: "updatePriority"
      parameters:
      - in: "path"
        name: "issue-id"
        description: ""
        required: true
        schema:
          type: "string"
      - in: "query"
        name: "priority"
        description: " 0 对应 Immediate，1对应Urgent，2对应High，3对应Normal，4对应Low"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "successful operation"
        401:
          description: "failed operation"

  /issue/status/{issue-id}:
    put:
      tags:
      - "issue接口"
      summary: "update Status"
      operationId: "updateStatus"
      parameters:
      - in: "path"
        name: "issue-id"
        description: ""
        required: true
        schema:
          type: "string"
      - in: "query"
        name: "status"
        description: "包括4种可手动更改状态，Open、Ignore、Misinformation、To_Review"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "successful operation"
        401:
          description: "failed operation"


  #  以下是RawIssue接口，对应RawIssueController

  /raw-issue:
    get:
      tags:
      - "RawIssue接口"
      summary: "get Raw Issue List"
      operationId: "getRawIssueList"
      parameters:
      - in: "query"
        name: "issue_id"
        required: true
        schema:
          type: "string"
      responses:
        '200':
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/RawIssue'
        400:
          description: "failed"

  /raw-issueList:
    get:
      tags:
      - "RawIssue接口"
      summary: "get One Page Raw Issue List"
      operationId: "getOnePageRawIssueList"
      parameters:
      - in: "query"
        name: "issue_id"
        required: true
        schema:
          type: "string"
      - in: "query"
        name: "page"
        required: true
        schema:
          type: "integer"
      - in: "query"
        name: "size"
        required: true
        schema:
          type: "integer"
      responses:
        '200':
          description: "successful operation"
          content:
            text/plain:
              schema:
                type: "object"
                format: Map[string, object]
            application/json:
              schema:
                type: "object"
                format: Map[string, object]
        400:
          description: "failed"

  /raw-issue/code:
    get:
      tags:
      - "RawIssue接口"
      summary: "get Code"
      operationId: "getCode"
      parameters:
      - in: "query"
        name: "project_id"
        required: true
        schema:
          type: "string"
      - in: "query"
        name: "commit_id"
        required: true
        schema:
          type: "string"
      - in: "query"
        name: "file_path"
        required: true
        schema:
          type: "string"
      responses:
        '200':
          description: "successful operation"
          content:
            text/plain:
              schema:
                type: "object"
                format: Map[string, object]
            application/json:
              schema:
                type: "object"
                format: Map[string, object]
        400:
          description: "failed"



components:
  schemas:
    CodeQualityResponse:
      type: "object"
      properties:
        code:
          type: "integer"
          example: 200
          description: "如果响应成功则返回200状态码，响应失败返回返回其他状态码。"
        msg:
          type: "string"
          description: "响应返回的基本消息"
        data:
          $ref: '#/components/schemas/TotalCodeQuality'

    TotalCodeQuality:
      type: "object"
      properties:
        totalCountQualities:
          type: "integer"
          description: "返回的代码缺陷质量统计，基于时间粒度的条数。"
        page:
          type: "integer"
          description: "第几页缺陷质量统计"
        ps:
          type: "integer"
          description: "每页的条数"
        totalQuality:
          $ref: '#/components/schemas/CodeQuality'
        qualities:
          type: "array"
          items:
            $ref: '#/components/schemas/TimeCodeQuality'
        developers:
          type: "array"
          items:
            $ref: '#/components/schemas/DeveloperCodeQuality'

    CodeQuality:
      type: "object"
      properties:
        newIssues:
          type: "integer"
          description: "新增缺陷数量"
        eliminateIssues:
          type: "integer"
          description: "消除缺陷数量"
        eliminateIssueQuality:
          type: "number"
          description: "消除缺陷代码质量"
        addIssueQuality:
          type: "number"
          description: "新增缺陷代码质量"

    TimeCodeQuality:
      allOf:
      - $ref: '#/components/schemas/CodeQuality'
      - type: "object"
        properties:
          date:
            type: "string"
            format: "date"
            example: "2019-06-09"

    DeveloperCodeQuality:
      allOf:
      - $ref: '#/components/schemas/CodeQuality'
      - type: "object"
        properties:
          developerName:
            type: "string"
            description: "开发者姓名"

    IssueCountResponse:
      type: "object"
      properties:
        code:
          type: "integer"
          example: 200
          description: "如果响应成功则返回200状态码，响应失败返回返回其他状态码。"
        msg:
          type: "string"
          description: "响应返回的基本消息"
        data:
          $ref: '#/components/schemas/IssueCountList'

    IssueCountList:
      type: "array"
      items:
        $ref: '#/components/schemas/IssueCount'

    IssueCount:
      type: "object"
      properties:
        date:
          type: "string"
          description: "代码提交时间"
        newIssueCount:
          type: "integer"
          description: "新增问题数"
        eliminatedIssueCount:
          type: "integer"
          description: "消除问题数"
        remainingIssueCount:
          type: "integer"
          description: "遗留问题数"

    IssueCountByRepoResponse:
      type: "object"
      properties:
        code:
          type: "integer"
          example: 200
          description: "如果响应成功则返回200状态码，响应失败返回返回其他状态码。"
        msg:
          type: "string"
          description: "响应返回的基本消息"
        data:
          $ref: '#/components/schemas/IssueCountByRepo'

    IssueCountByRepo:
      type: "object"
      properties:
        newIssueCount:
          type: "integer"
          description: "这段时间内该repo的总的新增问题数"
        eliminatedIssueCount:
          type: "integer"
          description: "这段时间内该repo的总的消除问题数"

    IssueCountByDeveloperResponse:
      type: "object"
      properties:
        code:
          type: "integer"
          example: 200
          description: "如果响应成功则返回200状态码，响应失败返回返回其他状态码。"
        msg:
          type: "string"
          description: "响应返回的基本消息"
        data:
          $ref: '#/components/schemas/IssueCountByDeveloperList'

    IssueCountByDeveloperList:
      type: "array"
      items:
        $ref: '#/components/schemas/IssueCountByDeveloper'

    IssueCountByDeveloper:
      type: "object"
      properties:
        developer:
          type: "string"
          description: "开发者名称"
        newIssueCount:
          type: "integer"
          description: "这段时间内该repo的该开发者提交产生的总的新增问题数"
        eliminatedIssueCount:
          type: "integer"
          description: "这段时间内该repo的该开发者提交产生的总的消除问题数"

    CloneLinesList:
      type: "array"
      items:
        type: "integer"

    Issue:
      type: "object"
      properties:
        uuid:
          type: "string"
        type:
          type: "string"
        category:
          type: "string"
        start_commit:
          type: "string"
        start_commit_date:
          type: "string"
        end_commit:
          type: "string"
        end_commit_date:
          type: "string"
        raw_issue_start:
          type: "string"
        raw_issue_end:
          type: "string"
        repo_id:
          type: "string"
        target_files:
          type: "string"
        create_time:
          type: "string"
        update_time:
          type: "string"
        issueType:
          type: "object"
          properties:
            uuid:
              type: "string"
            type:
              type: "string"
            tool:
              type: "string"
            category:
              type: "string"
            description:
              type: "string"
        tags:
          type: "array"
          items:
            type: "object"
        priority:
          type: "integer"
        displayId:
          type: "integer"
        status:
          type: "string"
        resolution:
          type: "string"
        sonar_issue_id:
          type: "string"

    IssueTypes:
      type: "array"
      items:
        type: "string"

    IssueFilterRequestParam:
      type: "object"
      properties:
        project_id:
          type: "string"
        size:
          type: "integer"
          format: "int32"
        page:
          type: "integer"
          format: "int32"
        category:
          type: "string"
        tags:
          type: "array"
          items:
            type: "string"
        types:
          type: "array"
          items:
            type: "string"

    IssueList:
      type: "array"
      items:
        $ref: "#/components/schemas/Issue"

    IssueStatisticInfo:
      type: "object"
      properties:
        avgEliminatedTime:
          type: "number"
        maxAliveTime:
          type: "number"

    IssueParam:
      type: "object"
      properties:
        projectId:
          type: "string"
        category:
          type: "string"
        duration:
          type: "string"
        page:
          type: "integer"
        size:
          type: "integer"
        onlyNew:
          type: "boolean"
        onlyEliminated:
          type: "boolean"
        types:
          type: "array"
          items:
            type: "string"
        tags:
          type: "array"
          items:
            type: "string"

    RawIssue:
      type: "object"
      properties:
        uuid:
          type: "string"
        type:
          type: "string"
        category:
          type: "string"
        detail:
          type: "string"
        file_name:
          type: "string"
        scan_id:
          type: "string"
        issue_id:
          type: "string"
        commit_id:
          type: "string"
        repo_id:
          type: "string"
        code_lines:
          type: "integer"
        status:
          type: "string"
        locations:
          type: "array"
          items:
            $ref: '#/components/schemas/Location'
        commit_time:
          type: "string"
        developer_email:
          type: "string"
        issue:
          $ref: '#/components/schemas/Issue'

    Location:
      type: "object"
      properties:
        uuid:
          type: "string"
        start_line:
          type: "integer"
        end_line:
          type: "integer"
        bug_lines:
          type: "string"
        start_token:
          type: "integer"
        end_token:
          type: "integer"
        file_path:
          type: "string"
        class_name:
          type: "string"
        method_name:
          type: "string"
        rawIssue_id:
          type: "string"
        code:
          type: "string"














