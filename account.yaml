openapi: 3.0.0
info:
  description: ""
  version: "1.0.0"
  title: "issueTracker"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "pyu17@fudan.edu.cn"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

servers:
- url: http://10.141.221.85:8000
  description: 接口测试地址


tags:
- name: "account 接口"


paths:
  /user/account-name/check:
    get:
      tags:
      - "account 接口"
      summary: "验证用户注册名是否可用"
      description: "验证用户注册名是否符合规范，比如：未使用，不包含特殊符号等。目前只验证是否已使用"
      operationId: "checkUserName"
      parameters:
      - in: "query"
        name: "accountName"
        description: "用户名"
        required: true
        schema:
          type: "string"
      responses:
        '200':
          description: "successful operation"
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AccountNameCheckResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/AccountNameCheckResponse'
        400:
          description: "failed"
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/EmailCheckResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/EmailCheckResponse'

  /user/email/check:
    get:
      tags:
      - "account 接口"
      summary: "验证邮箱是否可用"
      description: "验证邮箱是否符合规范，比如：未使用，不包含特殊符号等。目前只验证是否已使用"
      operationId: "checkEmail"
      parameters:
      - in: "query"
        name: "email"
        description: "邮箱地址"
        required: true
        schema:
          type: "string"
      responses:
        '200':
          description: "successful operation"
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/EmailCheckResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/EmailCheckResponse'
        400:
          description: "failed"
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/EmailCheckResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/EmailCheckResponse'

  /user/nick-name/check:
    get:
      tags:
      - "account 接口"
      summary: "验证昵称是否可用"
      description: "验证昵称是否符合规范，比如：未使用，不包含特殊符号等。目前只验证是否已使用"
      operationId: "checkNickName"
      parameters:
      - in: "query"
        name: "nickName"
        description: "昵称"
        required: true
        schema:
          type: "string"
      responses:
        '200':
          description: "successful operation"
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/NickNameCheckResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/NickNameCheckResponse'
        400:
          description: "failed"
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/NickNameCheckResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/NickNameCheckResponse'

  /user/register:
    post:
      tags:
      - "account 接口"
      summary: "注册用户"
      description: "提交用户注册信息，完成用户注册。"
      operationId: "createUser"
      requestBody:
        description: "用户信息"
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: "successful operation"
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        400:
          description: "failed"
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'

  /user/login:
    get:
      tags:
      - "account 接口"
      summary: "用户登录"
      description: "用户登录，同时返回token"
      operationId: "login"
      parameters:
      - in: "query"
        name: "username"
        description: "用户名"
        required: true
        schema:
          type: "string"
      - in: "query"
        name: "password"
        description: "密码"
        required: true
        schema:
          type: "string"
      responses:
        '200':
          description: "successful operation"
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/LoginResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        400:
          description: "failed"
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/LoginResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'

  /user/accountId:
    get:
      tags:
      - "account 接口"
      summary: "通过token，获取 account id"
      operationId: "getAccountID"
      parameters:
      - in: "query"
        name: "userToken"
        description: "用户token"
        required: true
        schema:
          type: "string"

      responses:
        200:
          description : "succsssful"
          content:
            text/plain:
              schema:
                type: "string"
            application/json:
              schema:
                type: "string"
        400:
          description: "failed"
        401:
          description: "Incorrect userToken"

  /user/auth/{userToken}:
    get:
      tags:
      - "account 接口"
      summary: "用户验证"
      operationId: "auth"
      parameters:
      - in: "path"
        name: "userToken"
        description: "用户token"
        required: true
        schema:
          type: "string"

      responses:
        200:
          description : "succsssful"
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AuthResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        400:
          description: "failed"
        401:
          description: "Incorrect userToken"



components:
  schemas:
    AccountNameCheckResponse:
      type: "object"
      properties:
        code:
          type: "integer"
          example: 200
          description: "如果响应成功则返回200状态码，响应失败返回返回其他状态码。"
        msg:
          type: "string"
          description: "响应返回的基本消息"
        data:
          type: "boolean"
          description: "是否已存在"


    EmailCheckResponse:
      type: "object"
      properties:
        code:
          type: "integer"
          example: 200
          description: "如果响应成功则返回200状态码，响应失败返回返回其他状态码。"
        msg:
          type: "string"
          description: "响应返回的基本消息"
        data:
          type: "boolean"
          description: "是否已存在"

    NickNameCheckResponse:
      type: "object"
      properties:
        code:
          type: "integer"
          example: 200
          description: "如果响应成功则返回200状态码，响应失败返回返回其他状态码。"
        msg:
          type: "string"
          description: "响应返回的基本消息"
        data:
          type: "boolean"
          description: "是否已存在"

    User:
      type: "object"
      properties:
        accountName:
          type: "string"
        password:
          type: "string"
        name:
          type: "string"
        email:
          type: "string"

    RegisterResponse:
      type: "object"
      properties:
        code:
          type: "integer"
          example: 200
          description: "如果响应成功则返回200状态码，响应失败返回返回其他状态码。"
        msg:
          type: "string"
          description: "响应返回的基本消息"
        data:
          type: "object"


    LoginResponse:
      type: "object"
      properties:
        code:
          type: "integer"
          example: 200
          description: "如果响应成功则返回200状态码，响应失败返回返回其他状态码。"
        msg:
          type: "string"
          description: "响应返回的基本消息"
        data:
          type: "object"
          properties:
            username:
              type: "string"
            token:
              type: "string"

    AuthResponse:
      type: "object"
      properties:
        code:
          type: "integer"
          example: 200
          description: "如果响应成功则返回200状态码，响应失败返回返回其他状态码。"
        msg:
          type: "string"
          description: "响应返回的基本消息"
        data:
          type: "object"


























