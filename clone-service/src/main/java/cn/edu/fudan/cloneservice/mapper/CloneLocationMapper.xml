<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.fudan.cloneservice.mapper.CloneLocationMapper">
    <resultMap id="cloneLocation" type="cn.edu.fudan.cloneservice.domain.clone.CloneLocation">
        <id property="uuid" column="uuid"/>
        <result property="repoId" column="repo_id"/>
        <result property="commitId" column="commit_id"/>
        <result property="filePath" column="file_path"/>
        <result property="methodLines" column="method_lines"/>
        <result property="cloneLines" column="clone_lines"/>
        <result property="type" column="type"/>
        <result property="className" column="class_name"/>
        <result property="methodName" column="method_name"/>
        <result property="code" column="code"/>
        <result property="category" column="category"/>
        <result property="num" column="clone_num"/>
    </resultMap>

    <insert id="insertCloneLocationList" parameterType="List">
        insert into clone_location
        (
        uuid,
        repo_id,
        commit_id,
        file_path,
        method_lines,
        clone_lines,
        type,
        class_name,
        method_name,
        code,
        category,
        clone_num
        )
        VALUES
        <foreach collection="list" item="item" index="index" separator=",">
            (
            #{item.uuid},
            #{item.repoId},
            #{item.commitId},
            #{item.filePath},
            #{item.methodLines},
            #{item.cloneLines},
            #{item.type},
            #{item.className},
            #{item.methodName},
            #{item.code},
            #{item.category},
            #{item.num}
            )
        </foreach>
    </insert>

    <select id="getCloneLocations" resultMap="cloneLocation">
        select * from clone_location where repo_id=#{repo_id} and commit_id=#{commit_id}
    </select>

    <delete id="deleteCloneLocations" parameterType="String">
        delete from clone_location where repo_id=#{repo_id}
    </delete>

    <select id="getCloneLocationsTest" parameterType="String" resultMap="cloneLocation">
        select * from issueTrackerTest.clone_location where repo_id=#{repo_id} and commit_id=#{commit_id}
    </select>

    <select id="getLatestCommitId" parameterType="String" resultType="String">
        SELECT commit_id
        from issueTracker.commit_view
        <where>
            <if test="repo_uuid != null and repo_uuid != '' ">
                and repo_uuid = #{repo_uuid}
            </if>
            <if test="until != null and until != '' ">
                and <![CDATA[ commit_time <= #{until} ]]>
            </if>
            and message NOT LIKE '%Merge%'
        </where>

        ORDER By commit_time desc limit 1
    </select>

    <select id="getGroupCount" parameterType="String" resultType="java.lang.Integer">
        select count(*) from (SELECT *
        from issueTracker.clone_location
        <where>

            <if test="commit_id != null and commit_id != '' ">
                and commit_id = #{commit_id}
            </if>

        </where>
        group by category) as t
    </select>

    <select id="getFileCount" parameterType="String" resultType="java.lang.Integer">
        select count(*) from (SELECT *
        from issueTracker.clone_location
        <where>

            <if test="commit_id != null and commit_id != '' ">
                and commit_id = #{commit_id}
            </if>

        </where>
        group by file_path) as t
    </select>

    <select id="getCloneNum" parameterType="String" resultType="String">
        SELECT clone_num
        from issueTracker.clone_location
        <where>
            <trim prefixOverrides="and">
                <if test="commit_id != null and commit_id != '' ">
                    and commit_id = #{commit_id}
                </if>
            </trim>
        </where>
    </select>
</mapper>